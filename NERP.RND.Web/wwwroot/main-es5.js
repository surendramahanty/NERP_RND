var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"], {
        /***/ "./$$_lazy_route_resource lazy recursive": 
        /*!******************************************************!*\
          !*** ./$$_lazy_route_resource lazy namespace object ***!
          \******************************************************/
        /*! no static exports found */
        /***/ (function (module, exports) {
            function webpackEmptyAsyncContext(req) {
                // Here Promise.resolve().then() is used instead of new Promise() to prevent
                // uncaught exception popping up in devtools
                return Promise.resolve().then(function () {
                    var e = new Error("Cannot find module '" + req + "'");
                    e.code = 'MODULE_NOT_FOUND';
                    throw e;
                });
            }
            webpackEmptyAsyncContext.keys = function () { return []; };
            webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
            module.exports = webpackEmptyAsyncContext;
            webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html": 
        /*!**************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html ***!
          \**************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"wrapper\">\r\n   <header class=\"main-header\">\r\n      <a href=\"/\" class=\"logo\">\r\n         <img src=\"images/logo.svg\" style=\"height: 35px;\">\r\n      </a>\r\n      <nav class=\"navbar\" role=\"navigation\">\r\n         <a href=\"#\" class=\"sidebar-toggle\" data-toggle=\"push-menu\" role=\"button\">\r\n            <i class=\"fas fa-bars\"></i>\r\n         </a>\r\n         <div class=\"navbar-custom-menu\">\r\n            <ul class=\"nav navbar-nav\">\r\n               <li>\r\n                  <a href=\"#\">\r\n                     <span class=\"hidden-xs\">{{loginUser.name}}</span>\r\n                  </a>\r\n               </li>\r\n               <li>\r\n                  <a [routerLink]=\"\" title=\"Logout\" class=\"nav-link\" (click)=\"onLogout()\"><i class=\"fas fa-sign-out-alt\"></i></a>\r\n               </li>\r\n            </ul>\r\n         </div>\r\n      </nav>\r\n   </header>\r\n   <aside class=\"main-sidebar\">\r\n      <section class=\"sidebar\">\r\n         <ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n            <li class=\"header\">MAIN NAVIGATION</li>\r\n            <li [routerLinkActive]=\"['active']\"><a [routerLink]=\"['/home']\"><span>Home</span></a></li>\r\n            <li [routerLinkActive]=\"['active']\"><a [routerLink]=\"['/homepasses']\" *ngIf=\"getFeatureAccess('RND_HOMEPASSSES')\"><span>Homepasses</span></a></li>\r\n            <li [routerLinkActive]=\"['active']\"><a [routerLink]=\"['/clusters']\" *ngIf=\"getFeatureAccess('RND_CLUSTERS')\"><span>Clusters</span></a></li>\r\n            <li [routerLinkActive]=\"['active']\"><a [routerLink]=\"['/designs']\" *ngIf=\"getFeatureAccess('RND_DESIGN')\"><span>Designs</span></a></li>\r\n         </ul>\r\n      </section>\r\n   </aside>\r\n   <div class=\"content-wrapper\">\r\n      <router-outlet></router-outlet>\r\n   </div>\r\n   <footer class=\"main-footer\">\r\n      <span>&copy; Pitney Bowes 2019</span>\r\n      <!--<div class=\"pull-right hidden-xs\">\r\n         <span>Best view with IE 11, Mozilla 51, Chrome 55 and Safari 10 and above</span>\r\n      </div>-->\r\n   </footer>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/clusters/views/cluster-details.html": 
        /*!*******************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/clusters/views/cluster-details.html ***!
          \*******************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n   <h1>Manage clusters <small> {{title}} </small></h1>\r\n   <ol class=\"breadcrumb\">\r\n      <li><a [routerLink]=\"['/home']\"><i class=\"fa fa-home\"></i> Home</a></li>\r\n      <li><a [routerLink]=\"['/clusters']\"> clusters</a></li>\r\n   </ol>\r\n</section>\r\n\r\n<section class=\"content\">\r\n   <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n         <div class=\"box\">\r\n            <div class=\"box-header with-border ui-sortable-handle\">\r\n               <ul class=\"nav nav-tabs form-menu\">\r\n                  <li [class]=\"isNew == true?'active': ''\" *ngIf=\"isNew == true\"><a href=\"#tab_import\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Import</span></a></li>\r\n                  <li [class]=\"isNew == false?'active': ''\"><a href=\"#tab_map\" data-toggle=\"tab\"><span style=\"font-size:1.2em\">{{tabTitle}}</span></a></li>\r\n               </ul>\r\n               <div class=\"box-tools pull-right\">\r\n                  <button class=\"btn btn-social-icon btn-xs btn-danger\" (click)=\"goBack()\">\r\n                     <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                  <button class=\"btn btn-social-icon btn-xs btn-success\" type=\"submit\" style=\"margin-left: 5px;\" (click)=\"save()\" [disabled]=\"form.invalid\">\r\n                     <i class=\"far fa-save\"></i>\r\n                  </button>\r\n               </div>\r\n            </div>\r\n            <div class=\"box-body\">\r\n               <form name=\"form\" action=\"javascript:{}\" #form=\"ngForm\" autocomplete=\"off\" novalidate>\r\n                  <div class=\"tab-content\">\r\n                     <div id=\"tab_import\" [class]=\"isNew == true?'tab-pane active': 'tab-pane'\">\r\n                        <div class=\"col-md-12\">\r\n                           <div class=\"form-group\">\r\n                              <label for=\"uploadFile\">Upload file</label>\r\n                              <div class=\"input-group\">\r\n                                 <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n                                 <span class=\"input-group-btn\">\r\n                                    <span class=\"btn btn-primary btn-file\">\r\n                                       Browse&hellip; <input type=\"file\" accept=\".csv, .kml, .zip\" (change)=\"fileChangeEvent($event)\">\r\n                                    </span>\r\n                                 </span>\r\n                              </div>\r\n                           </div>\r\n                           <div class=\"form-group\">\r\n                              <label *ngIf=\"clusters && clusters.length > 0\">Total clusters: {{clusters.length}}</label>\r\n                              <table class=\"table table-bordered table-striped\">\r\n                                 <thead>\r\n                                    <tr>\r\n                                       <th style=\"width:150px\">Code</th>\r\n                                       <th>Name</th>\r\n                                       <th style=\"width:150px\">Type</th>\r\n                                       <th style=\"width:50px\" class='text-center'></th>\r\n                                    </tr>\r\n                                 </thead>\r\n                                 <tbody>\r\n                                    <ng-container *ngIf='clusters && clusters.length > 0'>\r\n                                       <tr *ngFor='let cstr of clusters;let rowIndex = index;'>\r\n                                          <td>{{cstr.code}}</td>\r\n                                          <td>{{cstr.name}}</td>\r\n                                          <td>{{cstr.type}}</td>\r\n                                          <td style=\"text-align:center\">\r\n                                             <a (click)=\"removeUploadedCluster(rowIndex)\" style=\"cursor:pointer\"><i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red;\" title=\"Delete\"></i></a>\r\n                                          </td>\r\n                                       </tr>\r\n                                    </ng-container>\r\n                                    <tr *ngIf='clusters == null || clusters.length == 0'>\r\n                                       <td colspan=\"4\" style=\"text-align: center;\">\r\n                                          Upload clusteres.\r\n                                       </td>\r\n                                    </tr>\r\n                                 </tbody>\r\n                              </table>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                     <div id=\"tab_map\" [class]=\"isNew == false?'tab-pane active': 'tab-pane'\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"position: relative;\">\r\n                              <div id=\"clusterMap\" style=\"min-height: 481px;\"></div>\r\n                              <div class=\"box pull-right properties\" *ngIf=\"cluster != null\">\r\n                                 <div class=\"box-header with-border\">\r\n                                    <!--<div class=\"pull-right\">\r\n                                       <i class=\"pull-right fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"deleteCluster()\"></i>\r\n                                    </div>-->\r\n                                    <ul class=\"nav nav-tabs control-sidebar-tabs\">\r\n                                       <li class=\"active\"><a href=\"#tab_properties\" data-toggle=\"tab\" aria-expanded=\"true\">Properties</a></li>\r\n                                       <li style=\"border-right: 1px solid; border-left: 1px solid;\"><a href=\"#tab_homepasses\" data-toggle=\"tab\" aria-expanded=\"false\">Homepasses</a></li>\r\n                                       <li style=\"padding-top: 3px; padding-left: 30px;\"><i class=\"pull-right fas fa-trash-alt\" style=\"color: Red; cursor:pointer\" (click)=\"deleteCluster()\"></i></li>\r\n                                    </ul>\r\n                                 </div>\r\n                                 <div class=\"box-body tab-content\">\r\n                                    <div id=\"tab_properties\" class=\"tab-pane active\" style=\"height: 420px;\">\r\n                                       <div class=\"form-group\">\r\n                                          <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                                          <input type=\"text\" class=\"form-control input-sm\" name=\"name\" [(ngModel)]=\"cluster.name\">\r\n                                       </div>\r\n                                       <div class=\"form-group\">\r\n                                          <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                                          <input type=\"text\" class=\"form-control input-sm\" name=\"code\" [(ngModel)]=\"cluster.code\">\r\n                                       </div>\r\n                                       <div class=\"form-group\">\r\n                                          <label for=\"description\" class=\"control-label\">Description </label>\r\n                                          <input type=\"text\" class=\"form-control input-sm\" name=\"description\" [(ngModel)]=\"cluster.description\">\r\n                                       </div>\r\n                                       <div class=\"form-group\">\r\n                                          <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                                          <textarea type=\"text\" rows=\"5\" class=\"form-control input-sm\" name=\"coordinates\" value=\"{{stringify(cluster.geometry.coordinates)}}\" readonly></textarea>\r\n                                       </div>\r\n                                    </div>\r\n                                    <div id=\"tab_homepasses\" class=\"tab-pane\" style=\"height: 419px;overflow-y: auto;\">\r\n                                       <table class=\"table table-bordered table-striped\">\r\n                                          <thead>\r\n                                             <tr>\r\n                                                <th style=\"width:40px;text-align: center;\">\r\n                                                   <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                                                                 [checked]=\"cluster.homepasses?.length > 0 && isAllSelected()\"\r\n                                                                 [indeterminate]=\"cluster.homepasses?.length > 0 && !isAllSelected()\">\r\n                                                   </mat-checkbox>\r\n                                                </th>\r\n                                                <th>Code</th>\r\n                                                <th>Name</th>\r\n                                             </tr>\r\n                                          </thead>\r\n                                          <tbody>\r\n                                             <ng-container *ngIf='cluster.allHomepasses && cluster.allHomepasses.length > 0'>\r\n                                                <tr *ngFor='let homepass of cluster.allHomepasses'>\r\n                                                   <td style=\"text-align: center;\">\r\n                                                      <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                                                                    (change)=\"$event ? toggleSelection(homepass) : null\"\r\n                                                                    [checked]=\"cluster.homepasses?.includes(homepass.id)\">\r\n                                                      </mat-checkbox>\r\n                                                   </td>\r\n                                                   <td>{{homepass.code}}</td>\r\n                                                   <td>{{homepass.name}}</td>\r\n                                                </tr>\r\n                                             </ng-container>\r\n                                             <tr *ngIf='cluster.allHomepasses == null || cluster.allHomepasses.length == 0'>\r\n                                                <td colspan=\"3\" style=\"text-align: center;\">\r\n                                                   No homepass available.\r\n                                                </td>\r\n                                             </tr>\r\n                                          </tbody>\r\n                                       </table>\r\n                                    </div>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n            <div class=\"box-footer\">\r\n               <div class=\"pull-right\">\r\n                  <button type=\"submit\" class=\"btn btn-danger\" (click)=\"goBack()\">Close</button>\r\n                  <button type=\"submit\" class=\"btn btn-success\" style=\"margin-left:10px\" (click)=\"save()\" [disabled]=\"form.invalid\">Save</button>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/clusters/views/cluster-list.html": 
        /*!****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/clusters/views/cluster-list.html ***!
          \****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n   <h1>Manage Clusters</h1>\r\n   <ol class=\"breadcrumb\">\r\n      <li><a [routerLink]=\"['/home']\"><i class=\"fas fa-home\"></i> Home</a></li>\r\n   </ol>\r\n</section>\r\n\r\n<section class=\"content\">\r\n   <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n         <div class=\"box\">\r\n            <div class=\"box-header with-border\">\r\n               <h3 class=\"box-title\">Cluster List</h3>\r\n               <div class=\"box-tools pull-right\" data-toggle=\"tooltip\" title=\"\" data-original-title=\"Status\">\r\n                  <button [routerLink]=\"['details']\" class=\"btn btn-block btn-xs btn-primary\"> New Cluster</button>\r\n               </div>\r\n            </div>\r\n            <div class=\"box-body\">\r\n               <dt-search [searchFields]=\"searchFields\" (onSearch)=\"search($event)\"></dt-search>\r\n               <dt-pagination [totalPages]=\"totalPages\" (onPageSizeChange)=\"onPageSizeChange($event)\" (onPageChange)=\"onPageChange($event)\"></dt-pagination>\r\n\r\n               <table class=\"table table-bordered table-striped\">\r\n                  <thead>\r\n                     <tr (click)=\"onColumnClick($event.target)\">\r\n                        <th data-column=\"Code\" class=\"table-sorter\" style=\"width: 200px;\">Code</th>\r\n                        <th data-column=\"Name\" class=\"table-sorter\" style=\"width: 200px;\">Name</th>\r\n                        <th data-column=\"Description\" class=\"table-sorter\" style=\"max-width:300px\">Description</th>\r\n                        <th data-column=\"UpdatedBy\" class=\"table-sorter\" style=\"width: 150px;\">Updated By</th>\r\n                        <th data-column=\"UpdatedDate\" class=\"table-sorter\" style=\"width: 125px;\">Updated On</th>\r\n                        <th style=\"width:60px\"></th>\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <ng-container *ngIf='clusters && clusters.length > 0'>\r\n                        <tr *ngFor='let cluster of clusters'>\r\n                           <td>{{cluster.code}}</td>\r\n                           <td>{{cluster.name}}</td>\r\n                           <td class=\"text-overflow-ellipsis\">{{cluster.description}}</td>\r\n                           <td>{{cluster.updatedBy}}</td>\r\n                           <td>{{cluster.updatedDate | date:'dd/MM/yyyy'}}</td>\r\n                           <td>\r\n                              <a>\r\n                                 <i class=\"fa fa-edit\" [routerLink]=\"['details', cluster.id]\" title=\"Edit\" style=\"font-size: 14px; cursor:pointer\"></i>\r\n                              </a>&nbsp;\r\n                              <a>\r\n                                 <i class=\"fa fa-trash\" (click)=\"delete(cluster)\" title=\"Remove\" style=\"font-size: 14px; cursor:pointer; color:red\"></i>\r\n                              </a>\r\n                           </td>\r\n                        </tr>\r\n                     </ng-container>\r\n                     <tr *ngIf='clusters == null || clusters.length == 0'>\r\n                        <td colspan=\"6\" style=\"text-align: center;\">\r\n                           {{statusMessage}}\r\n                        </td>\r\n                     </tr>\r\n                  </tbody>\r\n               </table>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/cf-group/cf-group.html": 
        /*!*****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/cf-group/cf-group.html ***!
          \*****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("   <ng-container *ngIf='customFields && customFields.length > 0'>\r\n      <ng-container *ngFor='let groups of customFieldGroups;let rowIndex = index;'>\r\n         <ng-container *ngFor='let item of groups'>\r\n            <div class=\"panel panel-borderless\">\r\n               <div class=\"panel-heading\">\r\n                  <h4 class=\"panel-title\">\r\n                     <a class=\"accordion-toggle\" data-toggle=\"collapse\" [attr.data-parent]=\"'#'+accordionId\" [href]=\"'#cf_'+rowIndex\">{{item.category}}</a>\r\n                  </h4>\r\n               </div>\r\n               <div [id]=\"'cf_'+rowIndex\" class=\"panel-collapse collapse\">\r\n                  <div class=\"panel-body\">\r\n                     <div class=\"form-group\">\r\n                        <label for=\"category\" class=\"control-label\">{{item.label}}</label>\r\n                        <input [type]=item.dataType class=\"form-control\" [name]=\"item.name\" [(ngModel)]=\"item.userValue\" autocomplete=\"off\">\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </ng-container>\r\n      </ng-container>\r\n   </ng-container>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/data-table/dt-pagination.html": 
        /*!************************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/data-table/dt-pagination.html ***!
          \************************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"pull-left\">\r\n   <span style=\"padding-right: 10px;font-size: small;\">Pages</span>\r\n   <div class=\"btn-group\" style=\"padding-right: 10px;\">\r\n      <button type=\"button\" class=\"btn btn-default dropdown-toggle btn-sm\" data-toggle=\"dropdown\" aria-expanded=\"false\">\r\n         <span style=\"padding-right: 5px;\"> {{pageSize}} </span>\r\n         <span class=\"caret\"></span>\r\n      </button>\r\n      <ul class=\"dropdown-menu\">\r\n         <li><a [routerLink]=\"\" (click)=\"pageSize = 10; pageSizeChange()\">10</a></li>\r\n         <li><a [routerLink]=\"\" (click)=\"pageSize = 20; pageSizeChange()\">20</a></li>\r\n         <li><a [routerLink]=\"\" (click)=\"pageSize = 50; pageSizeChange()\">50</a></li>\r\n         <li><a [routerLink]=\"\" (click)=\"pageSize = 100; pageSizeChange()\">100</a></li>\r\n      </ul>\r\n   </div>\r\n</div>\r\n<div class=\"pull-right\">\r\n   <span style=\"padding-right: 10px;font-size: small;\">Showing page {{currentPage}} of {{totalPages}}</span>\r\n   <div class=\"btn-group\" style=\"padding-bottom:5px\">\r\n      <button class=\"btn btn-default btn-sm\" type=\"button\" (click)=\"setPage(currentPage - 1)\" [ngClass]=\"{disabled:currentPage === 1}\"><i class=\"fa fa-chevron-left fa-fw\"></i></button>\r\n      <button class=\"btn btn-default btn-sm\" type=\"button\" (click)=\"setPage(currentPage + 1)\" [ngClass]=\"{disabled:currentPage === totalPages}\"><i class=\"fa fa-chevron-right fa-fw\"></i></button>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/data-table/dt-search.html": 
        /*!********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/components/data-table/dt-search.html ***!
          \********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"input-group input-group-sm\" style=\"padding-bottom:20px\">\r\n   <div class=\"input-group-btn\">\r\n      <button type=\"button\" class=\"btn btn-warning dropdown-toggle search-dropdown\" data-toggle=\"dropdown\" aria-expanded=\"false\">\r\n         {{selectedField.label}}\r\n         <span class=\"fa fa-caret-down\"></span>\r\n      </button>\r\n      <ul class=\"dropdown-menu\">\r\n         <ng-container *ngIf='searchFields && searchFields.length > 0'>\r\n            <li *ngFor='let searchField of searchFields'>\r\n               <a [routerLink]=\"\" (click)=setSearchField(searchField)>{{searchField.label}}</a>\r\n            </li>\r\n         </ng-container>\r\n         <li class=\"divider\"></li>\r\n         <li><a [routerLink]=\"\" data-toggle=\"modal\" data-target=\"#advancedSearch\">Advanced Search</a></li>\r\n\r\n      </ul>\r\n   </div>\r\n   <input [type]=selectedField.dataType class=\"form-control\" name=\"dateSearch\" [(ngModel)]=\"searchText\" autocomplete=\"off\">\r\n   <span class=\"input-group-btn\">\r\n      <button type=\"button\" class=\"btn btn-info btn-flat\" (click)=\"search()\"><i class=\"fas fa-search\"></i></button>\r\n   </span>\r\n</div>\r\n<ng-container *ngIf=\"searchFilter && searchFilter.filters.length > 0\">\r\n   <div style=\"padding-bottom: 8px; border-bottom: 1px solid #ddd; margin-bottom: 10px;\">\r\n      <label>Search Filters:</label>\r\n      <div class=\"row\">\r\n         <ng-container *ngFor='let filter of filterPills; let rowIndex = index;'>\r\n            <span class=\"search-param\">{{filter.propertyName}} = {{filter.value}} <a (click)=\"removeFilter(rowIndex)\" style=\"cursor:pointer\"><i class=\"fa fa-times\" title=\"Remove\" style=\"color: Red; padding-left: 10px;\"></i></a></span>\r\n         </ng-container>\r\n      </div>\r\n   </div>\r\n</ng-container>\r\n\r\n<div id=\"advancedSearch\" class=\"modal fade\" role=\"dialog\">\r\n   <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\" style=\"border-radius:3px\">\r\n         <div class=\"modal-header\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n            <h4 class=\"modal-title\">Advanced Search</h4>\r\n         </div>\r\n         <div class=\"modal-body\">\r\n            <div class=\"pull-right\">\r\n               <span style=\"padding-right:5px; vertical-align: top;\">Condition</span>\r\n               <label class=\"switch\">\r\n                  <input type=\"checkbox\" [checked]=\"conditionOption\" [(ngModel)]=\"conditionOption\">\r\n                  <span class=\"slider round\"></span>\r\n               </label>\r\n            </div>\r\n            <table class=\"table table-bordered\">\r\n               <thead>\r\n                  <tr>\r\n                     <th style=\"width: 200px;\">Field</th>\r\n                     <th>Value</th>\r\n                  </tr>\r\n               </thead>\r\n               <tbody>\r\n                  <ng-container *ngIf='searchFields && searchFields.length > 0'>\r\n                     <tr *ngFor='let searchField of searchFields'>\r\n                        <td>{{searchField.label}}</td>\r\n                        <td><input [type]=searchField.dataType class=\"form-control input-sm\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"searchField.value\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n                  <tr *ngIf='searchFields == null || searchFields.length == 0'>\r\n                     <td colspan=\"2\" style=\"text-align: center;\">\r\n                        No search fields defined\r\n                     </td>\r\n                  </tr>\r\n               </tbody>\r\n            </table>\r\n         </div>\r\n         <div class=\"modal-footer\">\r\n            <button class=\"btn btn-info\" data-dismiss=\"modal\" type=\"button\" (click)=\"advancedSearch()\">Search</button>\r\n            <button class=\"btn btn-default pull-left\" data-dismiss=\"modal\" type=\"button\" (click)=\"clearSearch()\">Clear</button>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/dashboard/views/dashboard.html": 
        /*!**************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/dashboard/views/dashboard.html ***!
          \**************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n    <h1>Dashboard</h1>\r\n</section>\r\n\r\n<!--<section class=\"content\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"box\">\r\n                <div class=\"box-header with-border ui-sortable-handle\">\r\n                    <h3 class=\"box-title\">Task</h3>\r\n                </div>\r\n                <div class=\"box-body\">\r\n                   <div class=\"row\">\r\n\r\n                   </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</section>-->\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-accessories.html": 
        /*!***********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-accessories.html ***!
          \***********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"form-group col-md-12\">\r\n   <div class=\"form-group\">\r\n      <label for=\"accessory\" class=\"control-label\">Select Accessory</label>\r\n      <div class=\"input-group input-group-sm\">\r\n         <mat-select name=\"accessory\" [(ngModel)]=\"selectedAccessory\">\r\n            <mat-option>Select Accessory</mat-option>\r\n            <ng-container *ngIf=\"accessoriesMaster && accessoriesMaster.length > 0\">\r\n               <mat-option *ngFor=\"let accessory of accessoriesMaster\" [value]=\"accessory\">\r\n                  {{accessory.name}}\r\n               </mat-option>\r\n            </ng-container>\r\n         </mat-select>\r\n         <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addAccessory()\"><i class=\"fas fa-plus\"></i></button></span>\r\n      </div>\r\n   </div>\r\n</div>\r\n<!--<div class=\"col-sm-6\">\r\n   <div class=\"form-group\">\r\n      <label for=\"equipment\" class=\"control-label\">Accessory Option</label>\r\n      <mat-select name=\"accessoryOption\" [(ngModel)]=\"accessorySettings.dataSource\">\r\n         <mat-option>Accessory Option</mat-option>\r\n         <mat-option value=\"import\">Import</mat-option>\r\n         <mat-option value=\"existing\">Use from existing design</mat-option>\r\n         <mat-option value=\"automatic\">Place Automatically</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</div>-->\r\n<!--<div class=\"form-group\" *ngIf=\"accessorySettings.dataSource == 'import'\">\r\n   <label for=\"equipment\" class=\"control-label\">Select Accessories File</label>\r\n   <div class=\"input-group\">\r\n      <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n      <span class=\"input-group-btn\">\r\n         <span class=\"btn btn-primary btn-file\">\r\n            Browse&hellip; <input type=\"file\" multiple #fileInput (click)=\"fileInput.value = null\" value=\"\" (change)=\"fileChangeEvent($event)\">\r\n         </span>\r\n      </span>\r\n   </div>\r\n</div>\r\n<div *ngIf=\"accessorySettings.dataSource == 'existing'\">\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"design\" class=\"control-label\">Select Design</label>\r\n         <mat-select name=\"design\" [(ngModel)]=\"accessorySettings.existingDesignId\" (ngModelChange)=\"onDesignChange($event)\">\r\n            <mat-option>Select Design</mat-option>\r\n            <mat-option *ngFor=\"let item of allDesigns\" [value]=\"item.id\">(ver {{item.version}}) {{item.name}}</mat-option>\r\n         </mat-select>\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"accessoryType\" class=\"control-label\">Accessory Type</label>\r\n         <mat-select name=\"accessoryType\" (ngModelChange)=\"onAccessoryChange($event)\">\r\n            <mat-option>Select Accessory Type</mat-option>\r\n            <mat-option *ngFor=\"let item of designAccessories\" [value]=\"item\">{{item.name}}</mat-option>\r\n         </mat-select>\r\n      </div>\r\n   </div>\r\n</div>-->\r\n<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <table class=\"table table-bordered table-striped\">\r\n         <thead>\r\n            <tr>\r\n               <th>Name</th>\r\n               <th style=\"width:40px\"></th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            <ng-container *ngIf='accessorySettings.accessories && accessorySettings.accessories.length > 0'>\r\n               <tr *ngFor='let accessory of accessorySettings.accessories;let rowIndex = index;'>\r\n                  <td>{{accessory.name}}</td>\r\n                  <td>\r\n                     <a>\r\n                        <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"removeAccessory(rowIndex)\" title=\"Remove\"></i>\r\n                     </a>\r\n                  </td>\r\n               </tr>\r\n            </ng-container>\r\n            <tr *ngIf='accessorySettings.accessories == null || accessorySettings.accessories.length == 0'>\r\n               <td colspan=\"2\" style=\"text-align: center;\">\r\n                  {{statusMessage}}\r\n               </td>\r\n            </tr>\r\n         </tbody>\r\n      </table>\r\n   </div>\r\n</div>\r\n\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-bom.html": 
        /*!***************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-bom.html ***!
          \***************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<ul class=\"nav nav-tabs\" id=\"myNavTabs1\">\r\n   <li class=\"active\"><a href=\"#divSummary\" data-toggle=\"tab\" aria-expanded=\"true\">Summary</a></li>\r\n   <li><a href=\"#divDetails\" data-toggle=\"tab\" aria-expanded=\"false\">Details</a></li>\r\n   <li class=\"btn-group pull-right open\" style=\"padding-left: 0px;\">\r\n      <button type=\"button\" (click)=\"ExportTOKml()\" class=\"btn btn-social-icon btn-md btn-default\">\r\n         <img src=\"images/file-ext/kml.svg\" style=\"width: 23px;margin-top: 5px;margin-left: 5px;\">\r\n      </button>\r\n   </li>\r\n   <li class=\"btn-group pull-right open\" style=\"padding-left: 10px;\">\r\n      <button type=\"button\" (click)=\"ExportTOExcel()\" class=\"btn btn-social-icon btn-md btn-default\">\r\n         <img src=\"images/file-ext/xlsx.svg\" style=\"width: 23px;margin-top: 5px;margin-left: 5px;\">\r\n      </button>\r\n   </li>\r\n</ul>\r\n<div class=\"panel-body\">\r\n   <div class=\"tab-content\">\r\n      <div id=\"divSummary\" class=\"tab-pane active\" #TABLE #table>\r\n         <table class=\"table table-bordered table-striped\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"2\" style=\"text-align:center;\"><b>Total Cost Summary</b></th>\r\n               </tr>\r\n            <tbody>\r\n               <tr>\r\n                  <td><b>Total Material Cost</b></td>\r\n                  <td style=\"text-align:right\">{{totalMaterialCost | number : '1.2-2'}}</td>\r\n               </tr>\r\n               <tr>\r\n                  <td><b>Total Service Cost</b></td>\r\n                  <td style=\"text-align:right\">{{totalServiceCost | number : '1.2-2'}}</td>\r\n               </tr>\r\n            </tbody>\r\n            <tfoot>\r\n               <tr>\r\n                  <td><b>Total Cost</b></td>\r\n                  <td style=\"text-align:right\">{{totalCost | number : '1.2-2'}}</td>\r\n               </tr>\r\n            </tfoot>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"7\" style=\"text-align:center;\"><b>Category Wise Cost Cummary</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <tr>\r\n                  <td style=\"text-align:center\">1</td>\r\n                  <td>Cables</td>\r\n                  <td style=\"text-align:center\">{{cableSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{cableSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{cableSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{cableSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(cableSummary.materialCost + cableSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">2</td>\r\n                  <td>Chambers</td>\r\n                  <td style=\"text-align:center\">{{chamberSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{chamberSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{chamberSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{chamberSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(chamberSummary.materialCost + chamberSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">3</td>\r\n                  <td>Ducts</td>\r\n                  <td style=\"text-align:center\">{{ductSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{ductSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{ductSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{ductSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(ductSummary.materialCost + ductSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">4</td>\r\n                  <td>ODFs</td>\r\n                  <td style=\"text-align:center\">{{odfSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{odfSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{odfSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{odfSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(odfSummary.materialCost + odfSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">5</td>\r\n                  <td>Poles</td>\r\n                  <td style=\"text-align:center\">{{poleSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{poleSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{poleSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{poleSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(poleSummary.materialCost + poleSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">6</td>\r\n                  <td>Splitters</td>\r\n                  <td style=\"text-align:center\">{{splitterSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{splitterSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{splitterSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{splitterSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(splitterSummary.materialCost + splitterSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">7</td>\r\n                  <td>Splice Closures</td>\r\n                  <td style=\"text-align:center\">{{spliceClosureSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{spliceClosureSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{spliceClosureSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{spliceClosureSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(spliceClosureSummary.materialCost + spliceClosureSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">8</td>\r\n                  <td>Accessories</td>\r\n                  <td style=\"text-align:center\">{{accessorySummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{accessorySummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{accessorySummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{accessorySummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(accessorySummary.materialCost + accessorySummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n               <tr>\r\n                  <td style=\"text-align:center\">9</td>\r\n                  <td>Civilworks</td>\r\n                  <td style=\"text-align:center\">{{civilworkSummary.units}}</td>\r\n                  <td style=\"text-align:right\">{{civilworkSummary.quantity | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{civilworkSummary.materialCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\">{{civilworkSummary.serviceCost | number : '1.2-2'}}</td>\r\n                  <td style=\"text-align:right\"><b>{{(civilworkSummary.materialCost + civilworkSummary.serviceCost) | number : '1.2-2'}}</b></td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n      </div>\r\n      <div id=\"divDetails\" class=\"tab-pane\" #TABLE1 #table>\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Cable</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='cableGroups && cableGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of cableGroups;'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='cableGroups == null || cableGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Chambers</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='chamberGroups && chamberGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of chamberGroups;'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='chamberGroups == null || chamberGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Ducts</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='ductGroups && ductGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of ductGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='ductGroups == null || ductGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>ODFs</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='odfGroups && odfGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of odfGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='odfGroups == null || odfGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Poles</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='poleGroups && poleGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of poleGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='poleGroups == null || poleGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Splitters</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='splitterGroups && splitterGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of splitterGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='splitterGroups == null || splitterGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Splice Closures</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='spliceClosureGroups && spliceClosureGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of spliceClosureGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='spliceClosureGroups == null || spliceClosureGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Accessories</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='accessoryGroups && accessoryGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of accessoryGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='accessoryGroups == null || accessoryGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n         <table class=\"table table-bordered table-striped\" style=\"font-size:smaller\">\r\n            <thead>\r\n               <tr>\r\n                  <th scope=\"col\" colspan=\"10\" style=\"text-align:center;\"><b>Civilworks</b></th>\r\n               </tr>\r\n               <tr>\r\n                  <th style=\"width: 60px;text-align: center;\">No.</th>\r\n                  <th>Description</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Quantity</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Currency</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Material <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Material Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Service <br />Cost/Unit</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Service Cost</th>\r\n                  <th style=\"width: 120px;text-align: center;\">Total <br />Cost</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='civilworkGroups && civilworkGroups.length > 0'>\r\n                  <ng-container *ngFor='let items of civilworkGroups; let rowIndex = index'>\r\n                     <tr>\r\n                        <td colspan=\"10\"><b>{{items[0].levelName}}</b></td>\r\n                     </tr>\r\n                     <tr *ngFor='let item of items; let rowIndex = index'>\r\n                        <td style=\"text-align:center\">{{rowIndex}}</td>\r\n                        <td>{{item.description}}</td>\r\n                        <td style=\"text-align:center\">{{item.units}}</td>\r\n                        <td style=\"text-align:right\">{{item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:center; width:80px\">{{item.currency}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.materialCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost}}</td>\r\n                        <td style=\"text-align:right\">{{item.serviceCost * item.quantity | number : '1.2-2'}}</td>\r\n                        <td style=\"text-align:right\"><b>{{(item.materialCost * item.quantity) + (item.serviceCost * item.quantity) | number : '1.2-2'}}</b></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n               <tr *ngIf='civilworkGroups == null || civilworkGroups.length == 0'>\r\n                  <td colspan=\"10\" style=\"text-align: center;\">&nbsp;</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n\r\n      </div>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-bookingIds.html": 
        /*!**********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-bookingIds.html ***!
          \**********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"form-group col-md-12\">\r\n   <table class=\"table table-bordered table-striped\">\r\n      <thead>\r\n         <tr>\r\n            <th style=\"width:125px\">Entity Type</th>\r\n            <th>Format</th>\r\n            <th style=\"width:150px\">Sequence Starting</th>\r\n            <th style=\"width:150px\">Sequence Ending</th>\r\n            <th style=\"width:50px\" class='text-center'></th>\r\n         </tr>\r\n      </thead>\r\n      <tbody>\r\n         <ng-container *ngIf='design.bookingIds && design.bookingIds.length > 0'>\r\n            <ng-container *ngFor='let bookingId of design.bookingIds;let bookingIdIndex = index;'>\r\n               <tr>\r\n                  <td>{{bookingId.entityType}}</td>\r\n                  <td><input type=\"text\" class=\"form-control input-sm\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"bookingId.format\"></td>\r\n                  <td><input type=\"number\" style=\"width: 125px;\" class=\"form-control input-sm\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"bookingId.sequenceStart\"></td>\r\n                  <td><input type=\"number\" style=\"width: 125px;\" class=\"form-control input-sm\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"bookingId.sequenceEnd\"></td>\r\n                  <td style=\"vertical-align: middle;\" class=\"text-center\">\r\n                     <a (click)=\"clearBookingId(bookingIdIndex)\" style=\"cursor:pointer\"><i class=\"fas fa-eraser\" style=\"font-size: 15px; color: Red;\" title=\"Clear\"></i></a>\r\n                  </td>\r\n               </tr>\r\n            </ng-container>\r\n         </ng-container>\r\n         <tr *ngIf='design.bookingIds == null || design.bookingIds.length == 0'>\r\n            <td colspan=\"5\" style=\"text-align: center;\">\r\n               There are no phases defined.\r\n            </td>\r\n         </tr>\r\n      </tbody>\r\n   </table>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-cable.html": 
        /*!*****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-cable.html ***!
          \*****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-sm-6\">\r\n   <div class=\"form-group\">\r\n      <label class=\"control-label\" for=\"cableType\">Cable Type<span style=\"color:red;\">*</span></label>\r\n      <mat-select name=\"cableType\" [(ngModel)]=\"cableSettings.cableType\" (ngModelChange)=\"onCableTypeChange($event)\">\r\n         <mat-option>Select Type</mat-option>\r\n         <mat-option value=\"overhead\">Overhead</mat-option>\r\n         <mat-option value=\"underground\">Underground</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"form-group col-sm-6\">\r\n   <label for=\"cable\" class=\"control-label\">Core Configuration</label>\r\n   <div class=\"input-group input-group-sm\">\r\n      <mat-select name=\"cable\" [(ngModel)]=\"selectedCable\">\r\n         <mat-option>Select Cable</mat-option>\r\n         <mat-option *ngFor=\"let cable of cablesMaster\" [value]=\"cable\">\r\n            {{cable.name}}\r\n         </mat-option>\r\n      </mat-select>\r\n      <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addCable()\"><i class=\"fas fa-plus\"></i></button></span>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"form-group col-sm-12\">\r\n   <table class=\"table table-bordered table-striped\">\r\n      <thead>\r\n         <tr>\r\n            <th>Name</th>\r\n            <th style=\"width:40px\"></th>\r\n         </tr>\r\n      </thead>\r\n      <tbody>\r\n         <ng-container *ngIf='cableSettings.cables && cableSettings.cables.length > 0'>\r\n            <tr *ngFor='let cable of cableSettings.cables;let rowIndex = index;'>\r\n               <td>{{cable.name}}</td>\r\n               <td>\r\n                  <a>\r\n                     <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"removeCable(rowIndex)\" title=\"Remove\"></i>\r\n                  </a>\r\n               </td>\r\n            </tr>\r\n         </ng-container>\r\n         <tr *ngIf='cableSettings.cables == null || cableSettings.cables.length == 0'>\r\n            <td colspan=\"2\" style=\"text-align: center;\">\r\n               {{statusMessage}}\r\n            </td>\r\n         </tr>\r\n      </tbody>\r\n   </table>\r\n</div>\r\n\r\n<div class=\"form-group col-sm-6\" *ngIf=\"cableSettings.cableType == 'overhead'\">\r\n   <label for=\"pole\" class=\"control-label\">Pole Type</label>\r\n   <mat-select name=\"pole\" [(ngModel)]=\"cableSettings.pole.id\" (ngModelChange)=\"onPoleChange($event)\">\r\n      <mat-option>Select Pole</mat-option>\r\n      <mat-option *ngFor=\"let pole of polesMaster\" [value]=\"pole.id\">\r\n         {{pole.name}}\r\n      </mat-option>\r\n   </mat-select>\r\n</div>\r\n\r\n<div class=\"form-group col-sm-6\" *ngIf=\"cableSettings.cableType == 'underground'\">\r\n   <label for=\"chamber\" class=\"control-label\">Chamber Type</label>\r\n   <mat-select name=\"chamber\" [(ngModel)]=\"cableSettings.chamber.id\"  (ngModelChange)=\"onChamberChange($event)\">\r\n      <mat-option>Select Chamber</mat-option>\r\n      <mat-option *ngFor=\"let chamber of chambersMaster\" [value]=\"chamber.id\">\r\n         {{chamber.name}}\r\n      </mat-option>\r\n   </mat-select>\r\n</div>\r\n\r\n<div class=\"col-sm-6\">\r\n   <div class=\"form-group\">\r\n      <label class=\"control-label\" for=\"interval\" *ngIf=\"cableSettings.cableType == 'underground'\">Chamber Interval</label>\r\n      <label class=\"control-label\" for=\"interval\" *ngIf=\"cableSettings.cableType != 'underground'\">Pole Interval</label>\r\n      <input class=\"form-control input-sm\" name=\"interval\" type=\"number\" [(ngModel)]=\"cableSettings.chamberInterval\">\r\n   </div>\r\n</div>\r\n<!--<div class=\"col-sm-6\">\r\n   <div class=\"form-group\">\r\n      <label class=\"control-label\" for=\"\"></label>\r\n   </div>\r\n</div>-->\r\n\r\n<!--<div>\r\n   <div class=\"row\" style=\"padding: 5px;font-size: smaller;\">\r\n      <span style=\"font-size: 12px;color: #3c8dbc;font-weight: 700;\">Loop Management</span>\r\n      <hr style=\"margin-top: 2px;\">\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"cableLoop\" class=\"control-label\">Cable loop (Meters)</label>\r\n         <input class=\"form-control\" name=\"cableLoop\" [(ngModel)]=\"cableSettings.cableLoop\" type=\"number\">\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"forEvery\" class=\"control-label\">For Every (Meters)</label>\r\n         <input class=\"form-control\" name=\"forEvery\" [(ngModel)]=\"cableSettings.loopInterval\" type=\"number\">\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"loopAtClosure\" class=\"control-label\">Loop at Closure (Meters)</label>\r\n         <input class=\"form-control\" name=\"loopAtClosure\" [(ngModel)]=\"cableSettings.loopAtClosure\" type=\"number\">\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"loopAtClosure\" class=\"control-label\">Connect %</label>\r\n         <input class=\"form-control\" name=\"loopAtClosure\" [(ngModel)]=\"cableSettings.connectionPercent\" type=\"number\">\r\n      </div>\r\n   </div>\r\n</div>-->\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-civilworks.html": 
        /*!**********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-civilworks.html ***!
          \**********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"form-group col-md-12\">\r\n   <label for=\"equipment\" class=\"control-label\">Select Civilwork</label>\r\n   <div class=\"input-group input-group-sm\">\r\n      <mat-select name=\"civilwork\" [(ngModel)]=\"selectedCivilwork\">\r\n         <mat-option>Select Civilwork</mat-option>\r\n         <ng-container *ngIf=\"civilworksMaster && civilworksMaster.length > 0\">\r\n            <mat-option *ngFor=\"let civilwork of civilworksMaster\" [value]=\"civilwork\">\r\n               {{civilwork.name}}\r\n            </mat-option>\r\n         </ng-container>\r\n      </mat-select>\r\n      <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addCivilwork()\"><i class=\"fas fa-plus\"></i></button></span>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"form-group col-md-12\">\r\n   <table class=\"table table-bordered table-striped\">\r\n      <thead>\r\n         <tr>\r\n            <th>Name</th>\r\n            <th style=\"width:40px\"></th>\r\n         </tr>\r\n      </thead>\r\n      <tbody>\r\n         <ng-container *ngIf='civilworkSettings.civilworks && civilworkSettings.civilworks.length > 0'>\r\n            <tr *ngFor='let civilwork of civilworkSettings.civilworks;let rowIndex = index;'>\r\n               <td>{{civilwork.name}}</td>\r\n               <td>\r\n                  <a>\r\n                     <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"removeCivilwork(rowIndex)\" title=\"Remove\"></i>\r\n                  </a>\r\n               </td>\r\n            </tr>\r\n         </ng-container>\r\n         <tr *ngIf='civilworkSettings.civilworks == null || civilworkSettings.civilworks.length == 0'>\r\n            <td colspan=\"2\" style=\"text-align: center;\">\r\n               {{statusMessage}}\r\n            </td>\r\n         </tr>\r\n      </tbody>\r\n   </table>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-clusters.html": 
        /*!********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-clusters.html ***!
          \********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-md-12\">\r\n   <div class=\"input-group input-group-sm\" style=\"padding-bottom:20px\">\r\n      <div class=\"input-group-btn\">\r\n         <button type=\"button\" class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\" style=\"width:100px\">\r\n            {{selectedField.label}}\r\n            <span class=\"fa fa-caret-down\"></span>\r\n         </button>\r\n         <ul class=\"dropdown-menu\">\r\n            <ng-container *ngIf='searchFields && searchFields.length > 0'>\r\n               <li *ngFor='let searchField of searchFields'>\r\n                  <a [routerLink]=\"\" (click)=setSearchField(searchField)>{{searchField.label}}</a>\r\n               </li>\r\n            </ng-container>\r\n         </ul>\r\n      </div>\r\n      <input [type]=selectedField.dataType class=\"form-control\" name=\"dateSearch\" [(ngModel)]=\"searchText\" autocomplete=\"off\">\r\n      <span class=\"input-group-btn\">\r\n         <button type=\"button\" class=\"btn btn-info btn-flat\" (click)=\"currentPage = 1; search()\"><i class=\"fas fa-search\"></i></button>\r\n      </span>\r\n   </div>\r\n   <div>\r\n      <div class=\"pull-left\">\r\n         <span style=\"padding-right: 10px;font-size: small;\">Pages</span>\r\n         <div class=\"btn-group\" style=\"padding-right: 10px;\">\r\n            <button type=\"button\" class=\"btn btn-default dropdown-toggle btn-sm\" data-toggle=\"dropdown\" aria-expanded=\"false\">\r\n               <span style=\"padding-right: 5px;\"> {{pageSize}} </span>\r\n               <span class=\"caret\"></span>\r\n            </button>\r\n            <ul class=\"dropdown-menu\">\r\n               <li><a [routerLink]=\"\" (click)=\"pageSize = 10; getFormData()\">10</a></li>\r\n               <li><a [routerLink]=\"\" (click)=\"pageSize = 20; getFormData()\">20</a></li>\r\n               <li><a [routerLink]=\"\" (click)=\"pageSize = 50; getFormData()\">50</a></li>\r\n               <li><a [routerLink]=\"\" (click)=\"pageSize = 100; getFormData()\">100</a></li>\r\n            </ul>\r\n         </div>\r\n      </div>\r\n      <div class=\"pull-right\">\r\n         <span style=\"padding-right: 10px;font-size: small;\">Showing page {{currentPage}} of {{totalPages}}</span>\r\n         <div class=\"btn-group\" style=\"padding-bottom:5px\">\r\n            <button class=\"btn btn-default btn-sm\" type=\"button\" (click)=\"setPage(currentPage - 1)\" [ngClass]=\"{disabled:currentPage === 1}\"><i class=\"fa fa-chevron-left fa-fw\"></i></button>\r\n            <button class=\"btn btn-default btn-sm\" type=\"button\" (click)=\"setPage(currentPage + 1)\" [ngClass]=\"{disabled:currentPage === totalPages}\"><i class=\"fa fa-chevron-right fa-fw\"></i></button>\r\n         </div>\r\n      </div>\r\n   </div>\r\n   <table class=\"table table-bordered table-striped\">\r\n      <thead>\r\n         <tr (click)=\"onColumnClick($event.target)\">\r\n            <th style=\"width: 45px;\"></th>\r\n            <th data-column=\"Name\" class=\"table-sorter\">Name</th>\r\n            <th data-column=\"UpdatedBy\" class=\"table-sorter\" style=\"width: 150px;\">Updated By</th>\r\n            <th data-column=\"UpdatedDate\" class=\"table-sorter\" style=\"width: 125px;\">Updated On</th>\r\n         </tr>\r\n      </thead>\r\n      <tbody>\r\n         <ng-container *ngIf='clusters && clusters.length > 0'>\r\n            <ng-container *ngFor='let cluster of clusters; let clusterIndex = index;'>\r\n               <tr>\r\n                  <td style=\"vertical-align: middle;\">\r\n                     <mat-radio-group [(ngModel)]=\"design.clusterId\">\r\n                        <mat-radio-button [value]=\"cluster.id\"></mat-radio-button>\r\n                     </mat-radio-group>\r\n                  </td>\r\n                  <td>{{cluster.name}}</td>\r\n                  <td>{{cluster.updatedBy}}</td>\r\n                  <td>{{cluster.updatedDate | date:'dd/MM/yyyy'}}</td>\r\n               </tr>\r\n            </ng-container>\r\n         </ng-container>\r\n         <tr *ngIf='clusters == null || clusters.length == 0'>\r\n            <td colspan=\"4\" style=\"text-align: center;\">\r\n               {{statusMessage}}\r\n            </td>\r\n         </tr>\r\n      </tbody>\r\n   </table>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-costing.html": 
        /*!*******************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-costing.html ***!
          \*******************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-md-12\">\r\n   <div class=\"form-group\">\r\n      <label for=\"category\" class=\"control-label\">Entity </label>\r\n      <mat-select name=\"entityType\" [(ngModel)]=\"entityType\">\r\n         <mat-option>Select Entity Type</mat-option>\r\n         <mat-option value=\"All\">All Entities</mat-option>\r\n         <mat-option value=\"Cable\">Cables</mat-option>\r\n         <mat-option value=\"Chamber\">Chambers</mat-option>\r\n         <mat-option value=\"Duct\">Ducts</mat-option>\r\n         <mat-option value=\"ODF\">ODFs</mat-option>\r\n         <mat-option value=\"Pole\">Poles</mat-option>\r\n         <mat-option value=\"SpliceClosure\">Splice Closures</mat-option>\r\n         <mat-option value=\"Splitter\">Splitters</mat-option>\r\n         <mat-option value=\"Accessory\">Accessories</mat-option>\r\n         <mat-option value=\"Civilwork\">Civilworks</mat-option>\r\n      </mat-select>\r\n   </div>\r\n   <div class=\"form-group\">\r\n      <table class=\"table table-bordered table-striped\">\r\n         <thead>\r\n            <tr>\r\n               <th style=\"width: 30px;\"></th>\r\n               <th>Supplier</th>\r\n               <th style=\"width:150px;\">Material Cost</th>\r\n               <th style=\"width:150px\">Service Cost</th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Cable') && cables && cables.length > 0\">\r\n               <ng-container *ngFor='let cable of cables; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{cable.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of cable.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"cable.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Chamber') && chambers && chambers.length > 0\">\r\n               <ng-container *ngFor='let chamber of chambers; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{chamber.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of chamber.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"chamber.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Duct') && ducts && ducts.length > 0\">\r\n               <ng-container *ngFor='let duct of ducts; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{duct.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of duct.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"duct.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'ODF') && odfs && odfs.length > 0\">\r\n               <ng-container *ngFor='let odf of odfs; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{odf.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of odf.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"odf.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Pole') && poles && poles.length > 0\">\r\n               <ng-container *ngFor='let pole of poles; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{pole.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of pole.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"pole.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Splitter') && splitters && splitters.length > 0\">\r\n               <ng-container *ngFor='let splitter of splitters; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{splitter.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of splitter.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"splitter.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'SpliceClosure') && spliceClosures && spliceClosures.length > 0\">\r\n               <ng-container *ngFor='let spliceClosure of spliceClosures; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{spliceClosure.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of spliceClosure.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"spliceClosure.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Accessory') && accessories && accessories.length > 0\">\r\n               <ng-container *ngFor='let accessory of accessories; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{accessory.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of accessory.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"accessory.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n\r\n            <ng-container *ngIf=\"(entityType == 'All' || entityType == 'Civilwork') && civilworks && civilworks.length > 0\">\r\n               <ng-container *ngFor='let civilwork of civilworks; let rowIndex = index;'>\r\n                  <tr>\r\n                     <td colspan=\"4\" style=\"background-color: #f4f4f4\">{{civilwork.name}}</td>\r\n                  </tr>\r\n                  <ng-container *ngFor='let supplier of civilwork.suppliers; let sIndex = index;'>\r\n                     <tr *ngIf=\"checkPriceValidity(supplier.validFrom, supplier.validTo)\">\r\n                        <td style=\"text-align: center; vertical-align: middle;\">\r\n                           <mat-radio-group [name]=\"civilwork.name\" [(ngModel)]=\"supplier.isPrefered\">\r\n                              <mat-radio-button [value]=true></mat-radio-button>\r\n                           </mat-radio-group>\r\n                        </td>\r\n                        <td style=\"vertical-align: middle;\">{{supplier.name}}</td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.price\"></td>\r\n                        <td><input type=\"number\" class=\"form-control input-sm\" autocomplete=\"off\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"supplier.serviceCost\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n               </ng-container>\r\n            </ng-container>\r\n         </tbody>\r\n      </table>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-documents.html": 
        /*!*********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-documents.html ***!
          \*********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-md-12\">\r\n   <div class=\"form-group\">\r\n      <label for=\"category\" class=\"control-label\">Category </label>\r\n      <input type=\"text\" class=\"form-control\" name=\"category\" [(ngModel)]=\"documentCategory\">\r\n   </div>\r\n   <div class=\"form-group\">\r\n      <label for=\"uploadFile\">Upload file</label>\r\n      <div class=\"input-group\">\r\n         <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n         <span class=\"input-group-btn\">\r\n            <span class=\"btn btn-primary btn-file\">\r\n               Browse&hellip; <input type=\"file\" multiple #fileInput (click)=\"fileInput.value = null\" value=\"\" (change)=\"fileChangeEvent($event)\">\r\n            </span>\r\n         </span>\r\n      </div>\r\n   </div>\r\n   <div class=\"form-group\">\r\n      <table class=\"table table-bordered table-striped\">\r\n         <thead>\r\n            <tr>\r\n               <th>Category</th>\r\n               <th>File Name</th>\r\n               <th style=\"width:120px\">File Size</th>\r\n               <th style=\"width:70px\" class='text-center'></th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            <ng-container *ngIf='design.documents && design.documents.length > 0'>\r\n               <tr *ngFor='let document of design.documents;let rowIndex = index;'>\r\n                  <td>{{document.category}}</td>\r\n                  <td>{{document.fileName}}</td>\r\n                  <td style=\"text-align: right;\">{{helper.formatBytes(document.fileSize, 2)}}</td>\r\n                  <td>\r\n                     <a href=\"Designs/GetDocument?designId={{design.id}}&documentId={{document.id}}\" download *ngIf=\"document.id != null\">\r\n                        <i class='fa fa-download' style='font-size: 15px; cursor:pointer' title='Download File'></i>\r\n                     </a>&nbsp;\r\n                     <a (click)=\"removeDocument(rowIndex, document)\" style=\"cursor:pointer\">\r\n                        <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red;\" title=\"Delete\"></i>\r\n                     </a>\r\n                  </td>\r\n               </tr>\r\n            </ng-container>\r\n            <tr *ngIf='design.documents == null || design.documents.length == 0'>\r\n               <td colspan=\"4\" style=\"text-align: center;\">\r\n                  There are no documents attached to design.\r\n               </td>\r\n            </tr>\r\n         </tbody>\r\n      </table>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-duct.html": 
        /*!****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-duct.html ***!
          \****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"form-group col-md-12\">\r\n   <div class=\"form-group\">\r\n      <label for=\"equipment\" class=\"control-label\">Select Duct</label>\r\n      <div class=\"input-group input-group-sm\">\r\n         <mat-select name=\"duct\" [(ngModel)]=\"selectedDuct\">\r\n            <mat-option>Select Duct</mat-option>\r\n            <ng-container *ngIf=\"ductsMaster && ductsMaster.length > 0\">\r\n               <mat-option *ngFor=\"let duct of ductsMaster\" [value]=\"duct\">\r\n                  {{duct.name}}\r\n               </mat-option>\r\n            </ng-container>\r\n         </mat-select>\r\n         <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addDuct()\"><i class=\"fas fa-plus\"></i></button></span>\r\n      </div>\r\n   </div>\r\n</div>\r\n<div class=\"form-group col-md-12\">\r\n   <table class=\"table table-bordered table-striped\">\r\n      <thead>\r\n         <tr>\r\n            <th>Name</th>\r\n            <th style=\"width:40px\"></th>\r\n         </tr>\r\n      </thead>\r\n      <tbody>\r\n         <ng-container *ngIf='ductSettings.ducts && ductSettings.ducts.length > 0'>\r\n            <tr *ngFor='let duct of ductSettings.ducts;let rowIndex = index;'>\r\n               <td>{{duct.name}}</td>\r\n               <td>\r\n                  <a>\r\n                     <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"removeDuct(rowIndex)\" title=\"Remove\"></i>\r\n                  </a>\r\n               </td>\r\n            </tr>\r\n         </ng-container>\r\n         <tr *ngIf='ductSettings.ducts == null || ductSettings.ducts.length == 0'>\r\n            <td colspan=\"2\" style=\"text-align: center;\">\r\n               {{statusMessage}}\r\n            </td>\r\n         </tr>\r\n      </tbody>\r\n   </table>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-entities.html": 
        /*!********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-entities.html ***!
          \********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-sm-6\">\r\n   <div class=\"form-group\">\r\n      <label for=\"entityName\" class=\"control-label\">Entity Name</label>\r\n      <mat-select name=\"entityType\" [(ngModel)]=\"entitySettings.entityName\" (ngModelChange)=\"onEntityTypeChange($event)\">\r\n         <mat-option>Select Entity Type</mat-option>\r\n         <mat-option value=\"Chamber\">Chamber</mat-option>\r\n         <mat-option value=\"ODF\">ODF</mat-option>\r\n         <mat-option value=\"Pole\">Pole</mat-option>\r\n         <mat-option value=\"SpliceClosure\">Splice Closure</mat-option>\r\n         <mat-option value=\"Splitter\">Splitter</mat-option>\r\n         <mat-option value=\"Homepass\">Homepass</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</div>\r\n<div class=\"col-sm-6\">\r\n   <div class=\"form-group\">\r\n      <label class=\"control-label\" for=\"nodeOptions\">Node Options <span style=\"color:red;\">*</span></label>\r\n      <mat-select name=\"nodeOptions\" [(ngModel)]=\"entitySettings.dataSource\" [disabled]=\"entitySettings.entityName=='Homepass'?'disabled': null\">\r\n         <mat-option>Select Option</mat-option>\r\n         <mat-option value=\"import\">Import</mat-option>\r\n         <mat-option value=\"existing\">Use from existing design</mat-option>\r\n         <mat-option value=\"automatic\">Place Automatically</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"form-group col-sm-12\" *ngIf=\"entitySettings.dataSource == 'import'\">\r\n   <label for=\"equipment\" class=\"control-label\">Select Entities File</label>\r\n   <div class=\"input-group\">\r\n      <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n      <span class=\"input-group-btn\">\r\n         <span class=\"btn btn-primary btn-file\">\r\n            Browse&hellip; <input type=\"file\" #fileInput (click)=\"fileInput.value = null\" value=\"\" (change)=\"fileChangeEvent($event)\">\r\n         </span>\r\n      </span>\r\n   </div>\r\n</div>\r\n\r\n<ng-container *ngIf=\"entitySettings.dataSource == 'existing'\">\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"design\" class=\"control-label\">Select Design</label>\r\n         <mat-select name=\"design\" [(ngModel)]=\"entitySettings.existingDesignId\" (ngModelChange)=\"onDesignChange($event)\">\r\n            <mat-option>Select Design</mat-option>\r\n            <mat-option *ngFor=\"let item of allDesigns\" [value]=\"item.id\">(ver {{item.version}}) {{item.name}}</mat-option>\r\n         </mat-select>\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"designEntities\" class=\"control-label\">Select {{entitySettings.entityName}}</label>\r\n         <mat-select name=\"designEntities\" (ngModelChange)=\"onDesignEntityChange($event)\">\r\n            <mat-option>Select {{entitySettings.entityName}}</mat-option>\r\n            <ng-container *ngIf=\"designEntities && designEntities.length > 0\">\r\n               <mat-option *ngFor=\"let designEntity of designEntities\" [value]=\"designEntity\">\r\n                  {{designEntity.name}}\r\n               </mat-option>\r\n            </ng-container>\r\n         </mat-select>\r\n      </div>\r\n   </div>\r\n</ng-container>\r\n\r\n<div class=\"form-group col-md-12\" *ngIf=\"entitySettings.dataSource == 'automatic' && entitySettings.entityName != 'Homepass'\">\r\n   <label for=\"masterEntities\" class=\"control-label\">Select {{entitySettings.entityName}}</label>\r\n   <div class=\"input-group input-group-sm\">\r\n      <mat-select name=\"masterEntities\" [(ngModel)]=\"selectedEntity\">\r\n         <mat-option>Select {{entitySettings.entityName}}</mat-option>\r\n         <ng-container *ngIf=\"masterEntities && masterEntities.length > 0\">\r\n            <mat-option *ngFor=\"let selectedEntity of masterEntities\" [value]=\"selectedEntity\">\r\n               {{selectedEntity.name}}\r\n            </mat-option>\r\n         </ng-container>\r\n      </mat-select>\r\n      <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addEntity()\"><i class=\"fas fa-plus\"></i></button></span>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"col-sm-12\" *ngIf=\"entitySettings.entityName != 'Homepass'\">\r\n   <div class=\"form-group\">\r\n      <div style=\"overflow-y:auto; max-height:250px\">\r\n         <table class=\"table table-bordered table-striped\">\r\n            <thead>\r\n               <tr>\r\n                  <th>Name</th>\r\n                  <th style=\"width:40px\"></th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='entities && entities.length > 0'>\r\n                  <tr *ngFor='let entity of entities;let rowIndex = index;'>\r\n                     <td>{{entity.name}}</td>\r\n                     <td>\r\n                        <a>\r\n                           <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"removeEntity(rowIndex)\" title=\"Remove\"></i>\r\n                        </a>\r\n                     </td>\r\n                  </tr>\r\n               </ng-container>\r\n               <tr *ngIf='entities == null || entities.length == 0'>\r\n                  <td colspan=\"2\" style=\"text-align: center;\">\r\n                     Entities not added.\r\n                  </td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n      </div>\r\n\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-fdp.html": 
        /*!***************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-fdp.html ***!
          \***************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <label class=\"control-label\" for=\"nodeOptions\">Node Options <span style=\"color:red;\">*</span></label>\r\n      <mat-select name=\"nodeOptions\" [(ngModel)]=\"fdpSettings.dataSource\">\r\n         <mat-option>Select Option</mat-option>\r\n         <mat-option value=\"import\">Import</mat-option>\r\n         <mat-option value=\"existing\">Use from existing design</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"form-group col-sm-12\" *ngIf=\"fdpSettings.dataSource == 'import'\">\r\n   <label for=\"equipment\" class=\"control-label\">Select FDP File</label>\r\n   <div class=\"input-group\">\r\n      <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n      <span class=\"input-group-btn\">\r\n         <span class=\"btn btn-primary btn-file\">\r\n            Browse&hellip; <input type=\"file\" #fileInput (click)=\"fileInput.value = null\" value=\"\" (change)=\"fileChangeEvent($event)\">\r\n         </span>\r\n      </span>\r\n   </div>\r\n</div>\r\n\r\n<ng-container *ngIf=\"fdpSettings.dataSource == 'existing'\">\r\n   <div class=\"form-group col-md-12\">\r\n      <label for=\"design\" class=\"control-label\">Select Design</label>\r\n      <mat-select name=\"design\" [(ngModel)]=\"fdpSettings.existingDesignId\" (ngModelChange)=\"onDesignChange($event)\">\r\n         <mat-option>Select Design</mat-option>\r\n         <mat-option *ngFor=\"let item of allDesigns\" [value]=\"item.id\">(ver {{item.version}}) {{item.name}}</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</ng-container>\r\n\r\n<div class=\"form-group col-md-12\">\r\n   <label for=\"designFDPs\" class=\"control-label\">Select FDPs</label>\r\n   <div class=\"input-group input-group-sm\">\r\n      <mat-select name=\"designFDPs\" [(ngModel)]=\"selectedFDP\">\r\n         <mat-option>Select FDP</mat-option>\r\n         <ng-container *ngIf=\"fdpSettings.fdps && fdpSettings.fdps.length > 0\">\r\n            <mat-option *ngFor=\"let selectedFDP of fdpSettings.fdps\" [value]=\"selectedFDP\">\r\n               {{selectedFDP.name}}\r\n            </mat-option>\r\n         </ng-container>\r\n      </mat-select>\r\n      <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"add()\"><i class=\"fas fa-plus\"></i></button></span>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <label class=\"control-label\">Pre Aggregates</label>\r\n      <div style=\"overflow:auto; max-height:250px;\">\r\n         <table class=\"table table-bordered table-striped\">\r\n            <thead>\r\n               <tr>\r\n                  <th>Name</th>\r\n                  <th style=\"width:40px\"></th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <ng-container *ngIf='fdpSettings.fdps && fdpSettings.fdps.length > 0'>\r\n                  <tr *ngFor='let fdp of fdpSettings.fdps;let rowIndex = index;'>\r\n                     <td>{{fdp.name}}</td>\r\n                     <td>\r\n                        <a>\r\n                           <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"remove(rowIndex)\" title=\"Remove\"></i>\r\n                        </a>\r\n                     </td>\r\n                  </tr>\r\n               </ng-container>\r\n               <tr *ngIf='fdpSettings.fdps == null || fdpSettings.fdps.length == 0'>\r\n                  <td colspan=\"2\" style=\"text-align: center;\">\r\n                     FDPs not added.\r\n                  </td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n      </div>\r\n\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-info.html": 
        /*!****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-info.html ***!
          \****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div>\r\n   <div class=\"col-sm-12\">\r\n      <div class=\"pull-right\">\r\n         <div class=\"form-group\">\r\n            <label for=\"version\" class=\"control-label\" style=\"float:left; padding: 5px 5px;\">Ver.</label>\r\n            <mat-select name=\"version\" [(ngModel)]=\"selectedVersion\" (ngModelChange)=\"versionChange($event)\" style=\"width:75px\">\r\n               <mat-option>Version</mat-option>\r\n               <mat-option *ngFor=\"let design of designs\" [value]=\"design.version\">\r\n                  {{design.version}}\r\n               </mat-option>\r\n            </mat-select>\r\n         </div>\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n         <input type=\"text\" class=\"form-control\" name=\"name\" required [(ngModel)]=\"design.name\">\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"code\" class=\"control-label\">Code </label>\r\n         <input type=\"text\" class=\"form-control\" name=\"code\" [(ngModel)]=\"design.code\">\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"designType\" class=\"control-label\">Design Type</label>\r\n         <mat-select name=\"designType\" [(ngModel)]=\"design.designType\" (ngModelChange)=\"clearNetworkSettings()\">\r\n            <mat-option>Select Design Type</mat-option>\r\n            <mat-option value='FTTx'>FTTx</mat-option>\r\n           <!-- <mat-option value='Backbone'>Backbone</mat-option>-->\r\n         </mat-select>\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-6\">\r\n      <div class=\"form-group\">\r\n         <label for=\"assignedTo\" class=\"control-label\">Assigned To</label>\r\n         <mat-select name=\"assignedTo\" [(ngModel)]=\"design.assignedTo\">\r\n            <mat-option>Select user</mat-option>\r\n            <mat-option *ngFor=\"let user of users\" [value]=\"user.id\">\r\n               {{user.firstName}} {{user.lastName}}\r\n            </mat-option>\r\n         </mat-select>\r\n      </div>\r\n   </div>\r\n   <div class=\"col-sm-12\">\r\n      <div class=\"form-group\">\r\n         <label for=\"description\" class=\"control-label\">Description </label>\r\n         <textarea class=\"form-control\" rows=\"2\" name=\"description\" [(ngModel)]=\"design.description\"></textarea>\r\n      </div>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-map.html": 
        /*!***************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-map.html ***!
          \***************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div class=\"box-tools\" style=\"background-color: #ddd;padding: 5px;\">\r\n   <button data-toggle=\"collapse\" data-target=\"#layers\" class=\"btn btn-social-icon btn-xs\" style=\"color:#605ca8\" type=\"submit\">\r\n      <i class=\"fas fa-layer-group\"></i>\r\n   </button>\r\n   <span *ngIf=\"selectedLayers.length >0\" style=\"color: #605ca8;padding-top: 3px;\"><b>+</b></span>\r\n   <div class=\"pull-right\">\r\n      <i class=\"fas fa-sync-alt\" style=\"font-size: 15px; color: #605ca8; cursor: pointer; padding: 5px;\" (click)=\"refreshBlueprint()\"></i>\r\n   </div>\r\n   <ul class=\"nav navbar-nav toolbar-Controls pull-right\">\r\n      <li>\r\n         <a href=\"#\" class=\"dropdown-toggle btn btn-social-icon btn-xs pull-right\" data-toggle=\"dropdown\" title=\"Network Element Library\">\r\n            <span style=\"color: #605ca8;padding-top: 3px;\"><b>+</b></span>\r\n         </a>\r\n\r\n         <div id=\"newNetwork\" class=\"dropdown-menu\" style=\"\">\r\n            <ul class=\"nav navbar-nav toolbar-Controls pull-right entityMenu\" style=\"padding: 5px;width: 333px;\">\r\n               <li>\r\n                  <a title=\"Chamber\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\chamber.png\" name=\"Chamber\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"Pole\" style=\"padding-top: 8px;border: 1px solid #ddd; padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\pole.png\" name=\"Pole\" class=\"iconImageStyle\" style=\"cursor: move; height: 20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"Pop\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\pop.png\" name=\"Pop\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"Underground cable\" style=\"padding-top: 8px;border: 1px solid #ddd; padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\Cable.png\" name=\"UndergroundCable\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"Overhead cable\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\OverheadCable.png\" name=\"Overhead Cable\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"Duct\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\duct.png\" name=\"Duct\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"Micro Duct\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\microduc.png\" name=\"Micro Duct\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"FAT\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\FAT.png\" name=\"FAT\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n               <li>\r\n                  <a title=\"FDT\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\"><img src=\"\\images\\map-entities\\FDT.png\" name=\"FDT\" class=\"iconImageStyle\" style=\"cursor:move;height:20px\" /></a>\r\n               </li>\r\n            </ul>\r\n         </div>\r\n      </li>\r\n      <li>\r\n         <a title=\"\" style=\"height: 0px;\"><img src=\"images/file-ext/kml.svg\" (click)=\"ExportTOPdf()\" style=\"width: 16px;margin-top: -15px;margin-left: 0px;\"></a>\r\n      </li>\r\n   </ul>\r\n</div>\r\n<div id=\"layers\" class=\"layers collapse\">\r\n   <div style=\"height: 84.5vh;\">\r\n      <div class=\"box-header with-border\">\r\n         <h3 class=\"box-title\">Layers</h3>\r\n         <div class=\"pull-right\">\r\n            <i class=\"fas fa-sync-alt\" style=\"font-size: 15px; color: #605ca8; cursor: pointer;\" (click)=\"refreshLayers()\"></i>\r\n         </div>\r\n      </div>\r\n      <div class=\"box-body\">\r\n         <table class=\"table table-bordered table-striped\">\r\n            <thead>\r\n               <tr>\r\n                  <th style=\"width:40px;text-align: center;\">\r\n                     <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                                   [checked]=\"selectedLayers?.length > 0 && isAllSelected()\"\r\n                                   [indeterminate]=\"selectedLayers?.length > 0 && !isAllSelected()\">\r\n                     </mat-checkbox>\r\n                  </th>\r\n                  <th>All</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <tr *ngFor='let layer of layers'>\r\n                  <td style=\"text-align: center;\">\r\n                     <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                                   (change)=\"$event ? toggleSelection(layer) : null\"\r\n                                   [checked]=\"selectedLayers?.includes(layer.id)\">\r\n                     </mat-checkbox>\r\n                  </td>\r\n                  <td>{{layer.id}}</td>\r\n               </tr>\r\n            </tbody>\r\n         </table>\r\n      </div>\r\n   </div>\r\n\r\n</div>\r\n\r\n<div>\r\n   <div id=\"designMap\" style=\"height: 85vh;\"></div>\r\n   <div *ngIf=\"selectedEntity\" class=\"box pull-right properties\" style=\"border-radius: 0px;height: 85vh;overflow-y: auto; top:89px\">\r\n      <div class=\"box-header with-border\">\r\n         <h3 class=\"box-title\">Properties</h3>\r\n         <div class=\"box-tools pull-right\">\r\n            <p>\r\n               <span *ngIf=\"selectedEntity?.entityType == 'Chamber'\">\r\n                  <button title=\"Splitter\" style=\"padding-top: 8px;border: 1px solid #ddd; padding: 3px;height: auto;\" type=\"submit\" (click)=\"PlotEntity('Splitter')\">\r\n                     <img src=\"\\images\\map-entities\\splitter.png\" name=\"Splitter\" class=\"iconImageStyle\" style=\"height: 20px\" />\r\n                  </button>\r\n                  <button title=\"Splice Closure\" style=\"padding-top: 8px;border: 1px solid #ddd; padding: 3px; height: auto;\" type=\"submit\" (click)=\"PlotEntity('Splice Closure')\">\r\n                     <img src=\"\\images\\map-entities\\spliceclosure.png\" name=\"SpliceClosure\" class=\"iconImageStyle\" style=\"height: 20px\" />\r\n                  </button>\r\n               </span>\r\n               <span *ngIf=\"selectedEntity?.entityType == 'PoP'\">\r\n                  <a title=\"Odf\" style=\"padding-top: 8px;border: 1px solid #ddd;padding: 3px; height: auto;\" (click)=\"PlotEntity('odf')\"><img src=\"\\images\\map-entities\\odf.png\" name=\"Odf\" class=\"iconImageStyle\" style=\"height:20px\" /></a>\r\n               </span>\r\n               <button class=\"btn btn-social-icon btn-xs btn-default\" (click)=\"selectedEntity = null\">\r\n                  <i class=\"fas fa-times\"></i>\r\n               </button>\r\n               <button class=\"btn btn-social-icon btn-xs btn-default\" style=\"margin-left: 5px;\" type=\"submit\" data-toggle=\"modal\" data-target=\"#deleteEntity\">\r\n                  <i class=\"fas fa-trash-alt\" style=\"color: Red;\"></i>\r\n               </button>\r\n            </p>\r\n                 \r\n         </div>\r\n      </div>\r\n      <div class=\"box-body\">\r\n\r\n         <div *ngIf=\"selectedEntity?.entityType == 'Cable'\">\r\n            <div class=\"panel-group\" id=\"cableAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#cbl_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"cbl_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <textarea type=\"text\" rows=\"3\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates}}\"></textarea>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#cbl_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"cbl_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#cblInfo\">Cable Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"cblInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"aLocation\" class=\"control-label\">A Location</label>\r\n                           <input type=\"text\" name=\"aLocation\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.aLocation\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"bLocation\" class=\"control-label\">B Location</label>\r\n                           <input type=\"text\" name=\"bLocation\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.aLocation\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"measuredLength\" class=\"control-label\">Measured Length</label>\r\n                           <input type=\"text\" name=\"measuredLength\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.measuredLength\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"calculatedLength\" class=\"control-label\">Calculated Length</label>\r\n                           <input type=\"text\" name=\"calculatedLength\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.calculatedLength\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"noOfTubes\" class=\"control-label\">No Of Tubes</label>\r\n                           <input type=\"text\" name=\"noOfTubes\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.noOfTubes\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"corePerTube\" class=\"control-label\">Core Per Tube</label>\r\n                           <input type=\"text\" name=\"corePerTube\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.corePerTube\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n\r\n         <div *ngIf=\"selectedEntity?.entityType == 'Chamber'\">\r\n            <div class=\"panel-group\" id=\"chamberAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#chamberAccordion\" href=\"#cbr_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"cbr_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#chamberAccordion\" href=\"#cbr_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"cbr_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#chamberAccordion\" href=\"#chamberInfo\">Chamber Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"chamberInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"category\" class=\"control-label\">Category</label>\r\n                           <input type=\"text\" name=\"category\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberCategory\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"closureType\" class=\"control-label\">Closure Type</label>\r\n                           <input type=\"text\" name=\"closureType\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberClosureType\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"spliceTrayCount\" class=\"control-label\">Splice Tray Count</label>\r\n                           <input type=\"text\" name=\"spliceTrayCount\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.spliceTrayCount\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"isBuried\" class=\"control-label\" style=\"width:100%\">&nbsp;</label>\r\n                           <mat-checkbox name=\"isBuried\" [(ngModel)]=\"selectedEntity.isBuried\" [checked]=\"selectedEntity.isBuried\">Is Buried</mat-checkbox>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#chamberAccordion\" href=\"#chamberLoopInfo\">Loop Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"chamberLoopInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"category\" class=\"control-label\">Loop Length</label>\r\n                           <input type=\"text\" name=\"category\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.loopLength\" />\r\n                        </div>\r\n\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'Pole'\">\r\n            <div class=\"panel-group\" id=\"poleAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#poleAccordion\" href=\"#pole_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"pole_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#poleAccordion\" href=\"#pole_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"pole_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#poleAccordion\" href=\"#poleInfo\">Pole Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"poleInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"height\" class=\"control-label\">Height</label>\r\n                           <input type=\"number\" name=\"height\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.poleHeight\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#chamberAccordion\" href=\"#poleLoopInfo\">Loop Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"poleLoopInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"category\" class=\"control-label\">Loop Length</label>\r\n                           <input type=\"text\" name=\"category\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.loopLength\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'Splitter'\">\r\n            <div class=\"panel-group\" id=\"splitterAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#splitterAccordion\" href=\"#spt_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"spt_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#splitterAccordion\" href=\"#spt_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"spt_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#splitterAccordion\" href=\"#sptInfo\">Splitter Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"sptInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"splitterRatio\" class=\"control-label\">Splitter Ratio</label>\r\n                           <input type=\"text\" name=\"splitterRatio\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.splitterRatio\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"lossValue\" class=\"control-label\">Loss Value</label>\r\n                           <input type=\"number\" name=\"lossValue\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.lossValue\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#splitterAccordion\" href=\"#sptInfo1\">Splitter Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"sptInfo1\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\" style=\"height:200px; overflow:scroll;\">\r\n                        <table class=\"table table-bordered table-striped\">\r\n                           <thead>\r\n                              <tr>\r\n                                 <th>A-End</th>\r\n                                 <th style=\"width: 202px;\">B-End</th>\r\n                              </tr>\r\n                           </thead>\r\n                           <tbody>\r\n                              <ng-container *ngIf='this.filterResult && this.filterResult.length > 0'>\r\n                                 <tr *ngFor='let type of this.filterResult; let rowIndex = index;'>\r\n                                    <td (mouseover)=\"onspliterHover(entityType)\" (mouseleave)=\"onLeave()\">{{entityType}}</td>\r\n                                    <td (mouseover)=\"onHover(this.filterResult[rowIndex].coordinates)\" (mouseleave)=\"onLeave()\">\r\n                                       <ul style=\"list-style-type: none;\"><li>{{type.levelName}}<span>{{rowIndex}}</span></li></ul>\r\n                                    </td>\r\n                                 </tr>\r\n\r\n                              </ng-container>\r\n                           </tbody>\r\n                        </table>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'Homepass'\">\r\n            <div class=\"panel-group\" id=\"homepassAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#homepassAccordion\" href=\"#hp_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"hp_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"name\" [(ngModel)]=\"selectedEntity.name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"code\" [(ngModel)]=\"selectedEntity.code\" readonly>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                        <div class=\"form-group\" *ngIf=\"selectedEntity.area\">\r\n                           <label for=\"area\" class=\"control-label\">Coordinates (Polygon) </label>\r\n                           <textarea type=\"text\" class=\"form-control input-sm\" name=\"area\" rows=\"5\" readonly value=\"{{stringify(selectedEntity.area.coordinates)}}\"></textarea>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"description\" [(ngModel)]=\"selectedEntity.type\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"description\" class=\"control-label\">Description </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"description\" [(ngModel)]=\"selectedEntity.description\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"connections\" class=\"control-label\">Connections </label>\r\n                           <input type=\"number\" class=\"form-control input-sm\" name=\"connections\" [(ngModel)]=\"selectedEntity.connections\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#splitterAccordion\" href=\"#spt_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"spt_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#splitterAccordion\" href=\"#sptInfo\">Splitter Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"sptInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"splitterRatio\" class=\"control-label\">Splitter Ratio</label>\r\n                           <input type=\"text\" name=\"splitterRatio\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.splitterRatio\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"lossValue\" class=\"control-label\">Loss Value</label>\r\n                           <input type=\"text\" name=\"lossValue\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.lossValue\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n\r\n         <div *ngIf=\"selectedEntity?.entityType == 'SpliceClosure'\">\r\n            <div class=\"panel-group\" id=\"spliceclosureAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#spliceclosureAccordion\" href=\"#spc_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"spc_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#spliceclosureAccordion\" href=\"#spc_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"spc_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#spliceclosureAccordion\" href=\"#spcInfo\">SpliceClosure Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"spcInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"splitterRatio\" class=\"control-label\">Port No</label>\r\n                           <input type=\"number\" name=\"splitterRatio\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.noOfPorts\" />\r\n                        </div>\r\n                        <!--<div class=\"form-group\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"col-sm-11\">\r\n                           <mat-slider name=\"zoomLevel\" thumbLabel step=\"1\" min=\"0\" max=\"21\" style=\"width:100%\" [(ngModel)]=\"selectedEntity.zoomLevel\"></mat-slider>\r\n                        </div>\r\n                        <div class=\"col-sm-1\" style=\"padding-top: 7px;\">\r\n                           <input type=\"number\" min=\"0\" max=\"21\" class=\"form-control input-sm\" name=\"zoom\" [(ngModel)]=\"selectedEntity.zoomLevel\">\r\n                        </div>\r\n                     </div>\r\n                  </div>-->\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType  == 'PoP'\">\r\n            <div class=\"panel-group\" id=\"PopAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#PopAccordion\" href=\"#pop_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"pop_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#spliceclosureAccordion\" href=\"#pop_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"pop_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Pop Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Pop Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Pop Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <!--<div class=\"panel panel-default\">\r\n            <div class=\"panel-heading\">\r\n               <h4 class=\"panel-title\">\r\n                  <a data-toggle=\"collapse\" data-parent=\"#spliceclosureAccordion\" href=\"#popInfo\">Pop Information</a>\r\n               </h4>\r\n            </div>\r\n            <div id=\"popInfo\" class=\"panel-collapse collapse\">\r\n               <div class=\"panel-body\">\r\n                  <div class=\"form-group\">\r\n                     <label for=\"splitterRatio\" class=\"control-label\">Port No</label>\r\n                     <input type=\"number\" name=\"splitterRatio\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.noOfPorts\" />\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n            </div>\r\n               </div>\r\n            </div>\r\n         </div>-->\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'Duct'\">\r\n            <div class=\"panel-group\" id=\"DuctAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#DuctAccordion\" href=\"#duct_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"DuctAccordion\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <textarea type=\"text\" rows=\"3\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates}}\"></textarea>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#duct_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"duct_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#ductInfo\">Duct Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"ductInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"aLocation\" class=\"control-label\">A Location</label>\r\n                           <input type=\"text\" name=\"aLocation\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.aLocation\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"bLocation\" class=\"control-label\">B Location</label>\r\n                           <input type=\"text\" name=\"bLocation\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.aLocation\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"measuredLength\" class=\"control-label\">Measured Length</label>\r\n                           <input type=\"text\" name=\"measuredLength\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.measuredLength\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"calculatedLength\" class=\"control-label\">Calculated Length</label>\r\n                           <input type=\"text\" name=\"calculatedLength\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.calculatedLength\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"noOfTubes\" class=\"control-label\">No Of Tubes</label>\r\n                           <input type=\"text\" name=\"noOfTubes\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.noOfTubes\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"corePerTube\" class=\"control-label\">Core Per Tube</label>\r\n                           <input type=\"text\" name=\"corePerTube\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.corePerTube\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'MicroDuct'\">\r\n            <div class=\"panel-group\" id=\"DuctAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#MicroDuctAccordion\" href=\"#microduct_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"MicroDuctAccordion\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <textarea type=\"text\" rows=\"3\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates}}\"></textarea>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#microduct_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"microduct_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#cableAccordion\" href=\"#microductInfo\">Micro Duct Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"microductInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"aLocation\" class=\"control-label\">A Location</label>\r\n                           <input type=\"text\" name=\"aLocation\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.aLocation\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"bLocation\" class=\"control-label\">B Location</label>\r\n                           <input type=\"text\" name=\"bLocation\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.aLocation\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"measuredLength\" class=\"control-label\">Measured Length</label>\r\n                           <input type=\"text\" name=\"measuredLength\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.measuredLength\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"calculatedLength\" class=\"control-label\">Calculated Length</label>\r\n                           <input type=\"text\" name=\"calculatedLength\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.calculatedLength\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"noOfTubes\" class=\"control-label\">No Of Tubes</label>\r\n                           <input type=\"text\" name=\"noOfTubes\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.noOfTubes\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"corePerTube\" class=\"control-label\">Core Per Tube</label>\r\n                           <input type=\"text\" name=\"corePerTube\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.corePerTube\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'ODF'\">\r\n            <div class=\"panel-group\" id=\"ODFAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#ODFAccordion\" href=\"#odf_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"odf_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#ODFAccordion\" href=\"#odf_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"odf_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#ODFAccordion\" href=\"#odfInfo\">ODF Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"odfInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"category\" class=\"control-label\">Category</label>\r\n                           <input type=\"text\" name=\"category\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberCategory\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"closureType\" class=\"control-label\">Closure Type</label>\r\n                           <input type=\"text\" name=\"closureType\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberClosureType\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"spliceTrayCount\" class=\"control-label\">Splice Tray Count</label>\r\n                           <input type=\"text\" name=\"spliceTrayCount\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.spliceTrayCount\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"isBuried\" class=\"control-label\" style=\"width:100%\">&nbsp;</label>\r\n                           <mat-checkbox name=\"isBuried\" [(ngModel)]=\"selectedEntity.isBuried\" [checked]=\"selectedEntity.isBuried\">Is Buried</mat-checkbox>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'FAT'\">\r\n            <div class=\"panel-group\" id=\"FATAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#FATAccordion\" href=\"#fat_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"fat_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#FATAccordion\" href=\"#fat_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"fat_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#FATAccordion\" href=\"#fatInfo\">FAT Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"fatInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"category\" class=\"control-label\">Category</label>\r\n                           <input type=\"text\" name=\"category\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberCategory\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"closureType\" class=\"control-label\">Closure Type</label>\r\n                           <input type=\"text\" name=\"closureType\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberClosureType\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"spliceTrayCount\" class=\"control-label\">Splice Tray Count</label>\r\n                           <input type=\"text\" name=\"spliceTrayCount\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.spliceTrayCount\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"isBuried\" class=\"control-label\" style=\"width:100%\">&nbsp;</label>\r\n                           <mat-checkbox name=\"isBuried\" [(ngModel)]=\"selectedEntity.isBuried\" [checked]=\"selectedEntity.isBuried\">Is Buried</mat-checkbox>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div *ngIf=\"selectedEntity?.entityType == 'FDT'\">\r\n            <div class=\"panel-group\" id=\"FDTAccordion\">\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#FDTAccordion\" href=\"#fdt_info\">General Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"fdt_info\" class=\"panel-collapse collapse in\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"name\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.name\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                           <input type=\"text\" name=\"code\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.code\" readonly />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                           <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" readonly value=\"{{selectedEntity.geometry.coordinates[0]}}, {{selectedEntity.geometry.coordinates[1]}}\">\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#FDTAccordion\" href=\"#fdt_make\">Make</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"fdt_make\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"type\" class=\"control-label\">Type</label>\r\n                           <input type=\"text\" name=\"type\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.type\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"brand\" class=\"control-label\">Brand</label>\r\n                           <input type=\"text\" name=\"brand\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.brand\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"model\" class=\"control-label\">Model</label>\r\n                           <input type=\"text\" name=\"model\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.model\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               <div class=\"panel panel-default\">\r\n                  <div class=\"panel-heading\">\r\n                     <h4 class=\"panel-title\">\r\n                        <a data-toggle=\"collapse\" data-parent=\"#FDTAccordion\" href=\"#fdtInfo\">FAT Information</a>\r\n                     </h4>\r\n                  </div>\r\n                  <div id=\"fdtInfo\" class=\"panel-collapse collapse\">\r\n                     <div class=\"panel-body\">\r\n                        <div class=\"form-group\">\r\n                           <label for=\"category\" class=\"control-label\">Category</label>\r\n                           <input type=\"text\" name=\"category\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberCategory\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"closureType\" class=\"control-label\">Closure Type</label>\r\n                           <input type=\"text\" name=\"closureType\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.chamberClosureType\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"spliceTrayCount\" class=\"control-label\">Splice Tray Count</label>\r\n                           <input type=\"text\" name=\"spliceTrayCount\" class=\"form-control input-sm\" [(ngModel)]=\"selectedEntity.spliceTrayCount\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                           <label for=\"isBuried\" class=\"control-label\" style=\"width:100%\">&nbsp;</label>\r\n                           <mat-checkbox name=\"isBuried\" [(ngModel)]=\"selectedEntity.isBuried\" [checked]=\"selectedEntity.isBuried\">Is Buried</mat-checkbox>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n\r\n      </div>\r\n   </div>\r\n</div>\r\n\r\n<div id=\"deleteEntity\" class=\"modal fade\" role=\"dialog\" *ngIf=\"selectedEntity\">\r\n   <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\" style=\"border-radius:3px\">\r\n         <div class=\"modal-header\">\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n            <h4 class=\"modal-title\">Delete {{selectedEntity.entityType}}</h4>\r\n         </div>\r\n         <div class=\"modal-body\">\r\n            <p>Do you want to delete {{selectedEntity.entityType}} - {{selectedEntity.name}}?</p>\r\n\r\n            <!--<p>Do you want to delete {{selectedEntity.entityType}} - {{selectedEntity.name}}?</p>\r\n            <table class=\"table table-bordered\">\r\n               <thead>\r\n                  <tr>\r\n                     <th style=\"width: 200px;\">Field</th>\r\n                     <th>Value</th>\r\n                  </tr>\r\n               </thead>\r\n               <tbody>\r\n                  <ng-container *ngIf='searchFields && searchFields.length > 0'>\r\n                     <tr *ngFor='let searchField of searchFields'>\r\n                        <td>{{searchField.label}}</td>\r\n                        <td><input [type]=searchField.dataType class=\"form-control input-sm\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"searchField.value\"></td>\r\n                     </tr>\r\n                  </ng-container>\r\n                  <tr *ngIf='searchFields == null || searchFields.length == 0'>\r\n                     <td colspan=\"2\" style=\"text-align: center;\">\r\n                        No search fields defined\r\n                     </td>\r\n                  </tr>\r\n               </tbody>\r\n            </table>-->\r\n         </div>\r\n         <div class=\"modal-footer\">\r\n            <button class=\"btn btn-info\" data-dismiss=\"modal\" type=\"button\" (click)=\"deleteEntity()\">Yes</button>\r\n            <button class=\"btn btn-default pull-left\" data-dismiss=\"modal\" type=\"button\">No</button>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\" style=\"padding-top:15%\" data-keyboard=\"false\" data-backdrop=\"static\">\r\n   <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n      <div class=\"modal-content\">\r\n         <div class=\"modal-header\">\r\n            <!--<h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Modal title</h5>-->\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n               <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n         </div>\r\n         <div class=\"modal-body\">\r\n            <div class=\"form-group\">\r\n               <div class=\"form-group\">\r\n                  <select class=\"form-control\" id=\"designEntity\">\r\n                     <option [value]=\"0\">Please select</option>\r\n                     <option *ngFor=\"let designEntity of masterEntities\" [value]=\"designEntity.id\">{{designEntity.name}}</option>\r\n                  </select>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"ClearEntities()\">Close</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"PlotPostEntities()\">Ok</button>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-networkSettings.html": 
        /*!***************************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-networkSettings.html ***!
          \***************************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<div>\r\n   <div class=\"col-md-4\">\r\n      <div class=\"panel panel-default\">\r\n         <div class=\"panel-heading\">\r\n            <h4 class=\"panel-title\">Hierarchy Settings</h4>\r\n         </div>\r\n         <div class=\"panel-collapse collapse in\">\r\n            <div class=\"panel-body\">\r\n               <div class=\"col-sm-12\">\r\n                  <div class=\"form-group\">\r\n                     <label for=\"hierarchyName\" class=\"control-label\">Hierarchy Name <span style=\"color:red;\">*</span></label>\r\n                     <div class=\"input-group input-group-sm\">\r\n                        <input type=\"text\" name=\"hierarchyName\" [(ngModel)]=\"hierarchyName\" class=\"form-control\">\r\n                        <span class=\"input-group-btn\">\r\n                           <button type=\"button\" class=\"btn btn-info btn-flat\" (click)=\"addHierarchy()\"><i class=\"fas fa-plus\"></i></button>\r\n                        </span>\r\n                     </div>\r\n                  </div>\r\n                  <ng-container *ngIf='design.networkSettings && design.networkSettings.length > 0'>\r\n                     <ng-container *ngFor='let networkSetting of design.networkSettings; let rowIndex = index;'>\r\n                        <div class=\"box box-solid hierarchy\" [class.hactive]=\"selectedSetting == networkSetting\" (click)=\"selectedSetting = networkSetting\" style=\"cursor: pointer;\">\r\n                           <div class=\"box-header\">\r\n                              <div class=\"pull-right box-tools\" style=\"top: 0px;right: 0px;\">\r\n                                 <button type=\"button\" class=\"btn btn-sm pull-right\" style=\"padding: 5px;background: transparent;\" (click)=\"deleteHierarchy(rowIndex)\">\r\n                                    <i class=\"fas fa-trash-alt\" style=\"color:red\"></i>\r\n                                 </button>\r\n                              </div>\r\n                           </div>\r\n                           <div class=\"box-body\">\r\n                              <p>{{rowIndex + 1}}. {{networkSetting.name}}</p>\r\n                           </div>\r\n                        </div>\r\n                     </ng-container>\r\n                  </ng-container>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n   <div class=\"col-md-8\">\r\n      <div class=\"panel panel-default\">\r\n         <div class=\"panel-heading\">\r\n            <h4 class=\"panel-title\">{{selectedSetting?.name || 'Settings'}}</h4>\r\n         </div>\r\n         <div class=\"panel-collapse collapse in\">\r\n            <div class=\"panel-body\" style=\"padding: 7px;\" *ngIf=\"design.designType == 'FTTx'\">\r\n               <ul class=\"nav nav-tabs form-menu\" style=\"padding-bottom: 2px;border-bottom: 1px solid #ddd;\">\r\n                  <li class=\"active\"><a href=\"#tab_startNode\" data-toggle=\"tab\">Start Node</a></li>\r\n                  <li><a href=\"#tab_destinationNode\" data-toggle=\"tab\">Destination Node</a></li>\r\n                  <li><a href=\"#tab_cabling\" data-toggle=\"tab\">Cabling</a></li>\r\n               </ul>\r\n               <div class=\"tab-content\">\r\n                  <div id=\"tab_startNode\" class=\"tab-pane active\" style=\"padding: 10px;\">\r\n                     <div class=\"panel-group\" id=\"sn_accordion\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#sn_accordion\" href=\"#sn_entitySettings\">Entity Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"sn_entitySettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-entities [entitySettings]=\"selectedSetting.startNode.entitySettings\" [allDesigns]=\"allDesigns\"></dzn-entities>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#sn_accordion\" href=\"#sn_accessories\">Accessories</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"sn_accessories\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-accessories [accessorySettings]=\"selectedSetting.startNode.accessorySettings\" [parentEntityType]=\"selectedSetting.startNode.entitySettings.entityName\" [allDesigns]=\"allDesigns\"></dzn-accessories>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#sn_accordion\" href=\"#sn_civilWorks\">Civil works</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"sn_civilWorks\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-civilworks [civilworkSettings]=\"selectedSetting.startNode.civilworkSettings\" [parentEntityType]=\"selectedSetting.startNode.entitySettings.entityName\"></dzn-civilworks>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#sn_accordion\" href=\"#sn_fiber\">Fiber</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"sn_fiber\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <div class=\"form-group col-md-12\">\r\n                                    <label class=\"control-label\" for=\"fiberDrop\">Fiber Drop</label>\r\n                                    <input class=\"form-control\" name=\"fiberDrop\" [(ngModel)]=\"selectedSetting.startNode.fiberDrop\" type=\"number\">\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#sn_accordion\" href=\"#sn_ductSettings\">Duct Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"sn_ductSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-duct [ductSettings]=\"selectedSetting.startNode.ductSettings\"></dzn-duct>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div id=\"tab_destinationNode\" class=\"tab-pane\" style=\"padding: 10px;\">\r\n                     <div class=\"panel-group\" id=\"dn_accordion\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#dn_accordion\" href=\"#dn_entitySettings\">Entity Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"dn_entitySettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-entities [entitySettings]=\"selectedSetting.destinationNode.entitySettings\" [allDesigns]=\"allDesigns\"></dzn-entities>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#dn_accordion\" href=\"#dn_accessories\">Accessories</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"dn_accessories\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-accessories [accessorySettings]=\"selectedSetting.destinationNode.accessorySettings\" [parentEntityType]=\"selectedSetting.destinationNode.entitySettings.entityName\" [allDesigns]=\"allDesigns\"></dzn-accessories>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#dn_accordion\" href=\"#dn_civilWorks\">Civil works</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"dn_civilWorks\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-civilworks [civilworkSettings]=\"selectedSetting.destinationNode.civilworkSettings\" [parentEntityType]=\"selectedSetting.destinationNode.entitySettings.entityName\"></dzn-civilworks>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#dn_accordion\" href=\"#dn_fiber\">Fiber</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"dn_fiber\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <div class=\"form-group col-md-12\">\r\n                                    <label class=\"control-label\" for=\"dn_fiberDrop\">Fiber Drop</label>\r\n                                    <input class=\"form-control\" name=\"dn_fiberDrop\" [(ngModel)]=\"selectedSetting.destinationNode.fiberDrop\" type=\"number\">\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#dn_accordion\" href=\"#dn_ductSettings\">Duct Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"dn_ductSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-duct [ductSettings]=\"selectedSetting.destinationNode.ductSettings\"></dzn-duct>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div id=\"tab_cabling\" class=\"tab-pane\" style=\"padding: 10px;\">\r\n                     <div class=\"panel-group\" id=\"cbl_accordion\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_cableSettings\">Cable Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_cableSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-cable [cableSettings]=\"selectedSetting.cabling.cableSettings\"></dzn-cable>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_loopSettings\">Loop Management</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_loopSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"cableLoop\" class=\"control-label\">Cable loop (Meters)</label>\r\n                                       <input class=\"form-control\" name=\"cableLoop\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.cableLoop\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"forEvery\" class=\"control-label\">For Every (Meters)</label>\r\n                                       <input class=\"form-control\" name=\"forEvery\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.loopInterval\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"loopAtClosure\" class=\"control-label\">Loop at Closure (Meters)</label>\r\n                                       <input class=\"form-control\" name=\"loopAtClosure\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.loopAtClosure\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"loopAtClosure\" class=\"control-label\">Connect %</label>\r\n                                       <input class=\"form-control\" name=\"loopAtClosure\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.connectionPercent\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_spliceClosuresSettings\">Splice Closures</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_spliceClosuresSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-spliceClosure [spliceClosureSettings]=\"selectedSetting.cabling.spliceClosureSettings\"></dzn-spliceClosure>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_accessories\">Accessories</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_accessories\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-accessories [accessorySettings]=\"selectedSetting.cabling.accessorySettings\" parentEntityType=\"Cable\" [allDesigns]=\"allDesigns\"></dzn-accessories>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_duct\">Duct</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_duct\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-duct [ductSettings]=\"selectedSetting.cabling.ductSettings\"></dzn-duct>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n            <div class=\"panel-body\" style=\"padding: 7px;\" *ngIf=\"design.designType == 'Backbone'\">\r\n               <ul class=\"nav nav-tabs form-menu\" style=\"padding-bottom: 2px;border-bottom: 1px solid #ddd;\">\r\n                  <li class=\"active\"><a href=\"#tab_fdp\" data-toggle=\"tab\">FDP Node</a></li>\r\n                  <li><a href=\"#tab_bb_cabling\" data-toggle=\"tab\">Cabling</a></li>\r\n               </ul>\r\n               <div class=\"tab-content\">\r\n                  <div id=\"tab_fdp\" class=\"tab-pane active\" style=\"padding: 10px;\">\r\n                     <div class=\"panel-group\" id=\"fdp_accordion\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#fdp_accordion\" href=\"#fdp_nodeSettings\">FDP Nodes</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"fdp_nodeSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-fdp [fdpSettings]=\"selectedSetting.fdpNode.fdpSettings\" [allDesigns]=\"allDesigns\"></dzn-fdp>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#fdp_accordion\" href=\"#fdp_accessories\">Accessories</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"fdp_accessories\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-accessories [accessorySettings]=\"selectedSetting.fdpNode.accessorySettings\" [parentEntityType]=\"selectedSetting.fdpNode.entitySettings.entityName\" [allDesigns]=\"allDesigns\"></dzn-accessories>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#fdp_accordion\" href=\"#fdp_civilWorks\">Civil works</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"fdp_civilWorks\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-civilworks [civilworkSettings]=\"selectedSetting.fdpNode.civilworkSettings\" [parentEntityType]=\"selectedSetting.fdpNode.entitySettings.entityName\"></dzn-civilworks>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#fdp_accordion\" href=\"#fdp_fiber\">Fiber</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"fdp_fiber\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <div class=\"form-group col-md-12\">\r\n                                    <label class=\"control-label\" for=\"fdpFiberDrop\">Fiber Drop</label>\r\n                                    <input class=\"form-control\" name=\"fdpFiberDrop\" [(ngModel)]=\"selectedSetting.fdpNode.fiberDrop\" type=\"number\">\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#fdp_accordion\" href=\"#fdp_ductSettings\">Duct Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"fdp_ductSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-duct [ductSettings]=\"selectedSetting.fdpNode.ductSettings\"></dzn-duct>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n                  <div id=\"tab_bb_cabling\" class=\"tab-pane\" style=\"padding: 10px;\">\r\n                     <div class=\"panel-group\" id=\"cbl_accordion\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_cableSettings\">Cable Settings</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_cableSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-cable [cableSettings]=\"selectedSetting.cabling.cableSettings\"></dzn-cable>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_loopSettings\">Loop Management</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_loopSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"cableLoop\" class=\"control-label\">Cable loop (Meters)</label>\r\n                                       <input class=\"form-control\" name=\"cableLoop\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.cableLoop\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"forEvery\" class=\"control-label\">For Every (Meters)</label>\r\n                                       <input class=\"form-control\" name=\"forEvery\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.loopInterval\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"loopAtClosure\" class=\"control-label\">Loop at Closure (Meters)</label>\r\n                                       <input class=\"form-control\" name=\"loopAtClosure\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.loopAtClosure\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"col-sm-6\">\r\n                                    <div class=\"form-group\">\r\n                                       <label for=\"loopAtClosure\" class=\"control-label\">Connect %</label>\r\n                                       <input class=\"form-control\" name=\"loopAtClosure\" [(ngModel)]=\"selectedSetting.cabling.cableSettings.connectionPercent\" type=\"number\">\r\n                                    </div>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_spliceClosuresSettings\">Splice Closures</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_spliceClosuresSettings\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-spliceClosure [spliceClosureSettings]=\"selectedSetting.cabling.spliceClosureSettings\"></dzn-spliceClosure>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_accessories\">Accessories</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_accessories\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-accessories [accessorySettings]=\"selectedSetting.cabling.accessorySettings\" parentEntityType=\"Cable\" [allDesigns]=\"allDesigns\"></dzn-accessories>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"padding:5px\">\r\n                              <span>\r\n                                 <a data-toggle=\"collapse\" data-parent=\"#cbl_accordion\" href=\"#cbl_duct\">Duct</a>\r\n                              </span>\r\n                           </div>\r\n                           <div id=\"cbl_duct\" class=\"panel-collapse collapse\">\r\n                              <div class=\"panel-body\">\r\n                                 <dzn-duct [ductSettings]=\"selectedSetting.cabling.ductSettings\"></dzn-duct>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</div>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-spliceClosure.html": 
        /*!*************************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-spliceClosure.html ***!
          \*************************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<!--<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <label for=\"equipment\" class=\"control-label\">SpliceClosure Option</label>\r\n      <mat-select name=\"spliceClosureOption\" [(ngModel)]=\"spliceClosureSettings.dataSource\" (ngModelChange)=\"getExistingSpliceClosures()\">\r\n         <mat-option>SpliceClosure Option</mat-option>\r\n         <mat-option value=\"import\">Import SpliceClosure</mat-option>\r\n         <mat-option value=\"existing\">Use from existing</mat-option>\r\n         <mat-option value=\"automatic\">Place Automatically</mat-option>\r\n      </mat-select>\r\n   </div>\r\n</div>-->\r\n<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <label for=\"equipment\" class=\"control-label\">Select SpliceClosure</label>\r\n      <div class=\"input-group input-group-sm\">\r\n         <mat-select name=\"spliceClosure\" [(ngModel)]=\"selectedSpliceClosure\">\r\n            <mat-option>Select SpliceClosure</mat-option>\r\n            <mat-option *ngFor=\"let spliceClosure of spliceClosuresMaster\" [value]=\"spliceClosure\">\r\n               {{spliceClosure.name}}\r\n            </mat-option>\r\n         </mat-select>\r\n         <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addSpliceClosure()\"><i class=\"fas fa-plus\"></i></button></span>\r\n      </div>\r\n   </div>\r\n</div>\r\n<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <table class=\"table table-bordered table-striped\">\r\n         <thead>\r\n            <tr>\r\n               <th>Name</th>\r\n               <th style=\"width:40px\"></th>\r\n            </tr>\r\n         </thead>\r\n         <tbody>\r\n            <ng-container *ngIf='spliceClosureSettings.spliceClosures && spliceClosureSettings.spliceClosures.length > 0'>\r\n               <tr *ngFor='let spliceClosure of spliceClosureSettings.spliceClosures;let rowIndex = index;'>\r\n                  <td>{{spliceClosure.name}}</td>\r\n                  <td>\r\n                     <a>\r\n                        <i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red; cursor:pointer\" (click)=\"removeSpliceClosure(rowIndex)\" title=\"Remove\"></i>\r\n                     </a>\r\n                  </td>\r\n               </tr>\r\n            </ng-container>\r\n            <tr *ngIf='spliceClosureSettings.spliceClosures == null || spliceClosureSettings.spliceClosures.length == 0'>\r\n               <td colspan=\"2\" style=\"text-align: center;\">\r\n                  {{statusMessage}}\r\n               </td>\r\n            </tr>\r\n         </tbody>\r\n      </table>\r\n   </div>\r\n</div>\r\n\r\n<div class=\"col-sm-12\">\r\n   <div class=\"form-group\">\r\n      <mat-checkbox name=\"scJoin\" [checked]=\"spliceClosureSettings.straightJoin\" [(ngModel)]=\"spliceClosureSettings.straightJoin\">Straight Joints as per cable drum length </mat-checkbox>\r\n   </div>\r\n   <div class=\"form-group\" *ngIf=\"spliceClosureSettings.straightJoin\">\r\n      <label for=\"drumLength\" class=\"control-label\">Drum Length</label>\r\n      <input class=\"form-control\" name=\"drumLength\" type=\"number\" [(ngModel)]=\"spliceClosureSettings.drumLength\">\r\n   </div>\r\n   <div class=\"form-group\" *ngIf=\"spliceClosureSettings.straightJoin\">\r\n      <mat-checkbox name=\"intersectionJoints\" [checked]=\"spliceClosureSettings.intersectionJoints\" [(ngModel)]=\"spliceClosureSettings.intersectionJoints\">Intersection Joints</mat-checkbox>\r\n   </div>\r\n</div>\r\n\r\n\r\n   <!--<div class=\"form-group\" *ngIf=\"spliceClosureOption == 'import'\">\r\n      <label for=\"equipment\" class=\"control-label\">Select SpliceClosure Shape File</label>\r\n      <div class=\"input-group\">\r\n         <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n         <span class=\"input-group-btn\">\r\n            <span class=\"btn btn-primary btn-file\">\r\n               Browse&hellip; <input type=\"file\" multiple (change)=\"fileChangeEvent($event)\">\r\n            </span>\r\n         </span>\r\n      </div>\r\n   </div>\r\n   <div *ngIf=\"spliceClosureOption == 'existing'\">\r\n      <div class=\"form-group\">\r\n         <label for=\"design\" class=\"control-label\">Select Design</label>\r\n         <mat-select name=\"design\" [(ngModel)]=\"selectedDesign\">\r\n            <mat-option>Select Design</mat-option>\r\n            <mat-option *ngFor=\"let item of allDesigns\" [value]=\"item.id\">(ver {{item.version}}) {{item.name}}</mat-option>\r\n         </mat-select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n         <label for=\"equipment\" class=\"control-label\">Select SpliceClosure</label>\r\n         <div class=\"input-group input-group-sm\">\r\n            <mat-select name=\"spliceClosure\" [(ngModel)]=\"selectedSpliceClosure\">\r\n               <mat-option>Select SpliceClosure</mat-option>\r\n               <mat-option *ngFor=\"let spliceClosure of spliceClosuresMaster\" [value]=\"spliceClosure\">\r\n                  {{spliceClosure.name}}\r\n               </mat-option>\r\n            </mat-select>\r\n            <span class=\"input-group-btn\"><button class=\"btn btn-info btn-flat\" type=\"button\" (click)=\"addSpliceClosure()\"><i class=\"fas fa-plus\"></i></button></span>\r\n         </div>\r\n      </div>\r\n   </div>-->\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/views/design-details.html": 
        /*!*****************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/views/design-details.html ***!
          \*****************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n   <h1>Manage Designs <small> {{title}} </small></h1>\r\n   <ol class=\"breadcrumb\">\r\n      <li><a [routerLink]=\"['/home']\"><i class=\"fa fa-home\"></i> Home</a></li>\r\n      <li><a [routerLink]=\"['/designs']\"> Designs</a></li>\r\n   </ol>\r\n</section>\r\n\r\n<section class=\"content\">\r\n   <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n         <div class=\"box\">\r\n            <div class=\"box-header with-border ui-sortable-handle\">\r\n               <ul class=\"nav nav-tabs form-menu\">\r\n                  <li class=\"active\"><a href=\"#tab_designInfo\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Design Info</span></a></li>\r\n                  <li><a href=\"#tab_documents\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Documents</span></a></li>\r\n                  <!--<li *ngIf=\"design.designType == 'FTTx'\"><a href=\"#tab_clusters\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Clusters</span></a></li>-->\r\n                  <li><a href=\"#tab_clusters\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Clusters</span></a></li>\r\n                  <li><a href=\"#tab_bookingIds\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Booking Ids</span></a></li>\r\n                  <li><a href=\"#tab_networkSettings\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Settings</span></a></li>\r\n                  <li><a href=\"#tab_costing\" data-toggle=\"tab\"><span style=\"font-size:1.2em\">Costing</span></a></li>\r\n                  <li><a href=\"#tab_map\" data-toggle=\"tab\"><span style=\"font-size:1.2em\">Map</span></a></li>\r\n                  <li><a href=\"#tab_boq\" data-toggle=\"tab\"><span style=\"font-size:1.2em\">BOM</span></a></li>\r\n                  <li><a href=\"#tab_log\" data-toggle=\"tab\"><span style=\"font-size:1.2em\">Logs</span></a></li>\r\n               </ul>\r\n               <div class=\"box-tools pull-right\">\r\n                  <button class=\"btn btn-social-icon btn-xs btn-danger\" (click)=\"goBack()\">\r\n                     <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                  <button class=\"btn btn-social-icon btn-xs btn-success\" type=\"submit\" style=\"margin-left: 5px;\" (click)=\"save()\" [disabled]=\"form.invalid\">\r\n                     <i class=\"far fa-save\"></i>\r\n                  </button>\r\n               </div>\r\n            </div>\r\n            <div class=\"box-body\">\r\n               <form name=\"form\" action=\"javascript:{}\" #form=\"ngForm\" autocomplete=\"off\" novalidate>\r\n                  <div class=\"tab-content\">\r\n                     <div id=\"tab_designInfo\" class=\"tab-pane active\">\r\n                        <dzn-info [design]=\"design\" [designs]=\"designs\" (onVersionChange)=\"onVersionChange($event)\"></dzn-info>\r\n                     </div>\r\n                     <div id=\"tab_documents\" class=\"tab-pane\">\r\n                        <dzn-documents [design]=\"design\"></dzn-documents>\r\n                     </div>\r\n                     <div id=\"tab_clusters\" class=\"tab-pane\">\r\n                        <dzn-clusters [design]=\"design\"></dzn-clusters>\r\n                     </div>\r\n                     <div id=\"tab_bookingIds\" class=\"tab-pane\">\r\n                        <dzn-bookingIds [design]=\"design\"></dzn-bookingIds>\r\n                     </div>\r\n                     <div id=\"tab_networkSettings\" class=\"tab-pane\">\r\n                        <dzn-networkSettings [design]=\"design\" [allDesigns]=\"allDesigns\"></dzn-networkSettings>\r\n                     </div>\r\n                     <div id=\"tab_costing\" class=\"tab-pane\">\r\n                        <dzn-costing [networkSettings]=\"design.networkSettings\"></dzn-costing>\r\n                     </div>\r\n                     <div id=\"tab_map\" class=\"tab-pane\">\r\n                        <dzn-map [design]=\"design\"></dzn-map>\r\n                     </div>\r\n                     <div id=\"tab_boq\" class=\"tab-pane\">\r\n                        <dzn-bom [boq]=\"design\"></dzn-bom>\r\n                     </div>\r\n                     <div id=\"tab_log\" class=\"tab-pane\">\r\n                        <div class=\"col-md-12 form-group\">\r\n                           <textarea class=\"form-control\" rows=\"15\" name=\"processLog\" [ngModel]=\"design.log\" readonly></textarea>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n            <div class=\"box-footer\">\r\n               <button type=\"submit\" class=\"btn btn-default pull-left\" (click)=\"saveNewVersion()\">Save as New Version</button>\r\n               <div class=\"pull-right\">\r\n                  <button type=\"submit\" class=\"btn btn-primary\" (click)=\"generateDesign()\" style=\"margin-right: 10px;\">Generate Design</button>\r\n                  <button type=\"submit\" class=\"btn btn-danger\" (click)=\"goBack()\">Close</button>\r\n                  <button type=\"submit\" class=\"btn btn-success\" style=\"margin-left:10px\" (click)=\"save()\" [disabled]=\"form.invalid\">Save</button>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/views/design-list.html": 
        /*!**************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/designs/views/design-list.html ***!
          \**************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n   <h1>Manage Designs</h1>\r\n   <ol class=\"breadcrumb\">\r\n      <li><a [routerLink]=\"['/home']\"><i class=\"fas fa-home\"></i> Home</a></li>\r\n   </ol>\r\n</section>\r\n\r\n<section class=\"content\">\r\n   <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n         <div class=\"box\">\r\n            <div class=\"box-header with-border\">\r\n               <h3 class=\"box-title\">Design List</h3>\r\n               <div class=\"box-tools pull-right\" data-toggle=\"tooltip\" title=\"\" data-original-title=\"Status\">\r\n                  <button [routerLink]=\"['details']\" class=\"btn btn-block btn-xs btn-primary\"> New Design</button>\r\n               </div>\r\n            </div>\r\n            <div class=\"box-body\">\r\n               <dt-search [searchFields]=\"searchFields\" (onSearch)=\"search($event)\"></dt-search>\r\n               <dt-pagination [totalPages]=\"totalPages\" (onPageSizeChange)=\"onPageSizeChange($event)\" (onPageChange)=\"onPageChange($event)\"></dt-pagination>\r\n\r\n               <table class=\"table table-bordered table-striped\">\r\n                  <thead>\r\n                     <tr (click)=\"onColumnClick($event.target)\">\r\n                        <th data-column=\"Name\" class=\"table-sorter\">Name</th>\r\n                        <th data-column=\"DesignType\" class=\"table-sorter\" style=\"max-width:200px\">Design Type</th>\r\n                        <th data-column=\"Version\" class=\"table-sorter\" style=\"max-width:100px\">Version</th>\r\n                        <th data-column=\"UpdatedBy\" class=\"table-sorter\" style=\"width: 150px;\">Updated By</th>\r\n                        <th data-column=\"UpdatedDate\" class=\"table-sorter\" style=\"width: 125px;\">Updated On</th>\r\n                        <th style=\"width:80px\"></th>\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <ng-container *ngIf='designs && designs.length > 0'>\r\n                        <tr *ngFor='let design of designs'>\r\n                           <td>{{design.name}}</td>\r\n                           <td>{{design.designType}}</td>\r\n                           <td>{{design.version}}</td>\r\n                           <td>{{design.updatedBy}}</td>\r\n                           <td>{{design.updatedDate | date:'dd/MM/yyyy'}}</td>\r\n                           <td class=\"text-center\">\r\n                              <!--<a>\r\n                                 <i class=\"fa fa-code\" (click)=\"exportKML(design)\" title=\"Export\" style=\"font-size: 14px; cursor:pointer\"></i>\r\n                              </a>&nbsp;-->\r\n                              <a>\r\n                                 <i class=\"fa fa-edit\" [routerLink]=\"['details', design.referenceId]\" title=\"Edit\" style=\"font-size: 14px; cursor:pointer\"></i>\r\n                              </a>&nbsp;\r\n                              <a>\r\n                                 <i class=\"fa fa-trash\" (click)=\"delete(design)\" title=\"Remove\" style=\"font-size: 14px; cursor:pointer; color:red\"></i>\r\n                              </a>\r\n                           </td>\r\n                        </tr>\r\n                     </ng-container>\r\n                     <tr *ngIf='designs == null || designs.length == 0'>\r\n                        <td colspan=\"6\" style=\"text-align: center;\">\r\n                           {{statusMessage}}\r\n                        </td>\r\n                     </tr>\r\n                  </tbody>\r\n               </table>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/homepasses/views/homepass-details.html": 
        /*!**********************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/homepasses/views/homepass-details.html ***!
          \**********************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n   <h1>Manage Homepasses <small> {{title}} </small></h1>\r\n   <ol class=\"breadcrumb\">\r\n      <li><a [routerLink]=\"['/home']\"><i class=\"fa fa-home\"></i> Home</a></li>\r\n      <li><a [routerLink]=\"['/homepasses']\"> Homepasses</a></li>\r\n   </ol>\r\n</section>\r\n\r\n<section class=\"content\">\r\n   <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n         <div class=\"box\">\r\n            <div class=\"box-header with-border ui-sortable-handle\">\r\n               <ul class=\"nav nav-tabs form-menu\">\r\n                  <li [class]=\"isNew == true?'active': ''\" *ngIf=\"isNew == true\"><a href=\"#tab_import\" data-toggle=\"tab\"> <span style=\"font-size:1.2em\">Import</span></a></li>\r\n                  <li [class]=\"isNew == false?'active': ''\"><a href=\"#tab_map\" data-toggle=\"tab\"><span style=\"font-size:1.2em\">{{tabTitle}}</span></a></li>\r\n               </ul>\r\n               <div class=\"box-tools pull-right\">\r\n                  <button class=\"btn btn-social-icon btn-xs btn-danger\" (click)=\"goBack()\">\r\n                     <i class=\"fas fa-times\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                  <button class=\"btn btn-social-icon btn-xs btn-success\" type=\"submit\" style=\"margin-left: 5px;\" (click)=\"save()\" [disabled]=\"form.invalid\">\r\n                     <i class=\"far fa-save\"></i>\r\n                  </button>\r\n               </div>\r\n            </div>\r\n            <div class=\"box-body\">\r\n               <form name=\"form\" action=\"javascript:{}\" #form=\"ngForm\" autocomplete=\"off\" novalidate>\r\n                  <div class=\"tab-content\">\r\n                     <div id=\"tab_import\" [class]=\"isNew == true?'tab-pane active': 'tab-pane'\">\r\n                        <div class=\"col-md-12\">\r\n                           <div class=\"form-group\">\r\n                              <label for=\"uploadFile\">Upload file</label>\r\n                              <div class=\"input-group\">\r\n                                 <input type=\"text\" class=\"form-control\" readonly id=\"uploadFile\" placeholder=\"Choose file\">\r\n                                 <span class=\"input-group-btn\">\r\n                                    <span class=\"btn btn-primary btn-file\">\r\n                                       Browse&hellip; <input type=\"file\" accept=\".csv, .kml, .zip\" #fileInput (click)=\"fileInput.value = null\" value=\"\" (change)=\"fileChangeEvent($event)\">\r\n                                    </span>\r\n                                 </span>\r\n                              </div>\r\n                           </div>\r\n                           <div class=\"form-group\">\r\n                              <label *ngIf=\"homepasses && homepasses.length > 0\">Total Homepasses: {{homepasses.length}}</label>\r\n                              <table class=\"table table-bordered table-striped\">\r\n                                 <thead>\r\n                                    <tr>\r\n                                       <th style=\"width:150px\">Code</th>\r\n                                       <th>Name</th>\r\n                                       <th style=\"width:150px\">Type</th>\r\n                                       <th style=\"width:200px\">Lng/Lat</th>\r\n                                       <th style=\"width:115px\"># Connections</th>\r\n                                       <th style=\"width:50px\" class='text-center'></th>\r\n                                    </tr>\r\n                                 </thead>\r\n                                 <tbody>\r\n                                    <ng-container *ngIf='homepasses && homepasses.length > 0'>\r\n                                       <tr *ngFor='let homepass of homepasses;let rowIndex = index;'>\r\n                                          <td>{{homepass.code}}</td>\r\n                                          <td>{{homepass.name}}</td>\r\n                                          <td>{{homepass.type}}</td>\r\n                                          <td>{{homepass.geometry.coordinates[0]}} , {{homepass.geometry.coordinates[1]}}</td>\r\n                                          <td>{{homepass.connections}}</td>\r\n                                          <td style=\"text-align:center\">\r\n                                             <a (click)=\"removeUploadedHomepass(rowIndex)\" style=\"cursor:pointer\"><i class=\"fas fa-trash-alt\" style=\"font-size: 15px; color: Red;\" title=\"Delete\"></i></a>\r\n                                          </td>\r\n                                       </tr>\r\n                                    </ng-container>\r\n                                    <tr *ngIf='homepasses == null || homepasses.length == 0'>\r\n                                       <td colspan=\"6\" style=\"text-align: center;\">\r\n                                          Upload homepasses.\r\n                                       </td>\r\n                                    </tr>\r\n                                 </tbody>\r\n                              </table>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                     <div id=\"tab_map\" [class]=\"isNew == false?'tab-pane active': 'tab-pane'\">\r\n                        <div class=\"panel panel-default\">\r\n                           <div style=\"position: relative;\">\r\n                              <div id=\"homepassMap\" style=\"min-height: 481px;\"></div>\r\n                              <div class=\"box pull-right properties\" *ngIf=\"homepass != null\">\r\n                                 <div class=\"box-header with-border\">\r\n                                    <h3 class=\"box-title\">Properties</h3>\r\n                                    <div class=\"box-tools pull-right\">\r\n                                       <button class=\"btn btn-social-icon btn-xs btn-default\" (click)=\"homepass = null\">\r\n                                          <i class=\"fas fa-times\"></i>\r\n                                       </button>\r\n                                       <button class=\"btn btn-social-icon btn-xs btn-default\" style=\"margin-left: 5px;\" type=\"submit\" (click)=\"deleteHomepass()\">\r\n                                          <i class=\"fas fa-trash-alt\" style=\"color: Red;\"></i>\r\n                                       </button>\r\n                                    </div>\r\n                                 </div>\r\n                                 <div class=\"box-body\" style=\"height: 440px;overflow-y: auto;\">\r\n\r\n                                    <div class=\"panel-group\" [id]=\"homepass.name\">\r\n                                       <div class=\"panel panel-borderless\">\r\n                                          <div class=\"panel-heading\">\r\n                                             <h4 class=\"panel-title\">\r\n                                                <a class=\"accordion-toggle\" data-toggle=\"collapse\" [attr.data-parent]=\"'#'+homepass.name\" href=\"#info\">General Information</a>\r\n                                             </h4>\r\n                                          </div>\r\n                                          <div id=\"info\" class=\"panel-collapse collapse in\">\r\n                                             <div class=\"panel-body\">\r\n                                                <div class=\"form-group\">\r\n                                                   <label for=\"name\" class=\"control-label\">Name <span style=\"color:red;\">*</span></label>\r\n                                                   <input type=\"text\" class=\"form-control input-sm\" name=\"name\" [(ngModel)]=\"homepass.name\">\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                   <label for=\"code\" class=\"control-label\">Code <span style=\"color:red;\">*</span></label>\r\n                                                   <input type=\"text\" class=\"form-control input-sm\" name=\"code\" [(ngModel)]=\"homepass.code\">\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                   <label for=\"coordinates\" class=\"control-label\">Coordinates(Lng,Lat) </label>\r\n                                                   <input type=\"text\" class=\"form-control input-sm\" name=\"coordinates\" value=\"{{homepass.geometry.coordinates[0]}}, {{homepass.geometry.coordinates[1]}}\">\r\n                                                </div>\r\n                                                <div class=\"form-group\" *ngIf=\"homepass.area\">\r\n                                                   <label for=\"area\" class=\"control-label\">Coordinates (Polygon) </label>\r\n                                                   <textarea type=\"text\" class=\"form-control input-sm\" name=\"area\" rows=\"5\" readonly value=\"{{stringify(homepass.area.coordinates)}}\"></textarea>\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                   <label for=\"type\" class=\"control-label\">Type </label>\r\n                                                   <input type=\"text\" class=\"form-control input-sm\" name=\"description\" [(ngModel)]=\"homepass.type\">\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                   <label for=\"description\" class=\"control-label\">Description </label>\r\n                                                   <input type=\"text\" class=\"form-control input-sm\" name=\"description\" [(ngModel)]=\"homepass.description\">\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                   <label for=\"connections\" class=\"control-label\">Connections </label>\r\n                                                   <input type=\"number\" class=\"form-control input-sm\" name=\"connections\" [(ngModel)]=\"homepass.connections\">\r\n                                                </div>\r\n                                             </div>\r\n                                          </div>\r\n                                       </div>\r\n                                       <div style=\"padding-top:10px\">\r\n                                          <cf-group [customFields]=\"homepass.customFields\" [accordionId]=\"homepass.name\"></cf-group>\r\n                                       </div>\r\n                                       <!--<ng-container *ngIf='homepass.customFields && homepass.customFields.length > 0'>\r\n                                          <ng-container *ngFor='let groups of homepass.customFieldGroups;let rowIndex = index;'>\r\n                                             <ng-container *ngFor='let item of groups'>\r\n                                                <div class=\"panel panel-default\">\r\n                                                   <div class=\"panel-heading\">\r\n                                                      <h4 class=\"panel-title\">\r\n                                                         <a data-toggle=\"collapse\" data-parent=\"#accordion\" [href]=\"'#cf_'+rowIndex\">{{item.category}}</a>\r\n                                                      </h4>\r\n                                                   </div>\r\n                                                   <div [id]=\"'cf_'+rowIndex\" class=\"panel-collapse collapse\">\r\n                                                      <div class=\"panel-body\">\r\n                                                         <div class=\"form-group\">\r\n                                                            <label for=\"category\" class=\"control-label\">{{item.label}}</label>\r\n                                                         </div>\r\n                                                      </div>\r\n                                                   </div>\r\n                                                </div>\r\n                                             </ng-container>\r\n\r\n                                          </ng-container>\r\n                                       </ng-container>-->\r\n                                    </div>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n            <div class=\"box-footer\">\r\n               <div class=\"pull-right\">\r\n                  <button type=\"submit\" class=\"btn btn-danger\" (click)=\"goBack()\">Close</button>\r\n                  <button type=\"submit\" class=\"btn btn-success\" style=\"margin-left:10px\" (click)=\"save()\" [disabled]=\"form.invalid\">Save</button>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/homepasses/views/homepass-list.html": 
        /*!*******************************************************************************************!*\
          !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/homepasses/views/homepass-list.html ***!
          \*******************************************************************************************/
        /*! exports provided: default */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony default export */ __webpack_exports__["default"] = ("<section class=\"content-header\">\r\n   <h1>Manage Homepasses</h1>\r\n   <ol class=\"breadcrumb\">\r\n      <li><a [routerLink]=\"['/home']\"><i class=\"fas fa-home\"></i> Home</a></li>\r\n   </ol>\r\n</section>\r\n\r\n<section class=\"content\">\r\n   <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n         <div class=\"box\">\r\n            <div class=\"box-header with-border\">\r\n               <h3 class=\"box-title\">Homepass List</h3>\r\n               <div class=\"box-tools pull-right\" title=\"\" *ngIf=\"permissions.add\">\r\n                  <button [routerLink]=\"['details']\" class=\"btn btn-block btn-xs btn-primary\"> New Homepass</button>\r\n               </div>\r\n            </div>\r\n            <div class=\"box-body\">\r\n               <dt-search [searchFields]=\"searchFields\" (onSearch)=\"search($event)\"></dt-search>\r\n               <dt-pagination [totalPages]=\"totalPages\" (onPageSizeChange)=\"onPageSizeChange($event)\" (onPageChange)=\"onPageChange($event)\"></dt-pagination>\r\n\r\n               <table class=\"table table-bordered table-striped\">\r\n                  <thead>\r\n                     <tr (click)=\"onColumnClick($event.target)\">\r\n                        <th data-column=\"Name\" class=\"table-sorter\" style=\"width: 200px;\">Name</th>\r\n                        <th data-column=\"Description\" class=\"table-sorter\" style=\"max-width:300px\">Description</th>\r\n                        <th data-column=\"Type\" class=\"table-sorter\" style=\"width: 100px;\">Type</th>\r\n                        <th data-column=\"UpdatedBy\" class=\"table-sorter\" style=\"width: 150px;\">Updated By</th>\r\n                        <th data-column=\"UpdatedDate\" class=\"table-sorter\" style=\"width: 125px;\">Updated On</th>\r\n                        <th style=\"width:60px\"></th>\r\n                     </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                     <ng-container *ngIf='homepasses && homepasses.length > 0'>\r\n                        <tr *ngFor='let homepass of homepasses'>\r\n                           <td>{{homepass.name}}</td>\r\n                           <td class=\"text-overflow-ellipsis\">{{homepass.description}}</td>\r\n                           <td>{{homepass.type}}</td>\r\n                           <td>{{homepass.updatedBy}}</td>\r\n                           <td>{{homepass.updatedDate | date:'dd/MM/yyyy'}}</td>\r\n                           <td>\r\n                              <a *ngIf=\"permissions.edit\">\r\n                                 <i class=\"fa fa-edit\" [routerLink]=\"['details', homepass.id]\" title=\"Edit\" style=\"font-size: 14px; cursor:pointer\"></i>\r\n                              </a>&nbsp;\r\n                              <a *ngIf=\"permissions.delete\">\r\n                                 <i class=\"fa fa-trash\" (click)=\"delete(homepass)\" title=\"Remove\" style=\"font-size: 14px; cursor:pointer; color:red\"></i>\r\n                              </a>\r\n                           </td>\r\n                        </tr>\r\n                     </ng-container>\r\n                     <tr *ngIf='homepasses == null || homepasses.length == 0'>\r\n                        <td colspan=\"5\" style=\"text-align: center;\">\r\n                           {{statusMessage}}\r\n                        </td>\r\n                     </tr>\r\n                  </tbody>\r\n               </table>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n");
            /***/ 
        }),
        /***/ "./node_modules/tslib/tslib.es6.js": 
        /*!*****************************************!*\
          !*** ./node_modules/tslib/tslib.es6.js ***!
          \*****************************************/
        /*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function () { return __extends; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function () { return __assign; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function () { return __rest; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function () { return __decorate; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function () { return __param; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function () { return __metadata; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function () { return __awaiter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function () { return __generator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function () { return __exportStar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function () { return __values; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function () { return __read; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function () { return __spread; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function () { return __spreadArrays; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function () { return __await; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function () { return __asyncGenerator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function () { return __asyncDelegator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function () { return __asyncValues; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function () { return __makeTemplateObject; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function () { return __importStar; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function () { return __importDefault; });
            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation. All rights reserved.
            Licensed under the Apache License, Version 2.0 (the "License"); you may not use
            this file except in compliance with the License. You may obtain a copy of the
            License at http://www.apache.org/licenses/LICENSE-2.0
            
            THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
            KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
            WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
            MERCHANTABLITY OR NON-INFRINGEMENT.
            
            See the Apache Version 2.0 License for specific language governing permissions
            and limitations under the License.
            ***************************************************************************** */
            /* global Reflect, Promise */
            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b)
                        if (b.hasOwnProperty(p))
                            d[p] = b[p]; };
                return extendStatics(d, b);
            };
            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }
            var __assign = function () {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s)
                            if (Object.prototype.hasOwnProperty.call(s, p))
                                t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            function __rest(s, e) {
                var t = {};
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                        t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                            t[p[i]] = s[p[i]];
                    }
                return t;
            }
            function __decorate(decorators, target, key, desc) {
                var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            }
            function __param(paramIndex, decorator) {
                return function (target, key) { decorator(target, key, paramIndex); };
            }
            function __metadata(metadataKey, metadataValue) {
                if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
                    return Reflect.metadata(metadataKey, metadataValue);
            }
            function __awaiter(thisArg, _arguments, P, generator) {
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try {
                        step(generator.next(value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function rejected(value) { try {
                        step(generator["throw"](value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            }
            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1)
                        throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f)
                        throw new TypeError("Generator is already executing.");
                    while (_)
                        try {
                            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                                return t;
                            if (y = 0, t)
                                op = [op[0] & 2, t.value];
                            switch (op[0]) {
                                case 0:
                                case 1:
                                    t = op;
                                    break;
                                case 4:
                                    _.label++;
                                    return { value: op[1], done: false };
                                case 5:
                                    _.label++;
                                    y = op[1];
                                    op = [0];
                                    continue;
                                case 7:
                                    op = _.ops.pop();
                                    _.trys.pop();
                                    continue;
                                default:
                                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                        _ = 0;
                                        continue;
                                    }
                                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                        _.label = op[1];
                                        break;
                                    }
                                    if (op[0] === 6 && _.label < t[1]) {
                                        _.label = t[1];
                                        t = op;
                                        break;
                                    }
                                    if (t && _.label < t[2]) {
                                        _.label = t[2];
                                        _.ops.push(op);
                                        break;
                                    }
                                    if (t[2])
                                        _.ops.pop();
                                    _.trys.pop();
                                    continue;
                            }
                            op = body.call(thisArg, _);
                        }
                        catch (e) {
                            op = [6, e];
                            y = 0;
                        }
                        finally {
                            f = t = 0;
                        }
                    if (op[0] & 5)
                        throw op[1];
                    return { value: op[0] ? op[1] : void 0, done: true };
                }
            }
            function __exportStar(m, exports) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            function __values(o) {
                var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
                if (m)
                    return m.call(o);
                return {
                    next: function () {
                        if (o && i >= o.length)
                            o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
            }
            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m)
                    return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                        ar.push(r.value);
                }
                catch (error) {
                    e = { error: error };
                }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"]))
                            m.call(i);
                    }
                    finally {
                        if (e)
                            throw e.error;
                    }
                }
                return ar;
            }
            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }
            function __spreadArrays() {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++)
                    s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            }
            ;
            function __await(v) {
                return this instanceof __await ? (this.v = v, this) : new __await(v);
            }
            function __asyncGenerator(thisArg, _arguments, generator) {
                if (!Symbol.asyncIterator)
                    throw new TypeError("Symbol.asyncIterator is not defined.");
                var g = generator.apply(thisArg, _arguments || []), i, q = [];
                return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
                function verb(n) { if (g[n])
                    i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
                function resume(n, v) { try {
                    step(g[n](v));
                }
                catch (e) {
                    settle(q[0][3], e);
                } }
                function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
                function fulfill(value) { resume("next", value); }
                function reject(value) { resume("throw", value); }
                function settle(f, v) { if (f(v), q.shift(), q.length)
                    resume(q[0][0], q[0][1]); }
            }
            function __asyncDelegator(o) {
                var i, p;
                return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
                function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
            }
            function __asyncValues(o) {
                if (!Symbol.asyncIterator)
                    throw new TypeError("Symbol.asyncIterator is not defined.");
                var m = o[Symbol.asyncIterator], i;
                return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
                function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
                function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
            }
            function __makeTemplateObject(cooked, raw) {
                if (Object.defineProperty) {
                    Object.defineProperty(cooked, "raw", { value: raw });
                }
                else {
                    cooked.raw = raw;
                }
                return cooked;
            }
            ;
            function __importStar(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result.default = mod;
                return result;
            }
            function __importDefault(mod) {
                return (mod && mod.__esModule) ? mod : { default: mod };
            }
            /***/ 
        }),
        /***/ "./src/app/accessories/services/accessory.service.ts": 
        /*!***********************************************************!*\
          !*** ./src/app/accessories/services/accessory.service.ts ***!
          \***********************************************************/
        /*! exports provided: AccessoryService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccessoryService", function () { return AccessoryService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var AccessoryService = /** @class */ (function () {
                function AccessoryService(http) {
                    this.http = http;
                    this.getAccessoriesApi = 'Accessories/GetAccessories/';
                    this.getAccessoryApi = 'Accessories/GetAccessory/';
                    this.saveAccessoryApi = 'Accessories/SaveAccessory/';
                    this.deleteAccessoryApi = 'Accessories/DeleteAccessory/';
                }
                AccessoryService.prototype.getAccessories = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "UpdatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getAccessoriesApi, paginationRequest);
                };
                AccessoryService.prototype.getAccessory = function (accessoryId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('accessoryId', accessoryId);
                    return this.http.get(this.getAccessoryApi, { params: params });
                };
                AccessoryService.prototype.saveAccessory = function (accessory) {
                    return this.http.post(this.saveAccessoryApi, accessory);
                };
                AccessoryService.prototype.deleteAccessory = function (accessoryId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('accessoryId', accessoryId);
                    return this.http.delete(this.deleteAccessoryApi, { params: params });
                };
                return AccessoryService;
            }());
            AccessoryService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            AccessoryService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], AccessoryService);
            /***/ 
        }),
        /***/ "./src/app/app.component.ts": 
        /*!**********************************!*\
          !*** ./src/app/app.component.ts ***!
          \**********************************/
        /*! exports provided: AppComponent */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function () { return AppComponent; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_models_loginUser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/models/loginUser */ "./src/app/common/models/loginUser.ts");
            /* harmony import */ var _common_auth_auth_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/auth/auth.service */ "./src/app/common/auth/auth.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/helper */ "./src/app/common/helper.ts");
            var STORE_KEY = 'NERP_RND_LastAction';
            var MINUTES_UNITL_AUTO_LOGOUT = 60; // in mins
            var CHECK_INTERVAL = 15000; // in ms
            var AppComponent = /** @class */ (function () {
                function AppComponent(authService, helperService) {
                    this.authService = authService;
                    this.helperService = helperService;
                }
                AppComponent.prototype.ngOnInit = function () {
                    this.loginUser = new _common_models_loginUser__WEBPACK_IMPORTED_MODULE_2__["LoginUser"]();
                    this.getFormData();
                    this.initListener();
                    this.initInterval();
                };
                AppComponent.prototype.getFormData = function () {
                    var _this = this;
                    this.loginUser = new _common_models_loginUser__WEBPACK_IMPORTED_MODULE_2__["LoginUser"]();
                    this.authService.getLoginUserProfile().subscribe(function (res) {
                        if (res.data && res.status.toLowerCase() == "ok") {
                            _this.loginUser = res.data;
                            _this.authService.loginUser = _this.loginUser;
                        }
                        else {
                            _this.helperService.showAlertMessage(res.message, "error");
                            _this.onLogout();
                        }
                    }, function (err) {
                        _this.helperService.showAlertMessage(err.message, 'error');
                        _this.onLogout();
                    });
                };
                AppComponent.prototype.initListener = function () {
                    var _this = this;
                    document.body.addEventListener('click', function () { return _this.reset(); });
                    document.body.addEventListener('mouseover', function () { return _this.reset(); });
                    document.body.addEventListener('mouseout', function () { return _this.reset(); });
                    document.body.addEventListener('keydown', function () { return _this.reset(); });
                    document.body.addEventListener('keyup', function () { return _this.reset(); });
                    document.body.addEventListener('keypress', function () { return _this.reset(); });
                };
                AppComponent.prototype.reset = function () {
                    this.setLastAction(Date.now());
                };
                AppComponent.prototype.getLastAction = function () {
                    return parseInt(localStorage.getItem(STORE_KEY));
                };
                AppComponent.prototype.setLastAction = function (lastAction) {
                    localStorage.setItem(STORE_KEY, lastAction.toString());
                };
                AppComponent.prototype.initInterval = function () {
                    var _this = this;
                    setInterval(function () {
                        _this.check();
                    }, CHECK_INTERVAL);
                };
                AppComponent.prototype.check = function () {
                    var now = Date.now();
                    var timeleft = this.getLastAction() + MINUTES_UNITL_AUTO_LOGOUT * 60 * 1000;
                    var diff = timeleft - now;
                    var isTimeout = diff < 0;
                    if (isTimeout) {
                        localStorage.clear();
                        this.onLogout();
                    }
                };
                AppComponent.prototype.onLogout = function () {
                    localStorage.removeItem('NERP-token');
                    //this.router.navigate(['/login']);
                    window.location.href = '/Auth/Logout';
                };
                //getPermission(featureCode: string, accessType: string): boolean {
                //    return this.authService.getPermission(featureCode, accessType);
                //}
                AppComponent.prototype.getFeatureAccess = function (featureCode) {
                    return this.authService.getFeatureAccess(featureCode);
                };
                return AppComponent;
            }());
            AppComponent.ctorParameters = function () { return [
                { type: _common_auth_auth_service__WEBPACK_IMPORTED_MODULE_3__["AuthService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_4__["Helper"] }
            ]; };
            AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'app-root',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./app.component.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html")).default
                })
            ], AppComponent);
            /***/ 
        }),
        /***/ "./src/app/app.config.ts": 
        /*!*******************************!*\
          !*** ./src/app/app.config.ts ***!
          \*******************************/
        /*! exports provided: AppConfig */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppConfig", function () { return AppConfig; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            var AppConfig = /** @class */ (function () {
                function AppConfig() {
                    this.baseUrl = "";
                    this.urls = {
                        "Design": {
                            getDesignsApi: "Designs/GetDesigns/",
                            getDesignApi: "Designs/GetDesign/",
                            saveDesignApi: "Designs/SaveDesign/",
                            deleteDesignApi: "Designs/DeleteDesign/",
                            deleteDocumentApi: "Designs/DeleteDocument/",
                            exportDesignApi: "Designs/ExportDesign/"
                        },
                        "Routeware": {
                            SortPoints: "http://183.82.114.169:4000/api/Routeware/SortPoints",
                            GenerateMST: "http://183.82.114.169:4000/api/Routeware/GenerateMST",
                            GenerateMSTRecursive: "http://183.82.114.169:4000/api/Routeware/GenerateMSTRecursive",
                        },
                    };
                    this.settings = {
                        "Region": 'Indonesia\\Jakarta',
                        "MapCenter": [-6.14063, 106.734856]
                    };
                }
                return AppConfig;
            }());
            AppConfig = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
                    providedIn: 'root'
                })
            ], AppConfig);
            /***/ 
        }),
        /***/ "./src/app/app.module.ts": 
        /*!*******************************!*\
          !*** ./src/app/app.module.ts ***!
          \*******************************/
        /*! exports provided: AppModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function () { return AppModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm2015/platform-browser.js");
            /* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm2015/animations.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
            /* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_6__);
            /* harmony import */ var _app_routing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./app.routing */ "./src/app/app.routing.ts");
            /* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
            /* harmony import */ var _dashboard_views_dashboard__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dashboard/views/dashboard */ "./src/app/dashboard/views/dashboard.ts");
            /* harmony import */ var _homepasses_homepass_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./homepasses/homepass.module */ "./src/app/homepasses/homepass.module.ts");
            /* harmony import */ var _clusters_cluster_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./clusters/cluster.module */ "./src/app/clusters/cluster.module.ts");
            /* harmony import */ var _designs_design_module__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./designs/design.module */ "./src/app/designs/design.module.ts");
            /* harmony import */ var _common_auth_auth_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./common/auth/auth.service */ "./src/app/common/auth/auth.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_interceptors_cacheInterceptor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./common/interceptors/cacheInterceptor */ "./src/app/common/interceptors/cacheInterceptor.ts");
            var AppModule = /** @class */ (function () {
                function AppModule() {
                }
                return AppModule;
            }());
            AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    declarations: [
                        _app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"],
                        _dashboard_views_dashboard__WEBPACK_IMPORTED_MODULE_9__["Dashboard"]
                    ],
                    imports: [
                        _angular_platform_browser__WEBPACK_IMPORTED_MODULE_2__["BrowserModule"],
                        _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_3__["BrowserAnimationsModule"],
                        _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HttpClientModule"],
                        _app_routing__WEBPACK_IMPORTED_MODULE_7__["Routing"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
                        _homepasses_homepass_module__WEBPACK_IMPORTED_MODULE_10__["HomepassModule"],
                        _clusters_cluster_module__WEBPACK_IMPORTED_MODULE_11__["ClusterModule"],
                        _designs_design_module__WEBPACK_IMPORTED_MODULE_12__["DesignModule"],
                    ],
                    providers: [
                        _common_auth_auth_service__WEBPACK_IMPORTED_MODULE_13__["AuthService"],
                        _common_helper__WEBPACK_IMPORTED_MODULE_14__["Helper"],
                        { provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_4__["HTTP_INTERCEPTORS"], useClass: _common_interceptors_cacheInterceptor__WEBPACK_IMPORTED_MODULE_15__["CacheInterceptor"], multi: true }
                    ],
                    bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_8__["AppComponent"]]
                })
            ], AppModule);
            /***/ 
        }),
        /***/ "./src/app/app.routing.ts": 
        /*!********************************!*\
          !*** ./src/app/app.routing.ts ***!
          \********************************/
        /*! exports provided: Routing */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Routing", function () { return Routing; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _dashboard_views_dashboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dashboard/views/dashboard */ "./src/app/dashboard/views/dashboard.ts");
            var appRoutes = [
                { path: '', redirectTo: 'home', pathMatch: 'full' },
                { path: 'home', component: _dashboard_views_dashboard__WEBPACK_IMPORTED_MODULE_2__["Dashboard"] },
                {
                    path: 'homepasses',
                    loadChildren: function () { return Promise.resolve( /*! import() */).then(__webpack_require__.bind(null, /*! ./homepasses/homepass.module */ "./src/app/homepasses/homepass.module.ts")).then(function (m) { return m.HomepassModule; }); }
                },
                {
                    path: 'clusters',
                    loadChildren: function () { return Promise.resolve( /*! import() */).then(__webpack_require__.bind(null, /*! ./clusters/cluster.module */ "./src/app/clusters/cluster.module.ts")).then(function (m) { return m.ClusterModule; }); }
                },
                {
                    path: 'designs',
                    loadChildren: function () { return Promise.resolve( /*! import() */).then(__webpack_require__.bind(null, /*! ./designs/design.module */ "./src/app/designs/design.module.ts")).then(function (m) { return m.DesignModule; }); }
                }
            ];
            var Routing = _angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forRoot(appRoutes);
            /***/ 
        }),
        /***/ "./src/app/civilworks/services/civilwork.service.ts": 
        /*!**********************************************************!*\
          !*** ./src/app/civilworks/services/civilwork.service.ts ***!
          \**********************************************************/
        /*! exports provided: CivilworkService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CivilworkService", function () { return CivilworkService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var CivilworkService = /** @class */ (function () {
                function CivilworkService(http) {
                    this.http = http;
                    this.getCivilworksApi = 'Civilworks/GetCivilworks/';
                    this.getCivilworkApi = 'Civilworks/GetCivilwork/';
                    this.saveCivilworkApi = 'Civilworks/SaveCivilwork/';
                    this.deleteCivilworkApi = 'Civilworks/DeleteCivilwork/';
                }
                CivilworkService.prototype.getCivilworks = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "name",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getCivilworksApi, paginationRequest);
                };
                CivilworkService.prototype.getCivilwork = function (civilworkId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('civilworkId', civilworkId);
                    return this.http.get(this.getCivilworkApi, { params: params });
                };
                CivilworkService.prototype.saveCivilwork = function (civilwork) {
                    return this.http.post(this.saveCivilworkApi, civilwork);
                };
                CivilworkService.prototype.deleteCivilwork = function (civilworkId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('civilworkId', civilworkId);
                    return this.http.delete(this.deleteCivilworkApi, { params: params });
                };
                return CivilworkService;
            }());
            CivilworkService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            CivilworkService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], CivilworkService);
            /***/ 
        }),
        /***/ "./src/app/clusters/cluster.module.ts": 
        /*!********************************************!*\
          !*** ./src/app/clusters/cluster.module.ts ***!
          \********************************************/
        /*! exports provided: ClusterModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClusterModule", function () { return ClusterModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
            /* harmony import */ var _views_cluster_list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./views/cluster-list */ "./src/app/clusters/views/cluster-list.ts");
            /* harmony import */ var _views_cluster_details__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/cluster-details */ "./src/app/clusters/views/cluster-details.ts");
            /* harmony import */ var _services_cluster_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/cluster.service */ "./src/app/clusters/services/cluster.service.ts");
            /* harmony import */ var _cluster_routes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cluster.routes */ "./src/app/clusters/cluster.routes.ts");
            /* harmony import */ var _shared_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared.module */ "./src/app/shared.module.ts");
            //import { CheckboxModule } from 'primeng/checkbox';
            //import { TreeModule } from 'primeng/tree';
            //import { TreeTableModule } from 'primeng/treetable';
            var ClusterModule = /** @class */ (function () {
                function ClusterModule() {
                }
                return ClusterModule;
            }());
            ClusterModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatCheckboxModule"],
                        //TreeTableModule,
                        _cluster_routes__WEBPACK_IMPORTED_MODULE_8__["ClusterRouting"],
                        _shared_module__WEBPACK_IMPORTED_MODULE_9__["SharedModule"]
                    ],
                    declarations: [
                        _views_cluster_list__WEBPACK_IMPORTED_MODULE_5__["ClusterList"],
                        _views_cluster_details__WEBPACK_IMPORTED_MODULE_6__["ClusterDetails"]
                    ],
                    providers: [
                        _services_cluster_service__WEBPACK_IMPORTED_MODULE_7__["ClusterService"]
                    ]
                })
            ], ClusterModule);
            /***/ 
        }),
        /***/ "./src/app/clusters/cluster.routes.ts": 
        /*!********************************************!*\
          !*** ./src/app/clusters/cluster.routes.ts ***!
          \********************************************/
        /*! exports provided: clusterRoutes, ClusterRouting */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clusterRoutes", function () { return clusterRoutes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClusterRouting", function () { return ClusterRouting; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _views_cluster_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/cluster-list */ "./src/app/clusters/views/cluster-list.ts");
            /* harmony import */ var _views_cluster_details__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/cluster-details */ "./src/app/clusters/views/cluster-details.ts");
            var clusterRoutes = [
                {
                    path: 'clusters',
                    children: [
                        { path: '', component: _views_cluster_list__WEBPACK_IMPORTED_MODULE_2__["ClusterList"] },
                        { path: 'details', component: _views_cluster_details__WEBPACK_IMPORTED_MODULE_3__["ClusterDetails"] },
                        { path: 'details/:id', component: _views_cluster_details__WEBPACK_IMPORTED_MODULE_3__["ClusterDetails"] },
                    ]
                },
            ];
            var ClusterRouting = _angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(clusterRoutes);
            /***/ 
        }),
        /***/ "./src/app/clusters/services/cluster.service.ts": 
        /*!******************************************************!*\
          !*** ./src/app/clusters/services/cluster.service.ts ***!
          \******************************************************/
        /*! exports provided: ClusterService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClusterService", function () { return ClusterService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var ClusterService = /** @class */ (function () {
                function ClusterService(http) {
                    this.http = http;
                    this.getClustersApi = 'Clusters/GetClusters/';
                    this.getClusterApi = 'Clusters/GetCluster/';
                    this.saveClusterApi = 'Clusters/SaveCluster/';
                    this.saveClustersApi = 'Clusters/SaveClusters/';
                    this.deleteClusterApi = 'Clusters/DeleteCluster/';
                }
                ClusterService.prototype.getClusters = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "UpdatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getClustersApi, paginationRequest);
                };
                ClusterService.prototype.getCluster = function (clusterId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('clusterId', clusterId);
                    return this.http.get(this.getClusterApi, { params: params });
                };
                ClusterService.prototype.saveCluster = function (cluster) {
                    return this.http.post(this.saveClusterApi, cluster);
                };
                ClusterService.prototype.saveClusters = function (clusters) {
                    return this.http.post(this.saveClustersApi, clusters);
                };
                ClusterService.prototype.deleteCluster = function (clusterId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('clusterId', clusterId);
                    return this.http.delete(this.deleteClusterApi, { params: params });
                };
                return ClusterService;
            }());
            ClusterService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            ClusterService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], ClusterService);
            /***/ 
        }),
        /***/ "./src/app/clusters/views/cluster-details.ts": 
        /*!***************************************************!*\
          !*** ./src/app/clusters/views/cluster-details.ts ***!
          \***************************************************/
        /*! exports provided: ClusterDetails */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClusterDetails", function () { return ClusterDetails; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _services_cluster_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/cluster.service */ "./src/app/clusters/services/cluster.service.ts");
            /* harmony import */ var _homepasses_services_homepass_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../homepasses/services/homepass.service */ "./src/app/homepasses/services/homepass.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/geo/googleMapsHelper */ "./src/app/common/geo/googleMapsHelper.ts");
            /* harmony import */ var _app_config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../app.config */ "./src/app/app.config.ts");
            /* harmony import */ var _common_geo_geometry__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/geo/geometry */ "./src/app/common/geo/geometry.ts");
            var ClusterDetails = /** @class */ (function () {
                function ClusterDetails(location, route, httpClient, appConfig, clusterService, homepassService, helper) {
                    this.location = location;
                    this.route = route;
                    this.httpClient = httpClient;
                    this.appConfig = appConfig;
                    this.clusterService = clusterService;
                    this.homepassService = homepassService;
                    this.helper = helper;
                    this.title = "New Cluster";
                    this.tabTitle = "Add New";
                    this.isNew = true;
                    this.clusters = new Array();
                    this.polyOptions = {
                        strokeWeight: 0,
                        fillOpacity: 0.45,
                        editable: false,
                        draggable: false
                    };
                }
                ClusterDetails.prototype.ngOnInit = function () {
                    var _this = this;
                    var location = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].getLatLng(this.appConfig.settings.MapCenter);
                    this.map = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].initializeMap('clusterMap', location, 18, 21);
                    this.drawingManager = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].drawingManagerTool(this.map, null, ['rectangle', 'polygon'], this.polyOptions);
                    this.route.params.subscribe(function (params) {
                        _this.clusterId = params['id'];
                        if (_this.clusterId == null) {
                            _this.title = "New Cluster";
                            _this.isNew = true;
                        }
                        else {
                            _this.title = "Edit Cluster";
                            _this.tabTitle = "Edit Cluster";
                            _this.isNew = false;
                            _this.drawingManager.setMap(null);
                        }
                        _this.getFormData(_this.clusterId);
                    });
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].addListener(this.drawingManager, 'overlaycomplete', function (event) { return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                        var cluster;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.drawingManager.setDrawingMode(null);
                                    event.overlay.setOptions({ draggable: false });
                                    event.overlay.setOptions({ editable: false });
                                    cluster = {
                                        name: "",
                                        code: "",
                                        description: "",
                                        geometry: null,
                                        homepasses: null,
                                        marker: event.overlay,
                                        allHomepasses: null
                                    };
                                    return [4 /*yield*/, this.addHomepasses(cluster, event.type)];
                                case 1:
                                    _a.sent();
                                    this.clusters.push(cluster);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                };
                ClusterDetails.prototype.getFormData = function (clusterId) {
                    var _this = this;
                    this.clusterService.getCluster(clusterId).subscribe(function (resp) { return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](_this, void 0, void 0, function () {
                        var cluster, polygon, latlngs;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.cluster = null;
                                    if (!(resp.status.toLowerCase() == "error")) return [3 /*break*/, 1];
                                    this.helper.showAlertMessage(resp.message, "error");
                                    return [3 /*break*/, 3];
                                case 1:
                                    if (!(resp.data != null)) return [3 /*break*/, 3];
                                    cluster = resp.data;
                                    polygon = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].createPolygon(cluster.geometry.coordinates, this.polyOptions);
                                    polygon.setMap(this.map);
                                    cluster.marker = polygon;
                                    return [4 /*yield*/, this.addHomepasses(cluster)];
                                case 2:
                                    _a.sent();
                                    this.cluster = cluster;
                                    this.clusters.push(this.cluster);
                                    latlngs = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].getLatLngsFromPolygon(cluster.geometry.coordinates);
                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].setBounds(latlngs, this.map);
                                    _a.label = 3;
                                case 3:
                                    $("#ajax-loading").hide();
                                    return [2 /*return*/];
                            }
                        });
                    }); }, function (err) {
                        $("#ajax-loading").hide();
                        _this.cluster = null;
                        var msg = "Unable to fetch cluster : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                    });
                };
                ClusterDetails.prototype.addHomepasses = function (cluster, drawingMode) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var polygonArray, radius, center, _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    radius = null;
                                    center = null;
                                    if (drawingMode == 'rectangle') {
                                        polygonArray = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].boundsToPolygon(cluster.marker.getBounds());
                                    }
                                    else if (drawingMode == 'polygon') {
                                        polygonArray = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].pathArrayToPolygon(cluster.marker.getPath().getArray());
                                    }
                                    else {
                                        polygonArray = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].pathArrayToPolygon(cluster.marker.getPath().getArray());
                                    }
                                    //else if (drawingMode == 'circle') {
                                    //    center = [cluster.marker.center.lng(), cluster.marker.center.lat()];
                                    //    radius = cluster.marker.getRadius();
                                    //}
                                    cluster.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_10__["Polygon"](polygonArray);
                                    if (!(drawingMode == 'circle')) return [3 /*break*/, 2];
                                    _a = cluster;
                                    return [4 /*yield*/, this.getHomepassesWithinRadius(center, radius)];
                                case 1:
                                    _a.allHomepasses = _c.sent();
                                    return [3 /*break*/, 4];
                                case 2:
                                    _b = cluster;
                                    return [4 /*yield*/, this.getHomepasses(cluster.geometry)];
                                case 3:
                                    _b.allHomepasses = _c.sent();
                                    _c.label = 4;
                                case 4:
                                    this.addEventListners(cluster, drawingMode);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                ClusterDetails.prototype.getHomepassesWithinRadius = function (center, radius) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var homepasses, resp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    homepasses = new Array();
                                    return [4 /*yield*/, this.httpClient.post(this.homepassService.getHomepassesWithinRadiusApi, { Center: center, Radius: radius }).toPromise()];
                                case 1:
                                    resp = _a.sent();
                                    if (resp.status.toLowerCase() != "error") {
                                        if (resp.data != null && resp.data.length > 0) {
                                            homepasses = resp.data;
                                        }
                                    }
                                    return [2 /*return*/, homepasses];
                            }
                        });
                    });
                };
                ClusterDetails.prototype.getHomepasses = function (polygon) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var homepasses, resp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    homepasses = new Array();
                                    return [4 /*yield*/, this.httpClient.post(this.homepassService.getHomepassesInPolygonApi, polygon).toPromise()];
                                case 1:
                                    resp = _a.sent();
                                    if (resp.status.toLowerCase() != "error") {
                                        if (resp.data != null && resp.data.length > 0) {
                                            homepasses = resp.data;
                                        }
                                    }
                                    return [2 /*return*/, homepasses];
                            }
                        });
                    });
                };
                ClusterDetails.prototype.addEventListners = function (cluster, drawingMode) {
                    var _this = this;
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].addListener(cluster.marker, "rightclick", function (event) {
                        if (cluster.marker.draggable == false) {
                            cluster.marker.setOptions({ draggable: true, editable: true });
                        }
                        else {
                            cluster.marker.setOptions({ draggable: false, editable: false });
                        }
                    });
                    //GMapsHelper.addListener(cluster.marker, 'dragend', (event) => {
                    //    cluster.marker.data.location.coordinates[0] = event.latLng.lng();
                    //    cluster.marker.data.location.coordinates[1] = event.latLng.lat();
                    //    this.cluster = cluster;
                    //});
                    //if (drawingMode == 'rectangle') {
                    //    GMapsHelper.addListener(cluster.marker.getBounds(), 'set_at', async () => {
                    //        let polygonArray = GMapsHelper.boundsToPolygon(cluster.marker.getBounds());
                    //        cluster.geometry = new Polygon(polygonArray);
                    //        cluster.allHomepasses = await this.getHomepasses(cluster.geometry);
                    //    });
                    //    GMapsHelper.addListener(cluster.marker.getBounds(), 'insert_at', async () => {
                    //        let polygonArray = GMapsHelper.boundsToPolygon(cluster.marker.getBounds());
                    //        cluster.geometry = new Polygon(polygonArray);
                    //        cluster.allHomepasses = await this.getHomepasses(cluster.geometry);
                    //    });
                    //    GMapsHelper.addListener(cluster.marker.getBounds(), 'remove_at', async () => {
                    //        let polygonArray = GMapsHelper.boundsToPolygon(cluster.marker.getBounds());
                    //        cluster.geometry = new Polygon(polygonArray);
                    //        cluster.allHomepasses = await this.getHomepasses(cluster.geometry);
                    //    });
                    //}
                    //else {
                    //    GMapsHelper.addListener(cluster.marker.getPath(), 'set_at', async () => {
                    //        let polygonArray = GMapsHelper.pathArrayToPolygon(cluster.marker.getPath().getArray());
                    //        cluster.geometry = new Polygon(polygonArray);
                    //        cluster.allHomepasses = await this.getHomepasses(cluster.geometry);
                    //    });
                    //    GMapsHelper.addListener(cluster.marker.getPath(), 'insert_at', async () => {
                    //        let polygonArray = GMapsHelper.pathArrayToPolygon(cluster.marker.getPath().getArray());
                    //        cluster.geometry = new Polygon(polygonArray);
                    //        cluster.allHomepasses = await this.getHomepasses(cluster.geometry);
                    //    });
                    //    GMapsHelper.addListener(cluster.marker.getPath(), 'remove_at', async () => {
                    //        let polygonArray = GMapsHelper.pathArrayToPolygon(cluster.marker.getPath().getArray());
                    //        cluster.geometry = new Polygon(polygonArray);
                    //        cluster.allHomepasses = await this.getHomepasses(cluster.geometry);
                    //    });
                    //}
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].addListener(cluster.marker, 'click', function (event) {
                        _this.cluster = cluster;
                    });
                };
                ClusterDetails.prototype.stringify = function (obj) {
                    return JSON.stringify(obj);
                };
                ClusterDetails.prototype.removeUploadedCluster = function (index) {
                    var cluster = this.clusters[index];
                    if (cluster.marker)
                        cluster.marker.setMap(null);
                    this.clusters.splice(index, 1);
                };
                ClusterDetails.prototype.isAllSelected = function () {
                    var numSelected = this.cluster.homepasses ? this.cluster.homepasses.length : 0;
                    var numRows = this.cluster.allHomepasses.length;
                    return numSelected === numRows;
                };
                ClusterDetails.prototype.toggleSelection = function (homepass) {
                    var index = -1;
                    if (this.cluster.homepasses)
                        index = this.cluster.homepasses.findIndex(function (x) { return x == homepass.id; });
                    else
                        this.cluster.homepasses = [];
                    if (index == -1)
                        this.cluster.homepasses.push(homepass.id);
                    else
                        this.cluster.homepasses.splice(index, 1);
                };
                ClusterDetails.prototype.masterToggle = function () {
                    var _this = this;
                    if (this.isAllSelected()) {
                        this.cluster.homepasses = [];
                    }
                    else {
                        this.cluster.homepasses = [];
                        this.cluster.allHomepasses.forEach(function (x) { return _this.cluster.homepasses.push(x.id); });
                    }
                };
                ClusterDetails.prototype.fileChangeEvent = function (event) {
                    var _this = this;
                    var file = event.target.files[0];
                    var reader = new FileReader();
                    var fileExt = file.name.split('.').pop().toLowerCase();
                    reader.onload = function (e) {
                        try {
                            if (fileExt == "kml") {
                                var kml = reader.result;
                                var geojson = toGeoJSON.kml((new DOMParser()).parseFromString(kml, 'text/xml'));
                                _this.populateClusters(geojson.features);
                            }
                            else if (fileExt == "zip") {
                                shp(reader.result).then(function (geojson) {
                                    _this.populateClusters(geojson.features);
                                });
                            }
                        }
                        catch (e) {
                            _this.helper.showAlertMessage("Could not parse the file.", "error");
                        }
                    };
                    if (fileExt == "csv" || fileExt == "kml")
                        reader.readAsText(file);
                    else if (fileExt == "zip")
                        reader.readAsArrayBuffer(file);
                    else
                        this.helper.showAlertMessage("Invalid file format", "error");
                };
                ClusterDetails.prototype.populateClusters = function (features) {
                    this.clusters.length = 0;
                    var clusters = new Array();
                    for (var i = 0; i < features.length; i++) {
                        var properties = features[i].properties;
                        var cluster = {
                            name: properties.name,
                            code: properties.name,
                            description: "",
                            geometry: features[i].geometry,
                            homepasses: null,
                            marker: null,
                            allHomepasses: null
                        };
                        var polygon = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_8__["GMapsHelper"].createPolygon(cluster.geometry.coordinates, this.polyOptions);
                        polygon.setMap(this.map);
                        cluster.marker = polygon;
                        clusters.push(cluster);
                        this.addHomepasses(cluster);
                    }
                    this.clusters = clusters;
                };
                ClusterDetails.prototype.deleteCluster = function () {
                    var _this = this;
                    var index = this.clusters.findIndex(function (x) { return x.geometry.coordinates[0] == _this.cluster.geometry.coordinates[0] && x.geometry.coordinates[1] == _this.cluster.geometry.coordinates[1]; });
                    if (this.clusters[index].marker)
                        this.clusters[index].marker.setMap(null);
                    this.clusters.splice(index, 1);
                    this.cluster = null;
                    if (this.isNew == false) {
                        this.clusterService.deleteCluster(this.cluster.id).subscribe(function (resp) {
                            if (resp.status.toLowerCase() == "error") {
                                _this.helper.showAlertMessage(resp.message, "error");
                            }
                            else {
                                _this.helper.showAlertMessage("Cluster successfully deleted", "success");
                                _this.goBack();
                            }
                        }, function (err) {
                            _this.helper.showAlertMessage("Unable to delete cluster information.", "error");
                        });
                    }
                };
                ClusterDetails.prototype.save = function () {
                    var _this = this;
                    var errorMessages = this.validateCluster(this.clusters);
                    if (errorMessages.length == 0) {
                        this.clusters.forEach(function (x) { x.marker = null; x.allHomepasses = null; });
                        this.clusterService.saveClusters(this.clusters).subscribe(function (resp) {
                            if (resp.status.toLowerCase() == "error") {
                                _this.helper.showAlertMessage(resp.message, "error");
                            }
                            else {
                                _this.helper.showAlertMessage("Cluster information saved", "success");
                                _this.goBack();
                            }
                        }, function (err) {
                            _this.helper.showAlertMessage("Unable to save cluster information.", "error");
                        });
                    }
                    else {
                        var errorMessage = this.helper.getErrorMessagesText(errorMessages);
                        this.helper.showAlertMessage(errorMessage, "error");
                    }
                };
                ClusterDetails.prototype.validateCluster = function (clusters) {
                    var errorMessages = [];
                    this.clusters.forEach(function (cluster) {
                        if (cluster.name == null || cluster.name.trim() == '')
                            errorMessages.push("Cluster Name cannot be empty");
                        if (cluster.code == null || cluster.code.trim() == '')
                            errorMessages.push("Cluster Code cannot be empty");
                    });
                    return errorMessages;
                };
                ClusterDetails.prototype.goBack = function () {
                    this.location.back();
                };
                return ClusterDetails;
            }());
            ClusterDetails.ctorParameters = function () { return [
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_4__["Location"] },
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] },
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"] },
                { type: _app_config__WEBPACK_IMPORTED_MODULE_9__["AppConfig"] },
                { type: _services_cluster_service__WEBPACK_IMPORTED_MODULE_5__["ClusterService"] },
                { type: _homepasses_services_homepass_service__WEBPACK_IMPORTED_MODULE_6__["HomepassService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_7__["Helper"] }
            ]; };
            ClusterDetails = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./cluster-details.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/clusters/views/cluster-details.html")).default,
                    providers: [_services_cluster_service__WEBPACK_IMPORTED_MODULE_5__["ClusterService"]],
                })
            ], ClusterDetails);
            /***/ 
        }),
        /***/ "./src/app/clusters/views/cluster-list.ts": 
        /*!************************************************!*\
          !*** ./src/app/clusters/views/cluster-list.ts ***!
          \************************************************/
        /*! exports provided: ClusterList */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClusterList", function () { return ClusterList; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _services_cluster_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/cluster.service */ "./src/app/clusters/services/cluster.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var ClusterList = /** @class */ (function () {
                function ClusterList(clusterService, helper) {
                    this.clusterService = clusterService;
                    this.helper = helper;
                    this.clusters = new Array();
                    this.statusMessage = "";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.totalPages = 1;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].descending;
                    this.searchFields = new Array();
                    this.searchFields.push({ field: 'Code', label: 'Code', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'Name', label: 'Name', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'Description', label: 'Description', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedBy', label: 'Updated By', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedDate', label: 'Updated On', dataType: "date", value: "" });
                }
                ClusterList.prototype.ngOnInit = function () {
                    this.statusMessage = "Loading Clusters...";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.sortColumn = null;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].noSort;
                    this.getFormData();
                };
                ClusterList.prototype.getFormData = function () {
                    var _this = this;
                    $("#ajax-loading").show();
                    this.totalPages = 1;
                    var paginationRequest = {
                        page: this.currentPage,
                        pageSize: this.pageSize,
                        filter: this.searchFilter,
                        order: {
                            orderByProperty: this.sortColumn,
                            sortOrder: this.sortOrder
                        }
                    };
                    this.clusterService.getClusters(paginationRequest).subscribe(function (resp) {
                        _this.clusters = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                            _this.helper.showAlertMessage(_this.statusMessage, "error");
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.clusters = resp.data;
                                _this.totalPages = Math.ceil(resp.recordCount / _this.pageSize);
                            }
                            else {
                                _this.statusMessage = "There are no registered clusters.";
                            }
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        _this.clusters = null;
                        var msg = "Unable to fetch clusters : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                        _this.statusMessage = "Error fetching clusters.";
                    });
                };
                ClusterList.prototype.search = function (searchFilter) {
                    this.searchFilter = searchFilter;
                    this.getFormData();
                };
                ClusterList.prototype.onPageSizeChange = function (pageSize) {
                    this.pageSize = pageSize;
                    this.getFormData();
                };
                ClusterList.prototype.onPageChange = function (currentPage) {
                    this.currentPage = currentPage;
                    this.getFormData();
                };
                ClusterList.prototype.onColumnClick = function (e) {
                    if (this.previousElement && e.getAttribute('data-column') != this.previousElement.getAttribute('data-column')) {
                        this.previousElement.classList.remove('table-sorter-desc');
                        this.previousElement.classList.remove('table-sorter-asc');
                    }
                    this.previousElement = e;
                    this.sortColumn = e.getAttribute('data-column');
                    if (e.classList.contains("table-sorter-asc")) {
                        e.classList.remove('table-sorter-asc');
                        e.classList.add('table-sorter-desc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].descending;
                    }
                    else if (e.classList.contains("table-sorter-desc")) {
                        e.classList.remove('table-sorter-desc');
                        this.sortColumn = null;
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].noSort;
                    }
                    else {
                        e.classList.add('table-sorter-asc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].ascending;
                    }
                    this.getFormData();
                };
                ClusterList.prototype.delete = function (cluster) {
                    var _this = this;
                    new jBox("Confirm", {
                        minWidth: 500,
                        minHeight: 70,
                        title: "<b>Delete Cluster</b>",
                        overlay: false,
                        content: "Do you want to delete cluster - " + cluster.name,
                        draggable: "title",
                        confirmButton: "Yes",
                        cancelButton: "No",
                        confirm: function () {
                            _this.clusterService.deleteCluster(cluster.id).subscribe(function (resp) {
                                if (resp.status.toLowerCase() == "error") {
                                    _this.helper.showAlertMessage(resp.message, "error");
                                }
                                else {
                                    if (resp.data != null) {
                                        _this.helper.showAlertMessage("Cluster deleted.", "success");
                                        _this.getFormData();
                                    }
                                    else {
                                        _this.helper.showAlertMessage("Error deleting cluster", "error");
                                    }
                                }
                            }, function (err) {
                                _this.helper.showAlertMessage("Error deleting cluster", "error");
                            });
                        }
                    }).open();
                };
                return ClusterList;
            }());
            ClusterList.ctorParameters = function () { return [
                { type: _services_cluster_service__WEBPACK_IMPORTED_MODULE_2__["ClusterService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            ClusterList = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./cluster-list.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/clusters/views/cluster-list.html")).default
                })
            ], ClusterList);
            /***/ 
        }),
        /***/ "./src/app/common/auth/auth.service.ts": 
        /*!*********************************************!*\
          !*** ./src/app/common/auth/auth.service.ts ***!
          \*********************************************/
        /*! exports provided: AuthService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthService", function () { return AuthService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            var AuthService = /** @class */ (function () {
                function AuthService(http) {
                    this.http = http;
                }
                AuthService.prototype.authenticateUser = function (loginCredentials) {
                    return this.http.post('/Auth/Authenticate', loginCredentials);
                };
                AuthService.prototype.getLoginUserProfile = function () {
                    return this.http.get('/Auth/GetLoginUserProfile');
                };
                AuthService.prototype.getFeatureAccess = function (featureCode) {
                    if (this.loginUser)
                        return this.loginUser.features.includes(featureCode);
                    else
                        return false;
                };
                AuthService.prototype.getFunctionalityAccess = function (permissionCode) {
                    if (this.loginUser)
                        return this.loginUser.permissions.includes(permissionCode);
                    else
                        return false;
                };
                return AuthService;
            }());
            AuthService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            AuthService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], AuthService);
            /***/ 
        }),
        /***/ "./src/app/common/geo/drawingMode.ts": 
        /*!*******************************************!*\
          !*** ./src/app/common/geo/drawingMode.ts ***!
          \*******************************************/
        /*! exports provided: DrawingMode */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DrawingMode", function () { return DrawingMode; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var DrawingMode;
            (function (DrawingMode) {
                DrawingMode[DrawingMode["CIRCLE"] = 0] = "CIRCLE";
                DrawingMode[DrawingMode["MARKER"] = 1] = "MARKER";
                DrawingMode[DrawingMode["POLYGON"] = 2] = "POLYGON";
                DrawingMode[DrawingMode["POLYLINE"] = 3] = "POLYLINE";
                DrawingMode[DrawingMode["RECTANGLE"] = 4] = "RECTANGLE";
            })(DrawingMode || (DrawingMode = {}));
            /***/ 
        }),
        /***/ "./src/app/common/geo/geoHelper.ts": 
        /*!*****************************************!*\
          !*** ./src/app/common/geo/geoHelper.ts ***!
          \*****************************************/
        /*! exports provided: GeoHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoHelper", function () { return GeoHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _turf_turf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/turf */ "./node_modules/@turf/turf/turf.min.js");
            /* harmony import */ var _turf_turf__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(_turf_turf__WEBPACK_IMPORTED_MODULE_1__);
            /* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../helper */ "./src/app/common/helper.ts");
            var GeoHelper = /** @class */ (function () {
                function GeoHelper() {
                }
                ///**
                // * Get the distance between two coordinates.
                // * @param start Starting coordinates.
                // * @param end Ending coordinates.
                // * @param unit Unit of distance returned, defaults to Km.
                // * @returns The distance between two coordinates.
                // */
                //static distance(start: LatLng, end: LatLng, unit: string = 'km'): number {
                //    const startValid: Error = this.validateCoordinates(start);
                //    if (startValid instanceof Error) { throw new Error('Start coordinates: ' + startValid.message); }
                //    const endValid: Error = this.validateCoordinates(end);
                //    if (endValid instanceof Error) { throw new Error('End coordinates: ' + endValid.message); }
                //    const radius: number = (unit.toLowerCase() === 'miles') ? 3963 : 6371;
                //    const dLat: number = this.toRad(end.lat - start.lat);
                //    const dLon: number = this.toRad(end.lng - start.lng);
                //    const lat1: number = this.toRad(start.lat);
                //    const lat2: number = this.toRad(end.lat);
                //    const a: number = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                //        Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
                //    const c: number = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                //    return (radius * c);
                //}
                //static toRad(degrees: number): number {
                //    return (degrees * Math.PI / 180);
                //}
                GeoHelper.validateCoordinates = function (coordinates) {
                    var error = [];
                    if (coordinates.lat > 90) {
                        error.push('Your latitude is greater than 90°');
                    }
                    if (coordinates.lat < -90) {
                        error.push('Your latitude is less than -90°');
                    }
                    if (coordinates.lng > 180) {
                        error.push('Your longitude is greater than 180°');
                    }
                    if (coordinates.lng < -180) {
                        error.push('Your longitude is less than -180°');
                    }
                    if (error.length !== 0) {
                        return new Error(error.join(' '));
                    }
                };
                GeoHelper.convertToPosition = function (lngLat) {
                    if (lngLat == null)
                        return null;
                    return { lng: lngLat[0], lat: lngLat[1] };
                };
                GeoHelper.getBrowserLocation = function (defaultLatLng) {
                    var options = { enableHighAccuracy: true, maximumAge: 75000 };
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(function (position) {
                            return { lat: position.coords.latitude, lng: position.coords.longitude };
                        });
                    }
                    else {
                        return defaultLatLng;
                    }
                    return defaultLatLng;
                };
                //getClusterCentroid(cluster: Cluster): Position {
                //    if (0 === cluster.points.length) {
                //        return cluster.centroid;
                //    }
                //    const centroid = cluster.points[0].concat();
                //    for (let i = 1; i < cluster.points.length; i++) {
                //        for (let d = 0; d < centroid.length; d++) {
                //            centroid[d] += cluster.points[i][d];
                //        }
                //    }
                //    for (let d = 0; d < centroid.length; d++) {
                //        centroid[d] /= cluster.points.length;
                //    }
                //    return centroid;
                //}
                //static getCentroid(points: Position[]): Position {
                //    const centroid = points[0].concat();
                //    for (let i = 1; i < points.length; i++) {
                //        for (let d = 0; d < centroid.length; d++) {
                //            centroid[d] += points[i][d];
                //        }
                //    }
                //    for (let d = 0; d < centroid.length; d++) {
                //        centroid[d] /= points.length;
                //    }
                //    return centroid;
                //}
                /**
                * Get the distance between two coordinates in Kilometers.
                * @param start Starting coordinates.
                * @param end Ending coordinates.
                * @returns The distance between two coordinates.
                */
                GeoHelper.distance = function (start, end) {
                    var from = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["point"](start);
                    var to = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["point"](end);
                    return _turf_turf__WEBPACK_IMPORTED_MODULE_1__["distance"](from, to, { units: "kilometers" });
                };
                GeoHelper.getLength = function (points) {
                    var line = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineString"](points);
                    var length = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["length"](line, { units: 'kilometers' });
                    return length;
                };
                GeoHelper.polygonCenter = function (polygon) {
                    var turfPolygon = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["polygon"](polygon.coordinates);
                    var centroid = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["centroid"](turfPolygon);
                    return centroid.geometry.coordinates;
                };
                GeoHelper.center = function (geoNodes) {
                    var featureCollection = GeoHelper.getFeatureCollection(geoNodes);
                    var center = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["center"](featureCollection);
                    return center.geometry.coordinates;
                };
                GeoHelper.clustersKmeans = function (geoNodes, numberOfClusters, level, levelName) {
                    var featureCollection = GeoHelper.getFeatureCollection(geoNodes);
                    var clustered = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["clustersKmeans"](featureCollection, { numberOfClusters: numberOfClusters });
                    var tempClusters = new Array();
                    _turf_turf__WEBPACK_IMPORTED_MODULE_1__["clusterEach"](clustered, 'cluster', function (cluster, clusterValue, currentIndex) {
                        var points = [];
                        var center = null;
                        var connections = 0;
                        cluster.features.forEach(function (x) {
                            center = x.properties.centroid;
                            connections += x.properties.connections;
                            points.push({ id: x.properties.id, level: x.properties.level, coordinates: x.geometry.coordinates, connections: x.properties.connections, children: x.properties.children });
                        });
                        tempClusters.push({ id: _helper__WEBPACK_IMPORTED_MODULE_2__["Helper"].generateObjectId(), level: level, levelName: levelName, coordinates: center, connections: connections, children: points });
                    });
                    return tempClusters;
                };
                GeoHelper.getPointAtDistance = function (points, distance) {
                    var line = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineString"](points);
                    var along = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["along"](line, distance, { units: "kilometers" });
                    return along.geometry.coordinates;
                };
                GeoHelper.getPointsAtDistance = function (points, distance) {
                    var intervalPoints = new Array();
                    var line = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineString"](points);
                    var chunk = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineChunk"](line, distance, { units: "kilometers" });
                    //Add first point
                    intervalPoints.push(chunk.features[0].geometry.coordinates[0]);
                    //Add last points
                    chunk.features.forEach(function (x) {
                        var lIndex = x.geometry.coordinates.length - 1;
                        intervalPoints.push(x.geometry.coordinates[lIndex]);
                    });
                    return intervalPoints;
                };
                GeoHelper.lineChunk = function (points, distance) {
                    var intervalPoints = new Array();
                    var line = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineString"](points);
                    var chunk = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineChunk"](line, distance, { units: "kilometers" });
                    //Add last points
                    chunk.features.forEach(function (x) {
                        intervalPoints.push(x.geometry.coordinates);
                    });
                    return intervalPoints;
                };
                GeoHelper.cleanLineCoordinates = function (points) {
                    var line = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineString"](points);
                    return _turf_turf__WEBPACK_IMPORTED_MODULE_1__["cleanCoords"](line).geometry.coordinates;
                };
                GeoHelper.cleanMultiPointCoordinates = function (points) {
                    var multiPoint = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["multiPoint"](points);
                    return _turf_turf__WEBPACK_IMPORTED_MODULE_1__["cleanCoords"](multiPoint).geometry.coordinates;
                };
                GeoHelper.pointToLineDistance = function (point, line) {
                    var distance = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["pointToLineDistance"](point, line, { units: 'kilometers' });
                    return distance;
                };
                GeoHelper.nearestPointOnLine = function (point, line) {
                    var lineStr = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["lineString"](line);
                    var nearestPoint = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["nearestPointOnLine"](lineStr, point, { units: 'kilometers' });
                    return nearestPoint.geometry.coordinates;
                };
                GeoHelper.nearestPoint = function (point, geoNodes) {
                    var featureCollection = GeoHelper.getFeatureCollection(geoNodes);
                    var nearestPoint = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["nearestPoint"](point, featureCollection);
                    return geoNodes.find(function (x) { return x.id == nearestPoint.properties.id; });
                };
                GeoHelper.nearestPoint2 = function (point, points) {
                    var features = new Array();
                    points.forEach(function (x) { features.push(_turf_turf__WEBPACK_IMPORTED_MODULE_1__["point"](x)); });
                    var featureCollection = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["featureCollection"](features);
                    var nearestPoint = _turf_turf__WEBPACK_IMPORTED_MODULE_1__["nearestPoint"](point, featureCollection);
                    return nearestPoint.geometry.coordinates;
                };
                GeoHelper.getFeatureCollection = function (geoNodes) {
                    var features = new Array();
                    geoNodes.forEach(function (x) { features.push(_turf_turf__WEBPACK_IMPORTED_MODULE_1__["point"](x.coordinates, { 'id': x.id, 'level': x.level, 'connections': x.connections, 'children': x.children })); });
                    return _turf_turf__WEBPACK_IMPORTED_MODULE_1__["featureCollection"](features);
                };
                return GeoHelper;
            }());
            /***/ 
        }),
        /***/ "./src/app/common/geo/geoNode.ts": 
        /*!***************************************!*\
          !*** ./src/app/common/geo/geoNode.ts ***!
          \***************************************/
        /*! exports provided: GeoNode, Segment */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoNode", function () { return GeoNode; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Segment", function () { return Segment; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var GeoNode = /** @class */ (function () {
                function GeoNode(id, coordinates) {
                    //if (id == null || id == "")
                    //    id = Helper.generateObjectId();
                    this.coordinates = coordinates;
                }
                return GeoNode;
            }());
            var Segment = /** @class */ (function () {
                function Segment() {
                }
                return Segment;
            }());
            /***/ 
        }),
        /***/ "./src/app/common/geo/geometry.ts": 
        /*!****************************************!*\
          !*** ./src/app/common/geo/geometry.ts ***!
          \****************************************/
        /*! exports provided: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Point", function () { return Point; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiPoint", function () { return MultiPoint; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineString", function () { return LineString; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiLineString", function () { return MultiLineString; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Polygon", function () { return Polygon; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiPolygon", function () { return MultiPolygon; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var Point = /** @class */ (function () {
                function Point(coordinates) {
                    this.type = "Point";
                    this.coordinates = coordinates;
                }
                return Point;
            }());
            var MultiPoint = /** @class */ (function () {
                function MultiPoint(coordinates) {
                    this.type = "MultiPoint";
                    this.coordinates = coordinates;
                }
                return MultiPoint;
            }());
            var LineString = /** @class */ (function () {
                function LineString(coordinates) {
                    this.type = "LineString";
                    this.coordinates = coordinates;
                }
                return LineString;
            }());
            var MultiLineString = /** @class */ (function () {
                function MultiLineString() {
                    this.type = "MultiLineString";
                }
                return MultiLineString;
            }());
            var Polygon = /** @class */ (function () {
                function Polygon(coordinates) {
                    this.type = "Polygon";
                    this.coordinates = coordinates;
                }
                return Polygon;
            }());
            var MultiPolygon = /** @class */ (function () {
                function MultiPolygon(coordinates) {
                    this.type = "MultiPolygon";
                    this.coordinates = coordinates;
                }
                return MultiPolygon;
            }());
            //export enum GeoJsonObjectType {
            //    Feature = 0,
            //    FeatureCollection = 1,
            //    GeometryCollection = 2,
            //    LineString = 3,
            //    MultiLineString = 4,
            //    MultiPoint = 5,
            //    MultiPolygon = 6,
            //    Point = 7,
            //    Polygon = 8
            //}
            /***/ 
        }),
        /***/ "./src/app/common/geo/googleMapsHelper.ts": 
        /*!************************************************!*\
          !*** ./src/app/common/geo/googleMapsHelper.ts ***!
          \************************************************/
        /*! exports provided: GMapsHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GMapsHelper", function () { return GMapsHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _drawingMode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drawingMode */ "./src/app/common/geo/drawingMode.ts");
            /* harmony import */ var _geoHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./geoHelper */ "./src/app/common/geo/geoHelper.ts");
            var GMapsHelper = /** @class */ (function () {
                function GMapsHelper() {
                }
                GMapsHelper.initializeMap = function (mapElementId, mapCenter, zoom, maxZoom) {
                    if (mapCenter === null || mapCenter === "")
                        mapCenter = _geoHelper__WEBPACK_IMPORTED_MODULE_2__["GeoHelper"].getBrowserLocation({ lat: 18.5245649, lng: 73.7228783 });
                    var mapOptions = {
                        zoom: zoom,
                        maxZoom: maxZoom,
                        center: mapCenter,
                        fullscreenControl: false,
                        zoomControl: true,
                        zoomControlOptions: {
                            position: google.maps.ControlPosition.LEFT_BOTTOM
                        },
                        controlSize: 30,
                        mapTypeControl: false,
                        scaleControl: true,
                        streetViewControl: false,
                        rotateControl: true,
                        //mapTypeControlOptions: {
                        //    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                        //    position: google.maps.ControlPosition.LEFT_BOTTOM
                        //},
                        styles: [
                            {
                                "featureType": "water",
                                "stylers": [
                                    { "saturation": 43 },
                                    { "lightness": -11 },
                                    { "hue": "#0088ff" }
                                ]
                            },
                            {
                                "featureType": "road",
                                "elementType": "geometry.fill",
                                "stylers": [
                                    { "hue": "#ff0000" },
                                    { "saturation": -100 },
                                    { "lightness": 99 }
                                ]
                            },
                            {
                                "featureType": "road",
                                "elementType": "geometry.stroke",
                                "stylers": [
                                    { "color": "#808080" },
                                    { "lightness": 54 }
                                ]
                            },
                            {
                                "featureType": "landscape.man_made",
                                "elementType": "geometry.fill",
                                "stylers": [
                                    { "color": "#ece2d9" }
                                ]
                            },
                            {
                                "featureType": "poi.park",
                                "elementType": "geometry.fill",
                                "stylers": [
                                    { "color": "#ccdca1" }
                                ]
                            },
                            {
                                "featureType": "road",
                                "elementType": "labels.text.fill",
                                "stylers": [
                                    { "color": "#767676" }
                                ]
                            },
                            {
                                "featureType": "road",
                                "elementType": "labels.text.stroke",
                                "stylers": [
                                    { "color": "#ffffff" }
                                ]
                            },
                            {
                                "featureType": "poi",
                                "stylers": [
                                    { "visibility": "off" }
                                ]
                            },
                            {
                                "featureType": "landscape.natural",
                                "elementType": "geometry.fill",
                                "stylers": [
                                    { "visibility": "on" },
                                    { "color": "#b8cb93" }
                                ]
                            },
                            {
                                "featureType": "poi.park",
                                "stylers": [
                                    { "visibility": "on" }
                                ]
                            },
                            {
                                "featureType": "poi.sports_complex",
                                "stylers": [
                                    { "visibility": "on" }
                                ]
                            },
                            {
                                "featureType": "poi.medical",
                                "stylers": [
                                    { "visibility": "on" }
                                ]
                            },
                            {
                                "featureType": "poi.business",
                                "stylers": [
                                    { "visibility": "simplified" }
                                ]
                            }
                        ]
                    };
                    // Get all html elements for map
                    var mapElement = document.getElementById(mapElementId);
                    // Create the Google Map using elements
                    return new google.maps.Map(mapElement, mapOptions);
                };
                GMapsHelper.drawingManagerTool = function (map, strDrawingMode, drawingControlModes, drawingOption) {
                    var drawingManager = new google.maps.drawing.DrawingManager();
                    var drawingMode = GMapsHelper.getDrawingMode(strDrawingMode);
                    drawingManager.setOptions({
                        drawingMode: drawingMode,
                        drawingControl: true,
                        drawingControlOptions: {
                            position: google.maps.ControlPosition.TOP_LEFT,
                            drawingModes: drawingControlModes
                        },
                        options: drawingOption
                    });
                    drawingManager.setMap(map);
                    return drawingManager;
                };
                GMapsHelper.addListener = function (entity, clickType, callback) {
                    google.maps.event.addListener(entity, clickType, function (event) {
                        if (typeof callback === "function")
                            callback(event);
                    });
                };
                GMapsHelper.getDrawingMode = function (drawingMode) {
                    switch (drawingMode) {
                        case _drawingMode__WEBPACK_IMPORTED_MODULE_1__["DrawingMode"].POLYGON:
                            return google.maps.drawing.OverlayType.POLYGON;
                        case _drawingMode__WEBPACK_IMPORTED_MODULE_1__["DrawingMode"].CIRCLE:
                            return google.maps.drawing.OverlayType.CIRCLE;
                        case _drawingMode__WEBPACK_IMPORTED_MODULE_1__["DrawingMode"].POLYLINE:
                            return google.maps.drawing.OverlayType.POLYLINE;
                        case _drawingMode__WEBPACK_IMPORTED_MODULE_1__["DrawingMode"].RECTANGLE:
                            return google.maps.drawing.OverlayType.RECTANGLE;
                        case _drawingMode__WEBPACK_IMPORTED_MODULE_1__["DrawingMode"].MARKER:
                            return google.maps.drawing.OverlayType.MARKER;
                        default:
                    }
                };
                GMapsHelper.createPolygon = function (coordinates, polyOptions) {
                    var tempCoordinates = GMapsHelper.getLatLngsFromPolygon(coordinates);
                    return new google.maps.Polygon({
                        paths: tempCoordinates,
                        strokeWeight: polyOptions.strokeWeight,
                        fillOpacity: polyOptions.fillOpacity,
                        editable: polyOptions.editable,
                        draggable: polyOptions.draggable
                    });
                };
                GMapsHelper.getLatLngsFromPolygon = function (coordinates) {
                    var tempCoordinates = [];
                    coordinates[0].forEach(function (x) { tempCoordinates.push({ lng: x[0], lat: x[1] }); });
                    tempCoordinates.splice(tempCoordinates.length - 1, 1);
                    return tempCoordinates;
                };
                GMapsHelper.setBounds = function (latlngs, map) {
                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0; i < latlngs.length; i++) {
                        bounds.extend(latlngs[i]);
                    }
                    map.fitBounds(bounds);
                };
                GMapsHelper.getLatLng = function (latlng) {
                    return new google.maps.LatLng(latlng[0], latlng[1]);
                };
                GMapsHelper.boundsToPolygon = function (bounds) {
                    var northEastLatLngs = [];
                    var southWestLatLngs = [];
                    var northWestLatLngs = [];
                    var southEastLatLngs = [];
                    northEastLatLngs[0] = bounds.getNorthEast().lng();
                    northEastLatLngs[1] = bounds.getNorthEast().lat();
                    northWestLatLngs[0] = bounds.getSouthWest().lng();
                    northWestLatLngs[1] = bounds.getNorthEast().lat();
                    southWestLatLngs[0] = bounds.getSouthWest().lng();
                    southWestLatLngs[1] = bounds.getSouthWest().lat();
                    southEastLatLngs[0] = bounds.getNorthEast().lng();
                    southEastLatLngs[1] = bounds.getSouthWest().lat();
                    var tempCoordinates = [];
                    tempCoordinates.push(northEastLatLngs);
                    tempCoordinates.push(northWestLatLngs);
                    tempCoordinates.push(southWestLatLngs);
                    tempCoordinates.push(southEastLatLngs);
                    tempCoordinates.push(northEastLatLngs);
                    return [tempCoordinates];
                };
                GMapsHelper.pathArrayToPolygon = function (pathArray) {
                    var tempCoordinates = [];
                    pathArray.forEach(function (x) { tempCoordinates.push([x.lng(), x.lat()]); });
                    tempCoordinates.push([pathArray[0].lng(), pathArray[0].lat()]);
                    return [tempCoordinates];
                };
                GMapsHelper.getPointsAtDistance = function (points, distance) {
                    var path = [];
                    points.forEach(function (x) { path.push({ lng: x[0], lat: x[1] }); });
                    return new google.maps.Polyline({
                        path: path
                    }).GetPointsAtDistance(distance);
                };
                return GMapsHelper;
            }());
            /***/ 
        }),
        /***/ "./src/app/common/helper.ts": 
        /*!**********************************!*\
          !*** ./src/app/common/helper.ts ***!
          \**********************************/
        /*! exports provided: Helper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Helper", function () { return Helper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var Helper = /** @class */ (function () {
                function Helper() {
                }
                Helper.prototype.showAlertMessage = function (message, alertType) {
                    if (alertType == "error") {
                        toastr.options = {
                            "closeButton": true,
                            "timeOut": 3000,
                            "preventDuplicates": true,
                            "extendedTimeOut": 1000,
                            "positionClass": "toast-top-center",
                        };
                        toastr.error(message, "Error").attr('style', 'width: 400px !important');
                    }
                    else if (alertType == "success") {
                        toastr.options = {
                            "closeButton": false,
                            "timeOut": 3000,
                            "extendedTimeOut": 1000,
                            "positionClass": "toast-top-center",
                        };
                        toastr.success(message).attr('style', 'width: 400px !important');
                    }
                    else if (alertType == "info") {
                        toastr.options = {
                            "closeButton": false,
                            "timeOut": 5000,
                            "extendedTimeOut": 1000,
                            "positionClass": "toast-top-center",
                        };
                        toastr.info(message).attr('style', 'width: 400px !important');
                    }
                };
                Helper.prototype.formatBytes = function (bytes, decimals) {
                    if (bytes == 0)
                        return '0 Bytes';
                    var k = 1024, dm = decimals || 2, sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'], i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
                };
                Helper.prototype.popupCenter = function (url, title, w, h) {
                    // Fixes dual-screen position Most browsers Firefox
                    var dualScreenLeft = window.screenLeft;
                    var dualScreenTop = window.screenTop;
                    var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
                    var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
                    var left = ((width / 2) - (w / 2)) + dualScreenLeft;
                    var top = ((height / 2) - (h / 2)) + dualScreenTop;
                    var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
                    // Puts focus on the newWindow
                    if (window.focus) {
                        newWindow.focus();
                    }
                };
                Helper.prototype.getErrorMessagesText = function (errorMessages) {
                    var e_1, _a;
                    var li = "";
                    try {
                        for (var errorMessages_1 = __values(errorMessages), errorMessages_1_1 = errorMessages_1.next(); !errorMessages_1_1.done; errorMessages_1_1 = errorMessages_1.next()) {
                            var message = errorMessages_1_1.value;
                            li += "<li>" + message + "</li>";
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (errorMessages_1_1 && !errorMessages_1_1.done && (_a = errorMessages_1.return)) _a.call(errorMessages_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    return "<ul>" + li + "</li>";
                };
                Helper.prototype.compare = function (a, b, isAsc) {
                    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);
                };
                Helper.prototype.getLastMonths = function (count) {
                    var monthFull = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                    var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    var months = [];
                    var d = new Date();
                    for (var i = 0; i < count; i++) {
                        months.push({ "name": monthFull[d.getMonth()], "value": monthShort[d.getMonth()] });
                        d.setMonth(d.getMonth() - 1);
                    }
                    return months;
                };
                Helper.prototype.getLastDay = function (year, month) {
                    var monthIndex = this.getMonthIndex(month);
                    return new Date(year, monthIndex + 1, 0).getDate();
                };
                Helper.prototype.getMonthIndex = function (month) {
                    var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    var monthIndex = monthShort.findIndex(function (x) { return x == month; });
                    return monthIndex;
                };
                Helper.prototype.addDays = function (date, days) {
                    var result = new Date(date);
                    result.setDate(result.getDate() + days);
                    return result;
                };
                Helper.prototype.daysBetween = function (startDate, endDate) {
                    var millisecondsPerDay = 1000 * 60 * 60 * 24;
                    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
                    var endDateUTC = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
                    return Math.floor((endDateUTC - startDateUTC) / millisecondsPerDay);
                };
                Helper.getChunks = function (items, chunkSize) {
                    var index = 0;
                    var arrayLength = items.length;
                    var group = [];
                    for (index = 0; index < arrayLength; index += chunkSize) {
                        var chunk = items.slice(index, index + chunkSize);
                        group.push(chunk);
                    }
                    return group;
                };
                Helper.prototype.search = function (selectedField, searchText, conditionOperator) {
                    var searchFilter = null;
                    if (searchText.trim() != "") {
                        searchFilter = new _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SearchFilter"]();
                        searchFilter.conditionOperator = conditionOperator;
                        searchFilter.filters = new Array();
                        if (selectedField.dataType == 'date') {
                            searchFilter.filters.push({
                                propertyName: selectedField.field,
                                operator: _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["Operator"].greaterThanOrEqual,
                                value: new Date(searchText).toISOString(),
                                caseSensitive: false
                            });
                            searchFilter.filters.push({
                                propertyName: selectedField.field,
                                operator: _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["Operator"].lessThan,
                                value: this.addDays(new Date(searchText), 1).toISOString(),
                                caseSensitive: false
                            });
                        }
                        else {
                            searchFilter.filters.push({
                                propertyName: selectedField.field,
                                operator: _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["Operator"].contains,
                                value: searchText,
                                caseSensitive: false
                            });
                        }
                    }
                    return searchFilter;
                };
                Helper.prototype.advancedSearch = function (searchFields, conditionOperator) {
                    var searchFilter = new _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SearchFilter"]();
                    searchFilter.conditionOperator = conditionOperator;
                    searchFilter.filters = new Array();
                    for (var i = 0; i < searchFields.length; i++) {
                        if (searchFields[i].value) {
                            if (searchFields[i].dataType == 'date') {
                                searchFilter.filters.push({
                                    propertyName: searchFields[i].field,
                                    operator: _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["Operator"].greaterThanOrEqual,
                                    value: new Date(searchFields[i].value).toISOString(),
                                    caseSensitive: false
                                });
                                searchFilter.filters.push({
                                    propertyName: searchFields[i].field,
                                    operator: _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["Operator"].lessThan,
                                    value: this.addDays(new Date(searchFields[i].value), 1).toISOString(),
                                    caseSensitive: false
                                });
                            }
                            else {
                                searchFilter.filters.push({
                                    propertyName: searchFields[i].field,
                                    operator: _models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["Operator"].contains,
                                    value: searchFields[i].value,
                                    caseSensitive: false
                                });
                            }
                            //let operator = this.searchFields[i].dataType == 'date' ? Operator.equals : Operator.contains
                            //this.searchFilter.filters.push({
                            //    propertyName: this.searchFields[i].field,
                            //    operator: operator,
                            //    value: this.searchFields[i].value,
                            //    caseSensitive: false
                            //});
                        }
                    }
                    return searchFilter;
                };
                Helper.prototype.generateTree = function (arr, parentId) {
                    var out = [];
                    for (var i in arr) {
                        arr[i].label = arr[i].name;
                        if (arr[i].parentId == parentId) {
                            var children = this.generateTree(arr, arr[i].id);
                            if (children.length) {
                                arr[i].children = children;
                            }
                            out.push(arr[i]);
                        }
                    }
                    return out;
                };
                Helper.generateObjectId = function () {
                    var timestamp = (new Date().getTime() / 1000 | 0).toString(16);
                    return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {
                        return (Math.random() * 16 | 0).toString(16);
                    }).toLowerCase();
                };
                Helper.prototype.generateTreeTable = function (arr, parentId, expanded) {
                    var out = [];
                    for (var i in arr) {
                        arr[i].label = arr[i].name;
                        arr[i].data = {
                            "name": arr[i].name
                        };
                        arr[i].expanded = expanded;
                        if (arr[i].parentId == parentId) {
                            var children = this.generateTree(arr, arr[i].id);
                            if (children.length) {
                                arr[i].children = children;
                            }
                            out.push(arr[i]);
                        }
                    }
                    return out;
                };
                Helper.prototype.findNode = function (id, currentNode) {
                    var stack = [], node, ii;
                    stack.push(currentNode);
                    while (stack.length > 0) {
                        node = stack.pop();
                        if (node.id == id) {
                            return node;
                        }
                        else if (node.children && node.children.length) {
                            for (ii = 0; ii < node.children.length; ii += 1) {
                                stack.push(node.children[ii]);
                            }
                        }
                    }
                    return null;
                };
                Helper.prototype.log = function (logEntity, logType, message) {
                    logEntity.log = logEntity.log + '\n' + new Date() + " [" + logType + "] " + message;
                };
                Helper.prototype.isDate = function (value) {
                    return (null != value) && !isNaN(value) && ("undefined" !== typeof value.getDate);
                };
                Helper.formatDate = function (value) {
                    var dd = value.getDate();
                    var mm = value.getMonth() + 1;
                    var yyyy = value.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    return dd + '/' + mm + '/' + yyyy;
                };
                Helper.groupBy = function (data, columnName) {
                    //var groupedData;
                    //data.reduce(function (result, current) {
                    //    var currentVal = current[columnName];
                    //    result[currentVal] = result[currentVal] || [];
                    //    result[currentVal].push(current);
                    //    groupedData = result;
                    //}, {});
                    //return groupedData;
                    var group = data.reduce(function (r, a) {
                        r[a[columnName]] = __spread(r[a[columnName]] || [], [a]);
                        return r;
                    }, {});
                    var tempGroups = [];
                    for (var i in group) {
                        tempGroups.push(group[i]);
                    }
                    return tempGroups;
                };
                return Helper;
            }());
            Helper = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], Helper);
            /***/ 
        }),
        /***/ "./src/app/common/interceptors/cacheInterceptor.ts": 
        /*!*********************************************************!*\
          !*** ./src/app/common/interceptors/cacheInterceptor.ts ***!
          \*********************************************************/
        /*! exports provided: CacheInterceptor */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheInterceptor", function () { return CacheInterceptor; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            var CacheInterceptor = /** @class */ (function () {
                function CacheInterceptor() {
                }
                CacheInterceptor.prototype.intercept = function (req, next) {
                    var httpRequest = req.clone({
                        headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]({
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache',
                            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT'
                        })
                    });
                    return next.handle(httpRequest);
                };
                return CacheInterceptor;
            }());
            CacheInterceptor = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], CacheInterceptor);
            /***/ 
        }),
        /***/ "./src/app/common/models/dbBaseEntity.ts": 
        /*!***********************************************!*\
          !*** ./src/app/common/models/dbBaseEntity.ts ***!
          \***********************************************/
        /*! exports provided: DbBaseEntity */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DbBaseEntity", function () { return DbBaseEntity; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var DbBaseEntity = /** @class */ (function () {
                function DbBaseEntity() {
                }
                return DbBaseEntity;
            }());
            /***/ 
        }),
        /***/ "./src/app/common/models/document.ts": 
        /*!*******************************************!*\
          !*** ./src/app/common/models/document.ts ***!
          \*******************************************/
        /*! exports provided: Document */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Document", function () { return Document; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var Document = /** @class */ (function () {
                function Document() {
                }
                return Document;
            }());
            /***/ 
        }),
        /***/ "./src/app/common/models/loginUser.ts": 
        /*!********************************************!*\
          !*** ./src/app/common/models/loginUser.ts ***!
          \********************************************/
        /*! exports provided: LoginUser */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginUser", function () { return LoginUser; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var LoginUser = /** @class */ (function () {
                function LoginUser() {
                }
                return LoginUser;
            }());
            /***/ 
        }),
        /***/ "./src/app/common/models/paginationRequest.ts": 
        /*!****************************************************!*\
          !*** ./src/app/common/models/paginationRequest.ts ***!
          \****************************************************/
        /*! exports provided: PaginationRequest, SearchFilter, ConditionOperator, Filter, Operator, Order, SortOrder */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaginationRequest", function () { return PaginationRequest; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchFilter", function () { return SearchFilter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConditionOperator", function () { return ConditionOperator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filter", function () { return Filter; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Operator", function () { return Operator; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Order", function () { return Order; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SortOrder", function () { return SortOrder; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var PaginationRequest = /** @class */ (function () {
                function PaginationRequest() {
                }
                return PaginationRequest;
            }());
            var SearchFilter = /** @class */ (function () {
                function SearchFilter() {
                }
                return SearchFilter;
            }());
            var ConditionOperator;
            (function (ConditionOperator) {
                ConditionOperator[ConditionOperator["AND"] = 0] = "AND";
                ConditionOperator[ConditionOperator["OR"] = 1] = "OR";
            })(ConditionOperator || (ConditionOperator = {}));
            var Filter = /** @class */ (function () {
                function Filter() {
                }
                return Filter;
            }());
            var Operator;
            (function (Operator) {
                Operator[Operator["equals"] = 0] = "equals";
                Operator[Operator["greaterThan"] = 1] = "greaterThan";
                Operator[Operator["lessThan"] = 2] = "lessThan";
                Operator[Operator["greaterThanOrEqual"] = 3] = "greaterThanOrEqual";
                Operator[Operator["lessThanOrEqual"] = 4] = "lessThanOrEqual";
                Operator[Operator["contains"] = 5] = "contains";
                Operator[Operator["startsWith"] = 6] = "startsWith";
                Operator[Operator["endsWith"] = 7] = "endsWith";
                Operator[Operator["notEquals"] = 8] = "notEquals";
            })(Operator || (Operator = {}));
            var Order = /** @class */ (function () {
                function Order() {
                }
                return Order;
            }());
            var SortOrder;
            (function (SortOrder) {
                SortOrder[SortOrder["ascending"] = 1] = "ascending";
                SortOrder[SortOrder["descending"] = -1] = "descending";
                SortOrder[SortOrder["noSort"] = 0] = "noSort";
            })(SortOrder || (SortOrder = {}));
            /***/ 
        }),
        /***/ "./src/app/common/models/supplier.ts": 
        /*!*******************************************!*\
          !*** ./src/app/common/models/supplier.ts ***!
          \*******************************************/
        /*! exports provided: Supplier */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Supplier", function () { return Supplier; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var Supplier = /** @class */ (function () {
                function Supplier() {
                }
                return Supplier;
            }());
            /***/ 
        }),
        /***/ "./src/app/components/cf-group/cf-group.ts": 
        /*!*************************************************!*\
          !*** ./src/app/components/cf-group/cf-group.ts ***!
          \*************************************************/
        /*! exports provided: CustomFieldsGroup */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomFieldsGroup", function () { return CustomFieldsGroup; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            var CustomFieldsGroup = /** @class */ (function () {
                function CustomFieldsGroup(helper) {
                    this.helper = helper;
                    this.customFields = new Array();
                    this.accordionId = "accordion";
                }
                CustomFieldsGroup.prototype.ngOnInit = function () {
                    this.customFieldGroups = this.getCustomFieldGroups();
                };
                CustomFieldsGroup.prototype.getCustomFieldGroups = function () {
                    var customFieldGroups = null;
                    if (this.customFields && this.customFields.length > 0) {
                        customFieldGroups = [];
                        var customFields = this.customFields;
                        //let groups = Helper.groupBy(customFields, 'category');
                        //for (var i in groups) {
                        //    customFieldGroups.push(groups[i]);
                        //}
                        customFieldGroups = _common_helper__WEBPACK_IMPORTED_MODULE_2__["Helper"].groupBy(customFields, 'category');
                    }
                    return customFieldGroups;
                };
                return CustomFieldsGroup;
            }());
            CustomFieldsGroup.ctorParameters = function () { return [
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_2__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], CustomFieldsGroup.prototype, "customFields", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], CustomFieldsGroup.prototype, "accordionId", void 0);
            CustomFieldsGroup = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'cf-group',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./cf-group.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/cf-group/cf-group.html")).default
                })
            ], CustomFieldsGroup);
            /***/ 
        }),
        /***/ "./src/app/components/data-table/dt-pagination.ts": 
        /*!********************************************************!*\
          !*** ./src/app/components/data-table/dt-pagination.ts ***!
          \********************************************************/
        /*! exports provided: DTPagination */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTPagination", function () { return DTPagination; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            var DTPagination = /** @class */ (function () {
                function DTPagination() {
                    this.totalPages = 1;
                    this.onPageSizeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this.onPageChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this.pageSize = 10;
                    this.currentPage = 1;
                }
                DTPagination.prototype.ngOnInit = function () {
                    this.pageSize = 10;
                    this.currentPage = 1;
                };
                DTPagination.prototype.pageSizeChange = function () {
                    this.onPageSizeChange.emit(this.pageSize);
                };
                DTPagination.prototype.setPage = function (page) {
                    if (page < 1 || page > this.totalPages) {
                        return;
                    }
                    this.currentPage = page;
                    this.onPageChange.emit(this.currentPage);
                };
                return DTPagination;
            }());
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DTPagination.prototype, "totalPages", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()
            ], DTPagination.prototype, "onPageSizeChange", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()
            ], DTPagination.prototype, "onPageChange", void 0);
            DTPagination = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dt-pagination',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dt-pagination.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/data-table/dt-pagination.html")).default
                })
            ], DTPagination);
            /***/ 
        }),
        /***/ "./src/app/components/data-table/dt-search.ts": 
        /*!****************************************************!*\
          !*** ./src/app/components/data-table/dt-search.ts ***!
          \****************************************************/
        /*! exports provided: DTSearch */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DTSearch", function () { return DTSearch; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            var DTSearch = /** @class */ (function () {
                function DTSearch(helper) {
                    this.helper = helper;
                    this.searchFields = new Array();
                    this.onSearch = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this.conditionOption = true;
                }
                DTSearch.prototype.ngOnInit = function () {
                    this.selectedField = this.searchFields[0];
                    this.searchText = "";
                };
                DTSearch.prototype.setSearchField = function (searchField) {
                    this.selectedField = searchField;
                    this.searchText = '';
                };
                DTSearch.prototype.search = function () {
                    var conditionOption = this.conditionOption ? _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["ConditionOperator"].AND : _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["ConditionOperator"].OR;
                    this.searchFilter = this.helper.search(this.selectedField, this.searchText, conditionOption);
                    this.searchFields.forEach(function (x) { return x.value = ''; });
                    this.searchText = '';
                    this.populateFilterPills();
                    this.onSearch.emit(this.searchFilter);
                };
                DTSearch.prototype.populateFilterPills = function () {
                    var filters = new Array();
                    this.searchFilter.filters.forEach(function (x) {
                        var index = filters.findIndex(function (y) { return y.propertyName == x.propertyName; });
                        var newValue = x.value;
                        if (newValue.includes('T00:00:00.000Z')) {
                            newValue = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].formatDate(new Date(newValue));
                        }
                        if (index < 0) {
                            filters.push({
                                operator: x.operator,
                                propertyName: x.propertyName,
                                caseSensitive: false,
                                value: newValue
                            });
                        }
                    });
                    this.filterPills = filters;
                };
                DTSearch.prototype.removeFilter = function (index) {
                    if (index >= 0) {
                        var filter_1 = this.searchFilter.filters[index];
                        this.searchFilter.filters = this.searchFilter.filters.filter(function (x) { return x.propertyName != filter_1.propertyName; });
                        this.populateFilterPills();
                        this.onSearch.emit(this.searchFilter);
                    }
                };
                DTSearch.prototype.advancedSearch = function () {
                    var conditionOption = this.conditionOption ? _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["ConditionOperator"].AND : _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["ConditionOperator"].OR;
                    this.searchFilter = this.helper.advancedSearch(this.searchFields, conditionOption);
                    this.searchText = "";
                    this.onSearch.emit(this.searchFilter);
                    this.populateFilterPills();
                };
                DTSearch.prototype.clearSearch = function () {
                    this.searchFilter = this.helper.search(this.selectedField, this.searchText, _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["ConditionOperator"].AND);
                    this.searchFields.forEach(function (x) { return x.value = ''; });
                    this.onSearch.emit(this.searchFilter);
                };
                return DTSearch;
            }());
            DTSearch.ctorParameters = function () { return [
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DTSearch.prototype, "searchFields", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()
            ], DTSearch.prototype, "onSearch", void 0);
            DTSearch = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dt-search',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dt-search.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/components/data-table/dt-search.html")).default
                })
            ], DTSearch);
            /***/ 
        }),
        /***/ "./src/app/dashboard/services/dashboard.service.ts": 
        /*!*********************************************************!*\
          !*** ./src/app/dashboard/services/dashboard.service.ts ***!
          \*********************************************************/
        /*! exports provided: DashboardService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardService", function () { return DashboardService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            var DashboardService = /** @class */ (function () {
                function DashboardService(http) {
                    this.http = http;
                }
                return DashboardService;
            }());
            DashboardService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            DashboardService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], DashboardService);
            /***/ 
        }),
        /***/ "./src/app/dashboard/views/dashboard.ts": 
        /*!**********************************************!*\
          !*** ./src/app/dashboard/views/dashboard.ts ***!
          \**********************************************/
        /*! exports provided: Dashboard */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dashboard", function () { return Dashboard; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _services_dashboard_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/dashboard.service */ "./src/app/dashboard/services/dashboard.service.ts");
            var Dashboard = /** @class */ (function () {
                function Dashboard(dashboardService) {
                    this.dashboardService = dashboardService;
                }
                Dashboard.prototype.ngOnInit = function () {
                    //this.getFormData();
                };
                Dashboard.prototype.getFormData = function () {
                    //$("#ajax-loading").show();
                    //let taskSummarySvc = this.reportsService.getTaskSummary();
                    //let realTimeSummarySvc = this.reportsService.getRealTimeSummary();
                    //forkJoin([taskSummarySvc, realTimeSummarySvc]).subscribe(
                    //   async results => {
                    //      var roles=[]
                    //      if (results[0] && results[0].data) {
                    //         this.taskSummary = results[0].data;
                    //      }
                    //      if (results[1] && results[1].data) {
                    //         //this.eDeliverySummary = results[1].data;
                    //         //this.showRealTimeSummaryChart();
                    //      }
                    //      //await new Promise(resolve => {
                    //      //   setTimeout(() => {
                    //      //      roles = this.accountService.roles;
                    //      //      resolve();
                    //      //   }, 100);
                    //      //});
                    //      var loginUser = this.accountService.loginUser;
                    //      this.userRole = roles.find(x => x.id.toLowerCase() == loginUser.role.toLowerCase());
                    //      $("#ajax-loading").hide();
                    //   },
                    //   error => {
                    //      $("#ajax-loading").hide();
                    //   });
                };
                return Dashboard;
            }());
            Dashboard.ctorParameters = function () { return [
                { type: _services_dashboard_service__WEBPACK_IMPORTED_MODULE_2__["DashboardService"] }
            ]; };
            Dashboard = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dashboard.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/dashboard/views/dashboard.html")).default,
                    providers: [_services_dashboard_service__WEBPACK_IMPORTED_MODULE_2__["DashboardService"]],
                })
            ], Dashboard);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-accessories.ts": 
        /*!*******************************************************!*\
          !*** ./src/app/designs/components/dzn-accessories.ts ***!
          \*******************************************************/
        /*! exports provided: DesignAccessories */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignAccessories", function () { return DesignAccessories; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _accessories_services_accessory_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../accessories/services/accessory.service */ "./src/app/accessories/services/accessory.service.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var DesignAccessories = /** @class */ (function () {
                //designAccessories: any;
                function DesignAccessories(accessoryService) {
                    this.accessoryService = accessoryService;
                    this.accessorySettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["AccessorySettings"]();
                    this.allDesigns = new Array();
                    this.accessoriesMaster = new Array();
                }
                DesignAccessories.prototype.ngOnChanges = function (changes) {
                    if (this.parentEntityType)
                        this.getMasterAccessories(this.parentEntityType);
                };
                DesignAccessories.prototype.getMasterAccessories = function (parentEntityType) {
                    var _this = this;
                    //this.accessorySettings.existingAccessories = null;
                    var paginationRequest = {
                        page: null,
                        pageSize: null,
                        filter: {
                            conditionOperator: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["ConditionOperator"].AND,
                            filters: [{
                                    propertyName: "ParentEntityType",
                                    operator: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["Operator"].equals,
                                    value: parentEntityType.toLowerCase(),
                                    caseSensitive: false
                                }]
                        },
                        order: {
                            orderByProperty: "UpdatedDate",
                            sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].descending
                        }
                    };
                    this.accessoryService.getAccessories(paginationRequest).subscribe(function (resp) {
                        _this.accessoriesMaster = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.accessoriesMaster = resp.data;
                            }
                            else {
                                _this.statusMessage = "There are no registered accessories.";
                            }
                        }
                    }, function (err) {
                        _this.accessoriesMaster = null;
                        _this.statusMessage = "Error fetching accessories.";
                    });
                };
                //fileChangeEvent(event: any) {
                //    var files = event.target.files;
                //    //this.populateDummyData();
                //}
                DesignAccessories.prototype.addAccessory = function () {
                    var _this = this;
                    if (this.accessorySettings.accessories == null)
                        this.accessorySettings.accessories = new Array();
                    var index = this.accessorySettings.accessories.findIndex(function (x) { return x.id == _this.selectedAccessory.id; });
                    if (index == -1)
                        this.accessorySettings.accessories.push(this.selectedAccessory);
                };
                //getName(id: string) {
                //    let accessory = this.accessoriesMaster.find(x => x.id == id);
                //    if (accessory)
                //        return accessory.name;
                //    else
                //        return '';
                //}
                DesignAccessories.prototype.removeAccessory = function (index) {
                    this.accessorySettings.accessories.splice(index, 1);
                };
                return DesignAccessories;
            }());
            DesignAccessories.ctorParameters = function () { return [
                { type: _accessories_services_accessory_service__WEBPACK_IMPORTED_MODULE_3__["AccessoryService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignAccessories.prototype, "accessorySettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignAccessories.prototype, "parentEntityType", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignAccessories.prototype, "allDesigns", void 0);
            DesignAccessories = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-accessories',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-accessories.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-accessories.html")).default
                })
            ], DesignAccessories);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-bom.ts": 
        /*!***********************************************!*\
          !*** ./src/app/designs/components/dzn-bom.ts ***!
          \***********************************************/
        /*! exports provided: DesignBOM */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignBOM", function () { return DesignBOM; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _services_design_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/design.service */ "./src/app/designs/services/design.service.ts");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! xlsx */ "./node_modules/xlsx/xlsx.js");
            /* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_6__);
            /* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
            /* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_7__);
            var DesignBOM = /** @class */ (function () {
                function DesignBOM(route, designService, helper) {
                    this.route = route;
                    this.designService = designService;
                    this.helper = helper;
                    //@Input() public boq: Costing[] = new Array<Costing>();
                    this.boq = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Design"]();
                    this.cableGroups = new Array();
                    this.chamberGroups = new Array();
                    this.ductGroups = new Array();
                    this.odfGroups = new Array();
                    this.poleGroups = new Array();
                    this.splitterGroups = new Array();
                    this.spliceClosureGroups = new Array();
                    this.accessoryGroups = new Array();
                    this.civilworkGroups = new Array();
                    this.cableSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.chamberSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.ductSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.odfSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.poleSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.splitterSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.spliceClosureSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.accessorySummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.civilworkSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.excel = [];
                    this.statusMessage = "";
                    this.title = 'Excel';
                }
                DesignBOM.prototype.ExportTOExcel = function () {
                    var ref_this = jquery__WEBPACK_IMPORTED_MODULE_7__("ul#myNavTabs1 li.active").text();
                    //if (ref_this == "Summary") {
                    var ws = xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].table_to_sheet(this.TABLE.nativeElement);
                    var wb = xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].book_new();
                    var ws1 = xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].table_to_sheet(this.TABLE1.nativeElement);
                    xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].book_append_sheet(wb, ws, 'Sheet1');
                    xlsx__WEBPACK_IMPORTED_MODULE_6__["utils"].book_append_sheet(wb, ws1, 'Sheet2');
                    xlsx__WEBPACK_IMPORTED_MODULE_6__["writeFile"](wb, 'Summary.xlsx');
                    //} else {
                    //    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(this.TABLE1.nativeElement);
                    //    const wb: XLSX.WorkBook = XLSX.utils.book_new();
                    //    XLSX.utils.book_append_sheet(wb, ws, 'Sheet2');
                    //    XLSX.writeFile(wb, 'Details.xlsx');
                    //}
                };
                DesignBOM.prototype.ExportTOKml = function () {
                    var _this = this;
                    this.designService.exportDesign(this.boq.id).subscribe(function (resp) {
                        //this.designs = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                            _this.helper.showAlertMessage(_this.statusMessage, "error");
                        }
                        else {
                            if (resp.data != null) {
                                if (resp.data != "") {
                                    window.location.href = "/Designs/Download?fileName=" + resp.data;
                                }
                            }
                            else {
                                _this.statusMessage = "There are no registered designs.";
                            }
                            // this.getFormData();
                        }
                        jquery__WEBPACK_IMPORTED_MODULE_7__("#ajax-loading").hide();
                    }, function (err) {
                        jquery__WEBPACK_IMPORTED_MODULE_7__("#ajax-loading").hide();
                        //this.designs = null;
                        var msg = "Unable to export designs : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                        _this.statusMessage = "Error export designs.";
                    });
                };
                DesignBOM.prototype.ngOnInit = function () {
                    this.generateBOQ();
                };
                DesignBOM.prototype.ngOnChanges = function (changes) {
                    this.generateBOQ();
                };
                DesignBOM.prototype.reset = function () {
                    this.cableSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.chamberSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.ductSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.odfSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.poleSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.splitterSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.spliceClosureSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.accessorySummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.civilworkSummary = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Costing"]();
                    this.totalMaterialCost = 0;
                    this.totalServiceCost = 0;
                    this.totalCost = 0;
                };
                DesignBOM.prototype.stringify = function (obj) {
                    return JSON.stringify(obj);
                };
                DesignBOM.prototype.generateBOQ = function () {
                    var _this = this;
                    this.reset();
                    if (this.boq.boq == null)
                        return;
                    var cables = this.boq.boq.filter(function (x) { return x.entityType == "Cable"; });
                    this.cableGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(cables, 'level');
                    cables.forEach(function (x) {
                        _this.cableSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.cableSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.cableSummary.quantity += (x.quantity * 1000);
                        _this.cableSummary.units = x.units;
                    });
                    var chambers = this.boq.boq.filter(function (x) { return x.entityType == "Chamber"; });
                    this.chamberGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(chambers, 'level');
                    chambers.forEach(function (x) {
                        _this.chamberSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.chamberSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.chamberSummary.quantity += x.quantity;
                        _this.chamberSummary.units = x.units;
                    });
                    var ducts = this.boq.boq.filter(function (x) { return x.entityType == "Duct"; });
                    this.ductGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(ducts, 'level');
                    ducts.forEach(function (x) {
                        _this.ductSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.ductSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.ductSummary.quantity += x.quantity;
                        _this.ductSummary.units = x.units;
                    });
                    var odfs = this.boq.boq.filter(function (x) { return x.entityType == "ODF"; });
                    this.odfGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(odfs, 'level');
                    odfs.forEach(function (x) {
                        _this.odfSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.odfSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.odfSummary.quantity += x.quantity;
                        _this.odfSummary.units = x.units;
                    });
                    var poles = this.boq.boq.filter(function (x) { return x.entityType == "Pole"; });
                    this.poleGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(poles, 'level');
                    poles.forEach(function (x) {
                        _this.poleSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.poleSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.poleSummary.quantity += x.quantity;
                        _this.poleSummary.units = x.units;
                    });
                    var splitters = this.boq.boq.filter(function (x) { return x.entityType == "Splitter"; });
                    this.splitterGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(splitters, 'level');
                    splitters.forEach(function (x) {
                        _this.splitterSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.splitterSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.splitterSummary.quantity += x.quantity;
                        _this.splitterSummary.units = x.units;
                    });
                    var spliceClosures = this.boq.boq.filter(function (x) { return x.entityType == "SpliceClosure"; });
                    this.spliceClosureGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(spliceClosures, 'level');
                    spliceClosures.forEach(function (x) {
                        _this.spliceClosureSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.spliceClosureSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.spliceClosureSummary.quantity += x.quantity;
                        _this.spliceClosureSummary.units = x.units;
                    });
                    var accessories = this.boq.boq.filter(function (x) { return x.entityType == "Accessory"; });
                    this.accessoryGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(accessories, 'level');
                    accessories.forEach(function (x) {
                        _this.accessorySummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.accessorySummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.accessorySummary.quantity += x.quantity;
                        _this.accessorySummary.units = x.units;
                    });
                    var civilworks = this.boq.boq.filter(function (x) { return x.entityType == "Civilwork"; });
                    this.civilworkGroups = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].groupBy(civilworks, 'level');
                    civilworks.forEach(function (x) {
                        _this.civilworkSummary.materialCost += (x.materialCost * x.quantity);
                        if (x.serviceCost)
                            _this.civilworkSummary.serviceCost += (x.serviceCost * x.quantity);
                        _this.civilworkSummary.quantity += x.quantity;
                        _this.civilworkSummary.units = x.units;
                    });
                    this.totalMaterialCost = this.cableSummary.materialCost +
                        this.chamberSummary.materialCost +
                        this.ductSummary.materialCost +
                        this.odfSummary.materialCost +
                        this.poleSummary.materialCost +
                        this.splitterSummary.materialCost +
                        this.spliceClosureSummary.materialCost +
                        this.accessorySummary.materialCost +
                        this.civilworkSummary.materialCost;
                    this.totalServiceCost = this.cableSummary.serviceCost +
                        this.chamberSummary.serviceCost +
                        this.ductSummary.serviceCost +
                        this.odfSummary.serviceCost +
                        this.poleSummary.serviceCost +
                        this.splitterSummary.serviceCost +
                        this.spliceClosureSummary.serviceCost +
                        this.accessorySummary.serviceCost +
                        this.civilworkSummary.serviceCost;
                    this.totalCost = this.totalMaterialCost + this.totalServiceCost;
                };
                return DesignBOM;
            }());
            DesignBOM.ctorParameters = function () { return [
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"] },
                { type: _services_design_service__WEBPACK_IMPORTED_MODULE_4__["DesignService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignBOM.prototype, "boq", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('TABLE', { static: false })
            ], DesignBOM.prototype, "TABLE", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('TABLE1', { static: false })
            ], DesignBOM.prototype, "TABLE1", void 0);
            DesignBOM = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-bom',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-bom.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-bom.html")).default
                })
            ], DesignBOM);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-bookingIds.ts": 
        /*!******************************************************!*\
          !*** ./src/app/designs/components/dzn-bookingIds.ts ***!
          \******************************************************/
        /*! exports provided: DesignBookingIds */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignBookingIds", function () { return DesignBookingIds; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            var DesignBookingIds = /** @class */ (function () {
                function DesignBookingIds() {
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Design"]();
                    this.bookingIds = new Array();
                }
                DesignBookingIds.prototype.ngOnInit = function () {
                    if (this.design.bookingIds == null || this.design.bookingIds.length == 0) {
                        this.design.bookingIds.push({ entityType: "Cable", format: "Cable_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                        this.design.bookingIds.push({ entityType: "Chamber", format: "Chamber_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                        this.design.bookingIds.push({ entityType: "Duct", format: "Duct_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                        this.design.bookingIds.push({ entityType: "ODF", format: "ODF_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                        this.design.bookingIds.push({ entityType: "Pole", format: "Pole_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                        this.design.bookingIds.push({ entityType: "SpliceClosure", format: "SpliceClosure_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                        this.design.bookingIds.push({ entityType: "Splitter", format: "Splitter_{code}", sequenceStart: 1, sequenceEnd: null, step: 1 });
                    }
                };
                DesignBookingIds.prototype.clearBookingId = function (index) {
                    var item = this.design.bookingIds[index];
                    item.format = "";
                    item.sequenceStart = null;
                    item.sequenceEnd = null;
                    item.step = 1;
                };
                return DesignBookingIds;
            }());
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignBookingIds.prototype, "design", void 0);
            DesignBookingIds = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-bookingIds',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-bookingIds.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-bookingIds.html")).default
                })
            ], DesignBookingIds);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-cable.ts": 
        /*!*************************************************!*\
          !*** ./src/app/designs/components/dzn-cable.ts ***!
          \*************************************************/
        /*! exports provided: DesignCable */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignCable", function () { return DesignCable; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _entities_services_cable_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../entities/services/cable.service */ "./src/app/entities/services/cable.service.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            /* harmony import */ var _entities_models_chamber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../entities/models/chamber */ "./src/app/entities/models/chamber.ts");
            /* harmony import */ var _entities_models_pole__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../entities/models/pole */ "./src/app/entities/models/pole.ts");
            /* harmony import */ var _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../entities/services/pole.service */ "./src/app/entities/services/pole.service.ts");
            /* harmony import */ var _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../entities/services/chamber.service */ "./src/app/entities/services/chamber.service.ts");
            var DesignCable = /** @class */ (function () {
                function DesignCable(cableService, poleService, chamberService) {
                    this.cableService = cableService;
                    this.poleService = poleService;
                    this.chamberService = chamberService;
                    this.cableSettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["CableSettings"]();
                    this.allDesigns = new Array();
                    this.cablesMaster = new Array();
                    this.polesMaster = new Array();
                    this.chambersMaster = new Array();
                    this.statusMessage = "No cable selected";
                }
                DesignCable.prototype.ngOnInit = function () {
                    this.getExistingChambers();
                    this.getExistingPoles();
                };
                DesignCable.prototype.ngOnChanges = function (changes) {
                    if (this.cableSettings.cableType)
                        this.getCablesMaster(this.cableSettings.cableType);
                };
                DesignCable.prototype.onCableTypeChange = function (cableType) {
                    this.cableSettings.cables = null;
                    this.getCablesMaster(cableType);
                    this.cableSettings.pole = new _entities_models_pole__WEBPACK_IMPORTED_MODULE_6__["Pole"]();
                    this.cableSettings.chamber = new _entities_models_chamber__WEBPACK_IMPORTED_MODULE_5__["Chamber"]();
                    if (cableType == "underground")
                        this.getExistingChambers();
                    else
                        this.getExistingPoles();
                };
                DesignCable.prototype.getCablesMaster = function (cableType) {
                    var _this = this;
                    var paginationRequest = {
                        page: null,
                        pageSize: null,
                        filter: {
                            conditionOperator: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["ConditionOperator"].AND,
                            filters: [{
                                    propertyName: "isUnderground",
                                    operator: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["Operator"].equals,
                                    value: cableType == "underground" ? true : false,
                                    caseSensitive: false
                                }]
                        },
                        order: {
                            orderByProperty: "UpdatedDate",
                            sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].descending
                        }
                    };
                    this.cableService.getCables(paginationRequest).subscribe(function (resp) {
                        _this.cablesMaster = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.cablesMaster = resp.data;
                            }
                            else {
                                _this.statusMessage = "There are no registered cables.";
                            }
                        }
                    }, function (err) {
                        _this.cablesMaster = null;
                        _this.statusMessage = "Error fetching cables.";
                    });
                };
                DesignCable.prototype.getExistingPoles = function () {
                    var _this = this;
                    if (this.polesMaster.length == 0) {
                        this.poleService.getPoles().subscribe(function (resp) {
                            _this.polesMaster = null;
                            if (resp.data != null && resp.data.length > 0) {
                                _this.polesMaster = resp.data;
                            }
                        }, function (err) {
                            _this.polesMaster = new Array();
                        });
                    }
                };
                DesignCable.prototype.getExistingChambers = function () {
                    var _this = this;
                    if (this.chambersMaster.length == 0) {
                        this.chamberService.getChambers().subscribe(function (resp) {
                            _this.chambersMaster = null;
                            if (resp.data != null && resp.data.length > 0) {
                                _this.chambersMaster = resp.data;
                            }
                        }, function (err) {
                            _this.chambersMaster = new Array();
                        });
                    }
                };
                DesignCable.prototype.addCable = function () {
                    var _this = this;
                    if (this.selectedCable) {
                        if (this.cableSettings.cables == null)
                            this.cableSettings.cables = new Array();
                        var index = this.cableSettings.cables.findIndex(function (x) { return x.id == _this.selectedCable.id; });
                        if (index == -1) {
                            this.cableSettings.cables.push(this.selectedCable);
                            this.selectedCable = null;
                        }
                    }
                };
                DesignCable.prototype.onPoleChange = function (poleId) {
                    this.cableSettings.pole = this.polesMaster.find(function (x) { return x.id == poleId; });
                };
                DesignCable.prototype.onChamberChange = function (id) {
                    this.cableSettings.chamber = this.chambersMaster.find(function (x) { return x.id == id; });
                };
                DesignCable.prototype.removeCable = function (index) {
                    this.cableSettings.cables.splice(index, 1);
                };
                return DesignCable;
            }());
            DesignCable.ctorParameters = function () { return [
                { type: _entities_services_cable_service__WEBPACK_IMPORTED_MODULE_3__["CableService"] },
                { type: _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_7__["PoleService"] },
                { type: _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_8__["ChamberService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignCable.prototype, "cableSettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignCable.prototype, "allDesigns", void 0);
            DesignCable = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-cable',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-cable.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-cable.html")).default
                })
            ], DesignCable);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-civilworks.ts": 
        /*!******************************************************!*\
          !*** ./src/app/designs/components/dzn-civilworks.ts ***!
          \******************************************************/
        /*! exports provided: DesignCivilwork */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignCivilwork", function () { return DesignCivilwork; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _civilworks_services_civilwork_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../civilworks/services/civilwork.service */ "./src/app/civilworks/services/civilwork.service.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var DesignCivilwork = /** @class */ (function () {
                function DesignCivilwork(civilworkService) {
                    this.civilworkService = civilworkService;
                    this.civilworkSettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["CivilworkSettings"]();
                    this.civilworksMaster = new Array();
                }
                DesignCivilwork.prototype.ngOnChanges = function (changes) {
                    if (this.parentEntityType)
                        this.getExistingCivilworks(this.parentEntityType);
                };
                DesignCivilwork.prototype.getExistingCivilworks = function (parentEntityType) {
                    var _this = this;
                    //this.civilworkSettings.civilworks = null;
                    var paginationRequest = {
                        page: null,
                        pageSize: null,
                        filter: {
                            conditionOperator: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["ConditionOperator"].AND,
                            filters: [{
                                    propertyName: "ParentEntityType",
                                    operator: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["Operator"].equals,
                                    value: parentEntityType.toLowerCase(),
                                    caseSensitive: false
                                }]
                        },
                        order: {
                            orderByProperty: "UpdatedDate",
                            sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].descending
                        }
                    };
                    this.civilworkService.getCivilworks(paginationRequest).subscribe(function (resp) {
                        _this.civilworksMaster = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.civilworksMaster = resp.data;
                            }
                            else {
                                _this.statusMessage = "There are no registered civilworks.";
                            }
                        }
                    }, function (err) {
                        _this.civilworksMaster = null;
                        _this.statusMessage = "Error fetching civilworks.";
                    });
                };
                DesignCivilwork.prototype.addCivilwork = function () {
                    var _this = this;
                    if (this.selectedCivilwork) {
                        if (this.civilworkSettings.civilworks == null)
                            this.civilworkSettings.civilworks = new Array();
                        var index = this.civilworkSettings.civilworks.findIndex(function (x) { return x.id == _this.selectedCivilwork.id; });
                        if (index == -1) {
                            this.civilworkSettings.civilworks.push(this.selectedCivilwork);
                            this.selectedCivilwork = null;
                        }
                    }
                };
                DesignCivilwork.prototype.removeCivilwork = function (index) {
                    this.civilworkSettings.civilworks.splice(index, 1);
                };
                return DesignCivilwork;
            }());
            DesignCivilwork.ctorParameters = function () { return [
                { type: _civilworks_services_civilwork_service__WEBPACK_IMPORTED_MODULE_3__["CivilworkService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignCivilwork.prototype, "civilworkSettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignCivilwork.prototype, "parentEntityType", void 0);
            DesignCivilwork = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-civilworks',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-civilworks.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-civilworks.html")).default
                })
            ], DesignCivilwork);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-clusters.ts": 
        /*!****************************************************!*\
          !*** ./src/app/designs/components/dzn-clusters.ts ***!
          \****************************************************/
        /*! exports provided: DesignClusters */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignClusters", function () { return DesignClusters; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            /* harmony import */ var _clusters_services_cluster_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../clusters/services/cluster.service */ "./src/app/clusters/services/cluster.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            var DesignClusters = /** @class */ (function () {
                function DesignClusters(clusterService, helper) {
                    this.clusterService = clusterService;
                    this.helper = helper;
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Design"]();
                    this.clusters = new Array();
                    this.statusMessage = "";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.totalPages = 1;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending;
                    this.searchFields = new Array();
                    this.searchFields.push({ field: 'Name', label: 'Name', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedBy', label: 'Updated By', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedDate', label: 'Updated On', dataType: "date", value: "" });
                    this.selectedField = this.searchFields[0];
                }
                DesignClusters.prototype.ngOnInit = function () {
                    this.statusMessage = "Loading clusters...";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.sortColumn = null;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].noSort;
                    this.searchText = "";
                    this.getFormData();
                };
                DesignClusters.prototype.getFormData = function () {
                    var _this = this;
                    $("#ajax-loading").show();
                    this.totalPages = 1;
                    var paginationRequest = {
                        page: this.currentPage,
                        pageSize: this.pageSize,
                        filter: this.searchFilter,
                        order: {
                            orderByProperty: this.sortColumn,
                            sortOrder: this.sortOrder
                        }
                    };
                    this.clusterService.getClusters(paginationRequest).subscribe(function (resp) {
                        _this.clusters = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                            _this.helper.showAlertMessage(_this.statusMessage, "error");
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.clusters = resp.data;
                                _this.totalPages = Math.ceil(resp.recordCount / _this.pageSize);
                            }
                            else {
                                _this.statusMessage = "There are no clusters.";
                            }
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        _this.clusters = null;
                        var msg = "Unable to fetch clusters : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                        _this.statusMessage = "Error fetching clusters.";
                    });
                };
                DesignClusters.prototype.setSearchField = function (searchField) {
                    this.selectedField = searchField;
                    this.searchText = '';
                };
                DesignClusters.prototype.search = function () {
                    this.searchFilter = this.helper.search(this.selectedField, this.searchText, _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["ConditionOperator"].AND);
                    this.searchFields.forEach(function (x) { return x.value = ''; });
                    this.getFormData();
                };
                DesignClusters.prototype.clearSearch = function () {
                    this.searchFilter = this.helper.search(this.selectedField, this.searchText, _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["ConditionOperator"].AND);
                    this.searchFields.forEach(function (x) { return x.value = ''; });
                };
                DesignClusters.prototype.setPage = function (page) {
                    if (page < 1 || page > this.totalPages) {
                        return;
                    }
                    this.currentPage = page;
                    this.getFormData();
                };
                DesignClusters.prototype.onColumnClick = function (e) {
                    if (this.previousElement && e.getAttribute('data-column') != this.previousElement.getAttribute('data-column')) {
                        this.previousElement.classList.remove('table-sorter-desc');
                        this.previousElement.classList.remove('table-sorter-asc');
                    }
                    this.previousElement = e;
                    this.sortColumn = e.getAttribute('data-column');
                    if (e.classList.contains("table-sorter-asc")) {
                        e.classList.remove('table-sorter-asc');
                        e.classList.add('table-sorter-desc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending;
                    }
                    else if (e.classList.contains("table-sorter-desc")) {
                        e.classList.remove('table-sorter-desc');
                        this.sortColumn = null;
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].noSort;
                    }
                    else {
                        e.classList.add('table-sorter-asc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].ascending;
                    }
                    this.getFormData();
                };
                return DesignClusters;
            }());
            DesignClusters.ctorParameters = function () { return [
                { type: _clusters_services_cluster_service__WEBPACK_IMPORTED_MODULE_4__["ClusterService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_5__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignClusters.prototype, "design", void 0);
            DesignClusters = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-clusters',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-clusters.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-clusters.html")).default
                })
            ], DesignClusters);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-costing.ts": 
        /*!***************************************************!*\
          !*** ./src/app/designs/components/dzn-costing.ts ***!
          \***************************************************/
        /*! exports provided: DesignCosting */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignCosting", function () { return DesignCosting; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            //import { CustomField, ControlType, DataType } from '../../../common/customField';
            var DesignCosting = /** @class */ (function () {
                function DesignCosting() {
                    this.networkSettings = new Array();
                    this.entityType = "Cable";
                    this.cables = new Array();
                    this.chambers = new Array();
                    this.ducts = new Array();
                    this.odfs = new Array();
                    this.poles = new Array();
                    this.splitters = new Array();
                    this.spliceClosures = new Array();
                    this.accessories = new Array();
                    this.civilworks = new Array();
                }
                DesignCosting.prototype.ngOnChanges = function (changes) {
                    var _this = this;
                    if (this.networkSettings == null)
                        return;
                    this.networkSettings.forEach(function (level) {
                        _this.cables = new Array();
                        _this.chambers = new Array();
                        _this.ducts = new Array();
                        _this.odfs = new Array();
                        _this.poles = new Array();
                        _this.splitters = new Array();
                        _this.spliceClosures = new Array();
                        _this.accessories = new Array();
                        _this.civilworks = new Array();
                        //start node
                        if (level.startNode) {
                            if (level.startNode.accessorySettings.accessories != null) {
                                level.startNode.accessorySettings.accessories.forEach(function (accessory) {
                                    var index = _this.accessories.findIndex(function (c) { return c.name == accessory.name; });
                                    if (index == -1)
                                        _this.accessories.push(accessory);
                                });
                            }
                            if (level.startNode.civilworkSettings.civilworks != null) {
                                level.startNode.civilworkSettings.civilworks.forEach(function (civilwork) {
                                    var index = _this.civilworks.findIndex(function (c) { return c.name == civilwork.name; });
                                    if (index == -1)
                                        _this.civilworks.push(civilwork);
                                });
                            }
                            if (level.startNode.entitySettings.dataSource == "automatic") {
                                if (level.startNode.entitySettings.splitters != null && level.startNode.entitySettings.splitters.length > 0) {
                                    var index = _this.splitters.findIndex(function (s) { return s.name == level.startNode.entitySettings.splitters[0].name; });
                                    if (index == -1)
                                        _this.splitters.push(level.startNode.entitySettings.splitters[0]);
                                }
                            }
                        }
                        if (level.destinationNode) {
                            //destination node
                            if (level.destinationNode.accessorySettings.accessories != null) {
                                level.destinationNode.accessorySettings.accessories.forEach(function (accessory) {
                                    var index = _this.accessories.findIndex(function (c) { return c.name == accessory.name; });
                                    if (index == -1)
                                        _this.accessories.push(accessory);
                                });
                            }
                            if (level.destinationNode.civilworkSettings.civilworks != null) {
                                level.destinationNode.civilworkSettings.civilworks.forEach(function (civilwork) {
                                    var index = _this.civilworks.findIndex(function (c) { return c.name == civilwork.name; });
                                    if (index == -1)
                                        _this.civilworks.push(civilwork);
                                });
                            }
                            if (level.destinationNode.entitySettings.dataSource == "automatic") {
                                if (level.destinationNode.entitySettings.splitters != null && level.destinationNode.entitySettings.splitters.length > 0) {
                                    var index = _this.splitters.findIndex(function (s) { return s.name == level.destinationNode.entitySettings.splitters[0].name; });
                                    if (index == -1)
                                        _this.splitters.push(level.destinationNode.entitySettings.splitters[0]);
                                }
                            }
                            //if (level.destinationNode.entitySettings.splitter != null) {
                            //    let index = this.splitters.findIndex(s => s.name == level.destinationNode.entitySettings.splitter.name);
                            //    if (index == -1)
                            //        this.splitters.push(level.destinationNode.entitySettings.splitter);
                            //}
                        }
                        if (level.fdpNode) {
                            //FDP node
                            if (level.fdpNode.accessorySettings.accessories != null) {
                                level.fdpNode.accessorySettings.accessories.forEach(function (accessory) {
                                    var index = _this.accessories.findIndex(function (c) { return c.name == accessory.name; });
                                    if (index == -1)
                                        _this.accessories.push(accessory);
                                });
                            }
                            if (level.fdpNode.civilworkSettings.civilworks != null) {
                                level.fdpNode.civilworkSettings.civilworks.forEach(function (civilwork) {
                                    var index = _this.civilworks.findIndex(function (c) { return c.name == civilwork.name; });
                                    if (index == -1)
                                        _this.civilworks.push(civilwork);
                                });
                            }
                            //if (level.destinationNode.entitySettings.dataSource == "automatic") {
                            //    if (level.destinationNode.entitySettings.splitters != null && level.destinationNode.entitySettings.splitters.length > 0) {
                            //        let index = this.splitters.findIndex(s => s.name == level.destinationNode.entitySettings.splitters[0].name);
                            //        if (index == -1)
                            //            this.splitters.push(level.destinationNode.entitySettings.splitters[0]);
                            //    }
                            //}
                        }
                        //Cabling
                        if (level.cabling.cableSettings.cables != null) {
                            level.cabling.cableSettings.cables.forEach(function (cable) {
                                var index = _this.cables.findIndex(function (c) { return c.name == cable.name; });
                                if (index == -1)
                                    _this.cables.push(cable);
                            });
                        }
                        if (level.cabling.cableSettings.chamber.name) {
                            var chamber_1 = level.cabling.cableSettings.chamber;
                            var index = _this.chambers.findIndex(function (c) { return c.name == chamber_1.name; });
                            if (index == -1)
                                _this.chambers.push(chamber_1);
                        }
                        if (level.cabling.cableSettings.pole.name) {
                            var pole_1 = level.cabling.cableSettings.pole;
                            var index = _this.poles.findIndex(function (c) { return c.name == pole_1.name; });
                            if (index == -1)
                                _this.poles.push(pole_1);
                        }
                        if (level.cabling.accessorySettings.accessories != null) {
                            level.cabling.accessorySettings.accessories.forEach(function (accessory) {
                                var index = _this.accessories.findIndex(function (c) { return c.name == accessory.name; });
                                if (index == -1)
                                    _this.accessories.push(accessory);
                            });
                        }
                        if (level.cabling.ductSettings.ducts != null) {
                            level.cabling.ductSettings.ducts.forEach(function (duct) {
                                var index = _this.ducts.findIndex(function (c) { return c.name == duct.name; });
                                if (index == -1)
                                    _this.ducts.push(duct);
                            });
                        }
                        if (level.cabling.spliceClosureSettings.spliceClosures != null) {
                            level.cabling.spliceClosureSettings.spliceClosures.forEach(function (spliceClosure) {
                                var index = _this.spliceClosures.findIndex(function (c) { return c.name == spliceClosure.name; });
                                if (index == -1)
                                    _this.spliceClosures.push(spliceClosure);
                            });
                        }
                    });
                };
                DesignCosting.prototype.checkPriceValidity = function (validFrom, validTill) {
                    var today = new Date();
                    var vf = new Date(validFrom);
                    var vt = new Date(validTill);
                    if (vf <= today && vt > today)
                        return true;
                    else
                        return false;
                };
                return DesignCosting;
            }());
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignCosting.prototype, "networkSettings", void 0);
            DesignCosting = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-costing',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-costing.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-costing.html")).default
                })
            ], DesignCosting);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-documents.ts": 
        /*!*****************************************************!*\
          !*** ./src/app/designs/components/dzn-documents.ts ***!
          \*****************************************************/
        /*! exports provided: DesignDocuments */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignDocuments", function () { return DesignDocuments; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_models_document__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/document */ "./src/app/common/models/document.ts");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            var DesignDocuments = /** @class */ (function () {
                function DesignDocuments(helper) {
                    this.helper = helper;
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_4__["Design"]();
                    this.documentCategory = "";
                }
                DesignDocuments.prototype.fileChangeEvent = function (event) {
                    var files = event.target.files;
                    if (this.design.documents == null)
                        this.design.documents = new Array();
                    for (var i = 0; i < files.length; i++) {
                        if (files[i].name.length > 200) {
                            this.helper.showAlertMessage("Document file name cannot be greater than 200 characters", "error");
                        }
                        else {
                            var document = new _common_models_document__WEBPACK_IMPORTED_MODULE_3__["Document"]();
                            document.category = this.documentCategory;
                            document.fileName = files[i].name;
                            document.fileSize = files[i].size;
                            document.file = files[i];
                            this.design.documents.push(document);
                        }
                    }
                };
                DesignDocuments.prototype.removeDocument = function (index, document) {
                    this.design.documents.splice(index, 1);
                    //if (document.id != null) {
                    //   this.designService.deleteDocument(this.design.id, document.id)
                    //      .subscribe(() => {
                    //         this.helper.showAlertMessage("Document deleted", "success");
                    //      },
                    //         (err) => {
                    //            let msg = `Unable to delete document : ${err.message}`;
                    //            this.helper.showAlertMessage(msg, "error");
                    //         });
                    //}
                };
                return DesignDocuments;
            }());
            DesignDocuments.ctorParameters = function () { return [
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_2__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignDocuments.prototype, "design", void 0);
            DesignDocuments = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-documents',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-documents.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-documents.html")).default
                })
            ], DesignDocuments);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-duct.ts": 
        /*!************************************************!*\
          !*** ./src/app/designs/components/dzn-duct.ts ***!
          \************************************************/
        /*! exports provided: DesignDuct */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignDuct", function () { return DesignDuct; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _entities_services_duct_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../entities/services/duct.service */ "./src/app/entities/services/duct.service.ts");
            var DesignDuct = /** @class */ (function () {
                function DesignDuct(ductService) {
                    this.ductService = ductService;
                    this.ductSettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["DuctSettings"]();
                    this.ductsMaster = new Array();
                    this.statusMessage = "No ducts selected";
                    this.selectedDuct = null;
                }
                DesignDuct.prototype.ngOnInit = function () {
                    this.getExistingDucts();
                };
                DesignDuct.prototype.getExistingDucts = function () {
                    var _this = this;
                    this.ductService.getDucts().subscribe(function (resp) {
                        _this.ductsMaster = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.ductsMaster = resp.data;
                            }
                            else {
                                _this.statusMessage = "There are no registered ducts.";
                            }
                        }
                    }, function (err) {
                        _this.ductsMaster = null;
                        _this.statusMessage = "Error fetching ducts.";
                    });
                };
                DesignDuct.prototype.addDuct = function () {
                    var _this = this;
                    if (this.selectedDuct) {
                        if (this.ductSettings.ducts == null)
                            this.ductSettings.ducts = new Array();
                        var index = this.ductSettings.ducts.findIndex(function (x) { return x.id == _this.selectedDuct.id; });
                        if (index == -1) {
                            this.ductSettings.ducts.push(this.selectedDuct);
                            this.selectedDuct = null;
                        }
                    }
                };
                DesignDuct.prototype.removeDuct = function (index) {
                    this.ductSettings.ducts.splice(index, 1);
                };
                return DesignDuct;
            }());
            DesignDuct.ctorParameters = function () { return [
                { type: _entities_services_duct_service__WEBPACK_IMPORTED_MODULE_3__["DuctService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignDuct.prototype, "ductSettings", void 0);
            DesignDuct = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-duct',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-duct.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-duct.html")).default
                })
            ], DesignDuct);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-entities.ts": 
        /*!****************************************************!*\
          !*** ./src/app/designs/components/dzn-entities.ts ***!
          \****************************************************/
        /*! exports provided: DesignEntities */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignEntities", function () { return DesignEntities; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _entities_services_splitter_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../entities/services/splitter.service */ "./src/app/entities/services/splitter.service.ts");
            /* harmony import */ var _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../entities/services/spliceClosure.service */ "./src/app/entities/services/spliceClosure.service.ts");
            /* harmony import */ var _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../entities/services/pole.service */ "./src/app/entities/services/pole.service.ts");
            /* harmony import */ var _entities_services_odf_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../entities/services/odf.service */ "./src/app/entities/services/odf.service.ts");
            /* harmony import */ var _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../entities/services/chamber.service */ "./src/app/entities/services/chamber.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _common_geo_geometry__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/geo/geometry */ "./src/app/common/geo/geometry.ts");
            var DesignEntities = /** @class */ (function () {
                function DesignEntities(chamberService, odfService, poleService, spliceClosureService, splitterService, helper) {
                    this.chamberService = chamberService;
                    this.odfService = odfService;
                    this.poleService = poleService;
                    this.spliceClosureService = spliceClosureService;
                    this.splitterService = splitterService;
                    this.helper = helper;
                    this.entitySettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["EntitySettings"]();
                    this.allDesigns = new Array();
                    this.entities = [];
                }
                DesignEntities.prototype.ngOnInit = function () {
                    this.loadMasterEntities(this.entitySettings.entityName);
                    this.initializeEntities();
                };
                DesignEntities.prototype.initializeEntities = function () {
                    switch (this.entitySettings.entityName) {
                        case "Chamber":
                            if (this.entitySettings.chambers == null)
                                this.entitySettings.chambers = new Array();
                            this.entities = this.entitySettings.chambers;
                            break;
                        case "ODF":
                            if (this.entitySettings.odfs == null)
                                this.entitySettings.odfs = new Array();
                            this.entities = this.entitySettings.odfs;
                            break;
                        case "Pole":
                            if (this.entitySettings.poles == null)
                                this.entitySettings.poles = new Array();
                            this.entities = this.entitySettings.poles;
                            break;
                        case "SpliceClosure":
                            if (this.entitySettings.spliceClosures == null)
                                this.entitySettings.spliceClosures = new Array();
                            this.entities = this.entitySettings.spliceClosures;
                            break;
                        case "Splitter":
                            if (this.entitySettings.splitters == null)
                                this.entitySettings.splitters = new Array();
                            this.entities = this.entitySettings.splitters;
                            break;
                    }
                };
                DesignEntities.prototype.onEntityTypeChange = function (entityType) {
                    if (this.entitySettings.entityName == 'Homepass') {
                        this.entitySettings.dataSource = 'automatic';
                    }
                    else {
                        this.entitySettings.chambers = null;
                        this.entitySettings.odfs = null;
                        this.entitySettings.poles = null;
                        this.entitySettings.spliceClosures = null;
                        this.entitySettings.splitters = null;
                        this.initializeEntities();
                        this.loadMasterEntities(entityType);
                    }
                };
                DesignEntities.prototype.loadMasterEntities = function (entityType) {
                    var _this = this;
                    var masterSvc = null;
                    switch (entityType) {
                        case "Chamber":
                            masterSvc = this.chamberService.getChambers();
                            break;
                        case "ODF":
                            masterSvc = this.odfService.getODFs();
                            break;
                        case "Pole":
                            masterSvc = this.poleService.getPoles();
                            break;
                        case "SpliceClosure":
                            masterSvc = this.spliceClosureService.getSpliceClosures();
                            break;
                        case "Splitter":
                            masterSvc = this.splitterService.getSplitters();
                            break;
                        default:
                            masterSvc = this.splitterService.getSplitters();
                            break;
                    }
                    masterSvc.subscribe(function (resp) {
                        _this.masterEntities = null;
                        if (resp.data != null && resp.data.length > 0) {
                            _this.masterEntities = resp.data;
                        }
                    }, function (err) {
                        _this.masterEntities = new Array();
                    });
                };
                DesignEntities.prototype.addEntity = function () {
                    var _this = this;
                    if (this.entities == null)
                        this.entities = [];
                    if (this.selectedEntity) {
                        var index = this.entities.findIndex(function (x) { return x.id == _this.selectedEntity.id; });
                        if (index == -1) {
                            this.entities.push(this.selectedEntity);
                            this.selectedEntity = null;
                        }
                    }
                };
                DesignEntities.prototype.removeEntity = function (index) {
                    this.entities.splice(index, 1);
                };
                DesignEntities.prototype.fileChangeEvent = function (event) {
                    var _this = this;
                    this.entitySettings.chambers = null;
                    this.entitySettings.odfs = null;
                    this.entitySettings.poles = null;
                    this.entitySettings.spliceClosures = null;
                    this.entitySettings.splitters = null;
                    this.initializeEntities();
                    var file = event.target.files[0];
                    var reader = new FileReader();
                    var fileExt = file.name.split('.').pop().toLowerCase();
                    reader.onload = function (e) {
                        try {
                            if (fileExt == "kml") {
                                var kml = reader.result;
                                var geojson = toGeoJSON.kml((new DOMParser()).parseFromString(kml, 'text/xml'));
                                _this.populateEntities(geojson.features);
                            }
                            else if (fileExt == "zip") {
                                shp(reader.result).then(function (geojson) {
                                    _this.populateEntities(geojson.features);
                                });
                            }
                            else if (fileExt == "csv") {
                                var csv = reader.result;
                                _this.populateEntitiesCsv(csv);
                            }
                        }
                        catch (e) {
                            _this.helper.showAlertMessage("Could not parse the file.", "error");
                        }
                    };
                    if (fileExt == "csv" || fileExt == "kml")
                        reader.readAsText(file);
                    else if (fileExt == "zip")
                        reader.readAsArrayBuffer(file);
                    else
                        this.helper.showAlertMessage("Invalid file format", "error");
                };
                DesignEntities.prototype.populateEntities = function (features) {
                    this.entities.length = 0;
                    var _loop_1 = function () {
                        var properties = features[i].properties;
                        var latLng = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_9__["GeoHelper"].convertToPosition([features[i].geometry.coordinates[0], features[i].geometry.coordinates[1]]);
                        var isValid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_9__["GeoHelper"].validateCoordinates(latLng);
                        if ((isValid instanceof Error) == false) {
                            var index = this_1.entities.findIndex(function (x) { return x.code == properties.name; });
                            if (index == -1) {
                                var entity = {
                                    name: properties.name,
                                    code: properties.name,
                                    geometry: new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_10__["Point"]([latLng.lng, latLng.lat]),
                                };
                                entity["splitterRatio"] = "1:8";
                                this_1.entities.push(entity);
                            }
                        }
                    };
                    var this_1 = this;
                    for (var i = 0; i < features.length; i++) {
                        _loop_1();
                    }
                };
                DesignEntities.prototype.populateEntitiesCsv = function (csvData) {
                    this.entities.length = 0;
                    var allRows = csvData.split(/\r?\n|\r/);
                    var _loop_2 = function () {
                        if (allRows[i].trim() == "")
                            return "continue";
                        var properties = allRows[i].split(',');
                        var lat = parseFloat(properties[3]);
                        var lng = parseFloat(properties[4]);
                        var latLng = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_9__["GeoHelper"].convertToPosition([lng, lat]);
                        var isValid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_9__["GeoHelper"].validateCoordinates(latLng);
                        if ((isValid instanceof Error) == false) {
                            var index = this_2.entities.findIndex(function (x) { return x.code == properties.Test; });
                            if (index == -1) {
                                var entity = {
                                    name: properties[1],
                                    code: properties[0],
                                    geometry: new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_10__["Point"]([lng, lat]),
                                };
                                this_2.entities.push(entity);
                            }
                        }
                    };
                    var this_2 = this;
                    for (var i = 1; i < allRows.length; i++) {
                        _loop_2();
                    }
                };
                DesignEntities.prototype.onDesignChange = function (designId) {
                    var design = this.allDesigns.find(function (x) { return x.id == designId; });
                };
                DesignEntities.prototype.onDesignEntityChange = function (designEntity) {
                };
                return DesignEntities;
            }());
            DesignEntities.ctorParameters = function () { return [
                { type: _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_7__["ChamberService"] },
                { type: _entities_services_odf_service__WEBPACK_IMPORTED_MODULE_6__["ODFService"] },
                { type: _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_5__["PoleService"] },
                { type: _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_4__["SpliceClosureService"] },
                { type: _entities_services_splitter_service__WEBPACK_IMPORTED_MODULE_3__["SplitterService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_8__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignEntities.prototype, "entitySettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignEntities.prototype, "allDesigns", void 0);
            DesignEntities = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-entities',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-entities.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-entities.html")).default
                })
            ], DesignEntities);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-fdp.ts": 
        /*!***********************************************!*\
          !*** ./src/app/designs/components/dzn-fdp.ts ***!
          \***********************************************/
        /*! exports provided: DesignFPDs */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignFPDs", function () { return DesignFPDs; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _common_geo_geometry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/geo/geometry */ "./src/app/common/geo/geometry.ts");
            var DesignFPDs = /** @class */ (function () {
                //existingFDPs: FDP[] = new Array<FDP>();
                function DesignFPDs(helper) {
                    this.helper = helper;
                    this.fdpSettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["FDPSettings"]();
                    this.allDesigns = new Array();
                }
                DesignFPDs.prototype.add = function () {
                    var _this = this;
                    if (this.fdpSettings.aggregateFdps == null)
                        this.fdpSettings.aggregateFdps = new Array();
                    if (this.selectedFDP) {
                        var index = this.fdpSettings.aggregateFdps.findIndex(function (x) { return x.code == _this.selectedFDP.code; });
                        if (index == -1) {
                            this.fdpSettings.aggregateFdps.push(this.selectedFDP);
                            this.selectedFDP = null;
                        }
                    }
                };
                DesignFPDs.prototype.remove = function (index) {
                    this.fdpSettings.aggregateFdps.splice(index, 1);
                };
                DesignFPDs.prototype.fileChangeEvent = function (event) {
                    var _this = this;
                    if (this.fdpSettings.fdps)
                        this.fdpSettings.fdps.length = 0;
                    if (this.fdpSettings.aggregateFdps)
                        this.fdpSettings.aggregateFdps.length = 0;
                    var file = event.target.files[0];
                    var reader = new FileReader();
                    var fileExt = file.name.split('.').pop().toLowerCase();
                    reader.onload = function (e) {
                        try {
                            if (fileExt == "kml") {
                                var kml = reader.result;
                                var geojson = toGeoJSON.kml((new DOMParser()).parseFromString(kml, 'text/xml'));
                                _this.populateFDPs(geojson.features);
                            }
                            else if (fileExt == "zip") {
                                shp(reader.result).then(function (geojson) {
                                    _this.populateFDPs(geojson.features);
                                });
                            }
                            else if (fileExt == "csv") {
                                var csv = reader.result;
                                _this.populateFDPsCsv(csv);
                            }
                        }
                        catch (e) {
                            _this.helper.showAlertMessage("Could not parse the file.", "error");
                        }
                    };
                    if (fileExt == "csv" || fileExt == "kml")
                        reader.readAsText(file);
                    else if (fileExt == "zip")
                        reader.readAsArrayBuffer(file);
                    else
                        this.helper.showAlertMessage("Invalid file format", "error");
                };
                DesignFPDs.prototype.populateFDPs = function (features) {
                    this.fdpSettings.fdps.length = 0;
                    var _loop_3 = function () {
                        var properties = features[i].properties;
                        var latLng = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_4__["GeoHelper"].convertToPosition([features[i].geometry.coordinates[0], features[i].geometry.coordinates[1]]);
                        var isValid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_4__["GeoHelper"].validateCoordinates(latLng);
                        if ((isValid instanceof Error) == false) {
                            var index = this_3.fdpSettings.fdps.findIndex(function (x) { return x.code == properties.Test; });
                            if (index == -1) {
                                var fdp = {
                                    name: properties.Test,
                                    code: properties.Test,
                                    geometry: new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_5__["Point"]([latLng.lng, latLng.lat]),
                                };
                                this_3.fdpSettings.fdps.push(fdp);
                            }
                        }
                    };
                    var this_3 = this;
                    for (var i = 0; i < features.length; i++) {
                        _loop_3();
                    }
                };
                DesignFPDs.prototype.populateFDPsCsv = function (csvData) {
                    this.fdpSettings.fdps.length = 0;
                    var allRows = csvData.split(/\r?\n|\r/);
                    var _loop_4 = function () {
                        if (allRows[i].trim() == "")
                            return "continue";
                        var properties = allRows[i].split(',');
                        var lat = parseFloat(properties[3]);
                        var lng = parseFloat(properties[4]);
                        var latLng = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_4__["GeoHelper"].convertToPosition([lng, lat]);
                        var isValid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_4__["GeoHelper"].validateCoordinates(latLng);
                        if ((isValid instanceof Error) == false) {
                            var index = this_4.fdpSettings.fdps.findIndex(function (x) { return x.code == properties.Test; });
                            if (index == -1) {
                                var fdp = {
                                    name: properties[1],
                                    code: properties[0],
                                    geometry: new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_5__["Point"]([lng, lat]),
                                };
                                this_4.fdpSettings.fdps.push(fdp);
                            }
                        }
                    };
                    var this_4 = this;
                    for (var i = 1; i < allRows.length; i++) {
                        _loop_4();
                    }
                };
                DesignFPDs.prototype.onDesignChange = function (designId) {
                    var design = this.allDesigns.find(function (x) { return x.id == designId; });
                    if (design.networkSettings && design.networkSettings[0].fdpNode)
                        this.fdpSettings.fdps = design.networkSettings[0].fdpNode.fdpSettings.fdps;
                };
                return DesignFPDs;
            }());
            DesignFPDs.ctorParameters = function () { return [
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignFPDs.prototype, "fdpSettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignFPDs.prototype, "allDesigns", void 0);
            DesignFPDs = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-fdp',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-fdp.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-fdp.html")).default
                })
            ], DesignFPDs);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-info.ts": 
        /*!************************************************!*\
          !*** ./src/app/designs/components/dzn-info.ts ***!
          \************************************************/
        /*! exports provided: DesignInfo */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignInfo", function () { return DesignInfo; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _users_services_user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../users/services/user.service */ "./src/app/users/services/user.service.ts");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            var DesignInfo = /** @class */ (function () {
                function DesignInfo(userService) {
                    this.userService = userService;
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_3__["Design"]();
                    this.designs = new Array();
                    this.onVersionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
                    this.users = new Array();
                }
                DesignInfo.prototype.ngOnInit = function () {
                    this.getFormData();
                };
                DesignInfo.prototype.ngOnChanges = function (changes) {
                    this.selectedVersion = this.design.version;
                };
                DesignInfo.prototype.getFormData = function () {
                    var _this = this;
                    //this.design.designType = "FTTx";
                    this.userService.getUsers().subscribe(function (resp) {
                        _this.users = null;
                        if (resp.status.toLowerCase() != "error" && resp.data != null && resp.data.length > 0) {
                            _this.users = resp.data;
                        }
                    });
                };
                DesignInfo.prototype.versionChange = function (event) {
                    this.onVersionChange.emit(event);
                };
                DesignInfo.prototype.clearNetworkSettings = function () {
                    this.design.networkSettings = [];
                };
                return DesignInfo;
            }());
            DesignInfo.ctorParameters = function () { return [
                { type: _users_services_user_service__WEBPACK_IMPORTED_MODULE_2__["UserService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignInfo.prototype, "design", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignInfo.prototype, "designs", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])()
            ], DesignInfo.prototype, "onVersionChange", void 0);
            DesignInfo = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-info',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-info.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-info.html")).default
                })
            ], DesignInfo);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-map.ts": 
        /*!***********************************************!*\
          !*** ./src/app/designs/components/dzn-map.ts ***!
          \***********************************************/
        /*! exports provided: DesignMap */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignMap", function () { return DesignMap; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _app_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../app.config */ "./src/app/app.config.ts");
            /* harmony import */ var _services_bom_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/bom.helper */ "./src/app/designs/services/bom.helper.ts");
            /* harmony import */ var _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/geo/googleMapsHelper */ "./src/app/common/geo/googleMapsHelper.ts");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _services_entities_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/entities.helper */ "./src/app/designs/services/entities.helper.ts");
            /* harmony import */ var _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/geo/geoNode */ "./src/app/common/geo/geoNode.ts");
            /* harmony import */ var _services_map_entities_helper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../services/map-entities.helper */ "./src/app/designs/services/map-entities.helper.ts");
            /* harmony import */ var _services_geoNode_helper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../services/geoNode.helper */ "./src/app/designs/services/geoNode.helper.ts");
            /* harmony import */ var _entities_models_chamber__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../entities/models/chamber */ "./src/app/entities/models/chamber.ts");
            /* harmony import */ var _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/geo/geometry */ "./src/app/common/geo/geometry.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _entities_models_pole__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../entities/models/pole */ "./src/app/entities/models/pole.ts");
            /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
            /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_15__);
            /* harmony import */ var _entities_models_splitter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../entities/models/splitter */ "./src/app/entities/models/splitter.ts");
            /* harmony import */ var _entities_models_cable__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../entities/models/cable */ "./src/app/entities/models/cable.ts");
            /* harmony import */ var src_app_entities_models_spliceClosure__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/entities/models/spliceClosure */ "./src/app/entities/models/spliceClosure.ts");
            /* harmony import */ var src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! src/app/common/models/supplier */ "./src/app/common/models/supplier.ts");
            /* harmony import */ var _entities_models_MicroDuct__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../entities/models/MicroDuct */ "./src/app/entities/models/MicroDuct.ts");
            /* harmony import */ var _entities_models_pop__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../entities/models/pop */ "./src/app/entities/models/pop.ts");
            /* harmony import */ var _entities_models_odf__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../entities/models/odf */ "./src/app/entities/models/odf.ts");
            /* harmony import */ var _entities_models_duct__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../entities/models/duct */ "./src/app/entities/models/duct.ts");
            /* harmony import */ var _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../entities/services/chamber.service */ "./src/app/entities/services/chamber.service.ts");
            /* harmony import */ var _entities_services_odf_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../entities/services/odf.service */ "./src/app/entities/services/odf.service.ts");
            /* harmony import */ var _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../entities/services/pole.service */ "./src/app/entities/services/pole.service.ts");
            /* harmony import */ var _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../entities/services/spliceClosure.service */ "./src/app/entities/services/spliceClosure.service.ts");
            /* harmony import */ var _entities_services_splitter_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../entities/services/splitter.service */ "./src/app/entities/services/splitter.service.ts");
            /* harmony import */ var _entities_services_fat_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../entities/services/fat.service */ "./src/app/entities/services/fat.service.ts");
            /* harmony import */ var _entities_services_fdt_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../entities/services/fdt.service */ "./src/app/entities/services/fdt.service.ts");
            /* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! html2canvas */ "./node_modules/html2canvas/dist/html2canvas.js");
            /* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/ __webpack_require__.n(html2canvas__WEBPACK_IMPORTED_MODULE_31__);
            /* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! jspdf */ "./node_modules/jspdf/dist/jspdf.min.js");
            /* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/ __webpack_require__.n(jspdf__WEBPACK_IMPORTED_MODULE_32__);
            /* harmony import */ var _entities_models_fat__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../entities/models/fat */ "./src/app/entities/models/fat.ts");
            /* harmony import */ var _entities_models_Solution2_zip__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../entities/models/Solution2.zip */ "./src/app/entities/models/Solution2.zip.ts");
            /* harmony import */ var _entities_services_duct_service__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../entities/services/duct.service */ "./src/app/entities/services/duct.service.ts");
            /* harmony import */ var _entities_services_cable_service__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../../entities/services/cable.service */ "./src/app/entities/services/cable.service.ts");
            //import { Customer } from '../../entities/models/customer';
            //import { Duct } from '../../entities/models/duct';
            var DesignMap = /** @class */ (function () {
                function DesignMap(appConfig, helper, bomHelper, chamberService, odfService, poleService, spliceClosureService, splitterService, fatService, fdtService, ductService, cableService) {
                    this.appConfig = appConfig;
                    this.helper = helper;
                    this.bomHelper = bomHelper;
                    this.chamberService = chamberService;
                    this.odfService = odfService;
                    this.poleService = poleService;
                    this.spliceClosureService = spliceClosureService;
                    this.splitterService = splitterService;
                    this.fatService = fatService;
                    this.fdtService = fdtService;
                    this.ductService = ductService;
                    this.cableService = cableService;
                    this.entitySettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["EntitySettings"]();
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Design"]();
                    this.entityIcons = [];
                    this.layers = [];
                    this.isEntitiesGenerated = false;
                    this.changedSegments = [];
                    this.chamber = new _entities_models_chamber__WEBPACK_IMPORTED_MODULE_11__["Chamber"]();
                    this.poles = new _entities_models_pole__WEBPACK_IMPORTED_MODULE_14__["Pole"]();
                    this.entities = [];
                    this.selectedLayers = ["Cable", "Chamber", "Pole", "Splitter", "PoP", "Duct", "MicroDuct"];
                    this.PoleIncrementalID = 0;
                    this.ChamberIncrementalID = 0;
                    this.CableIncrementalID = 0;
                    this.OdfIncrementalID = 0;
                    this.SplitterIncrementalID = 0;
                    this.PopIncrementalID = 0;
                    this.SpliceClosureIncrementalID = 0;
                    this.fatdata = new _entities_models_fat__WEBPACK_IMPORTED_MODULE_33__["FAT"]();
                    this.fdt = new _entities_models_Solution2_zip__WEBPACK_IMPORTED_MODULE_34__["FDT"]();
                    this.FatIncrementalID = 0;
                    this.FdtIncrementalID = 0;
                    this.entityIcons.push({ entityType: "Homepass", icon: { url: "images/map-entities/homepass.png" } });
                    this.entityIcons.push({ entityType: "Chamber", icon: { url: "images/map-entities/chamber.png", anchor: new google.maps.Point(10, 10) } });
                    this.entityIcons.push({ entityType: "ODF", icon: { url: "images/map-entities/odf.png" } });
                    this.entityIcons.push({ entityType: "Pole", icon: { url: "images/map-entities/pole.png" } });
                    this.entityIcons.push({ entityType: "PoP", icon: { url: "images/map-entities/pop.png" } });
                    this.entityIcons.push({ entityType: "Splitter", icon: { url: "images/map-entities/splitter.png" } });
                    this.entityIcons.push({ entityType: "SpliceClosure", icon: { url: "images/map-entities/spliceclosure.png" } });
                    this.layers.push({ id: "Cable", name: "Cable" });
                    this.layers.push({ id: "Duct", name: "Duct" });
                    this.layers.push({ id: "MicroDuct", name: "MicroDuct" });
                    this.layers.push({ id: "Chamber", name: "Chamber" });
                    this.layers.push({ id: "ODF", name: "ODF" });
                    this.layers.push({ id: "Pole", name: "Pole" });
                    this.layers.push({ id: "PoP", name: "PoP" });
                    this.layers.push({ id: "SpliceClosure", name: "Splice Closure" });
                    this.layers.push({ id: "Splitter", name: "Splitter" });
                    this.layers.push({ id: "Homepass", name: "Homepass" });
                    this.entityIcons.push({ entityType: "FAT", icon: { url: "images/map-entities/FAT.png" } });
                    this.entityIcons.push({ entityType: "FDT", icon: { url: "images/map-entities/FDT.png" } });
                    this.layers.push({ id: "FAT", name: "FAT" });
                    this.layers.push({ id: "FDT", name: "FDT" });
                    this.isEntitiesGenerated = false;
                }
                DesignMap.prototype.ngOnInit = function () {
                    var _this = this;
                    this.DeleteFlag = null;
                    this.selectedEntity = null;
                    this.CurrentselectedEntity = null;
                    this.designEntity = 0;
                    var location = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].getLatLng(this.appConfig.settings.MapCenter);
                    if (this.design.bluePrint) {
                        location = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].convertToPosition(this.design.bluePrint.coordinates);
                    }
                    this.map = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].initializeMap('designMap', location, 18, 21);
                    this.mapEntitiesHelper = new _services_map_entities_helper__WEBPACK_IMPORTED_MODULE_9__["MapEntitiesHelper"](this.map);
                    var overlay = GMHelper.createOverlay(this.map);
                    var entityItems = $('.entityMenu img');
                    this.entitiesHelper = new _services_entities_helper__WEBPACK_IMPORTED_MODULE_7__["EntitiesHelper"](this.design.bookingIds, this.design.generatedCodes);
                    var mapEntitiesHelper = new _services_map_entities_helper__WEBPACK_IMPORTED_MODULE_9__["MapEntitiesHelper"](this.map);
                    var des = this.des;
                    for (var i = 0; i < entityItems.length; i++) {
                        $(entityItems[i]).draggable({
                            helper: 'clone', containment: '#designMap',
                            stop: function (e) {
                                var seg = _this.design.bluePrint.children[0].segments;
                                _this.Data = _this.design.bluePrint.children;
                                var dropPoint = new google.maps.Point(e.pageX - 250, e.pageY - 200);
                                var entityType = e.target.attributes[1].nodeValue;
                                var latLng = GMHelper.getLatLongFromDragPoint(overlay, dropPoint);
                                if (entityType == "Chamber") {
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.chamberService.getChambers();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (seg) {
                                                _this.CurrentselectedEntity = null;
                                                _this.chamber = null;
                                                if (seg[0].chambers == null) {
                                                    seg[0].chambers = new Array();
                                                    _this.chamber.entityType = "Chamber";
                                                    _this.chamber.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.chamber.code = _this.entitiesHelper.generatedCodes('Chamber');
                                                    _this.chamber.name = _this.chamber.code;
                                                    _this.chamber.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.chamber, { url: "images/map-entities/chamber.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.chamber.suppliers = new Array();
                                                    _this.chamber.suppliers.push(supplier);
                                                    seg[0].chambers.push(_this.chamber);
                                                    _this.isEditable(true, marker);
                                                }
                                                else {
                                                    _this.CurrentselectedEntity = null;
                                                    _this.chamber = null;
                                                    _this.chamber = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].chambers[0]);
                                                    if (_this.chamber == undefined) {
                                                        _this.chamber = null;
                                                    }
                                                    if (_this.ChamberIncrementalID == 0) {
                                                        for (var i = seg[0].chambers.length - 1; i >= 0; i--) {
                                                            if (seg[0].chambers[i].code != undefined || seg[0].chambers[i].code != null) {
                                                                var ID2 = seg[0].chambers[i].code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                _this.ChamberIncrementalID = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        _this.ChamberIncrementalID = _this.ChamberIncrementalID + 1;
                                                    }
                                                    _this.chamber.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.chamber.code = 'Chamber_' + _this.ChamberIncrementalID;
                                                    _this.chamber.name = 'Chamber_' + _this.ChamberIncrementalID;
                                                    _this.chamber.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.chamber, { url: "images/map-entities/chamber.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var getdata = $.grep(_this.masterEntities, function (l) {
                                                        return l.default == "true";
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.chamber.suppliers = new Array();
                                                    _this.chamber.suppliers.push(supplier);
                                                    seg[0].chambers.push(_this.chamber);
                                                    _this.isEditable(true, marker);
                                                }
                                            }
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "Pole") {
                                    _this.getdata = null;
                                    var masterSvc = _this.poleService.getPoles();
                                    masterSvc.subscribe(function (resp) {
                                        if (resp.data != null && resp.data.length > 0) {
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (seg) {
                                                _this.poles = null;
                                                if (seg[0].poles == null) {
                                                    seg[0].poles = new Array();
                                                    _this.poles.entityType = "Pole";
                                                    _this.poles.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.poles.code = _this.entitiesHelper.generatedCodes('Pole');
                                                    ;
                                                    _this.poles.name = _this.poles.code;
                                                    _this.poles.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.poles, { url: "images/map-entities/pole.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.poles.suppliers = new Array();
                                                    _this.poles.suppliers.push(supplier);
                                                    seg[0].poles.push(_this.poles);
                                                    _this.isEditable(true, marker);
                                                }
                                                else {
                                                    _this.CurrentselectedEntity = null;
                                                    _this.poles = null;
                                                    if (_this.PoleIncrementalID == 0) {
                                                        for (var i = seg[0].poles.length - 1; i >= 0; i--) {
                                                            //seg[0].splitters[20].code
                                                            if (seg[0].poles[i].code != undefined || seg[0].poles[i].code != null) {
                                                                var ID2 = seg[0].poles[i].code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                _this.PoleIncrementalID = parseInt(ID4[1]) + 1;
                                                                //k = true;
                                                                break;
                                                            }
                                                            else {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        _this.PoleIncrementalID = _this.PoleIncrementalID + 1;
                                                    }
                                                    _this.poles = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].poles[0]);
                                                    _this.poles.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.poles.code = 'Poles_' + _this.PoleIncrementalID;
                                                    _this.poles.name = 'Poles_' + _this.PoleIncrementalID;
                                                    //newPole.name = newPole.code;
                                                    _this.poles.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.poles, { url: "images/map-entities/pole.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.poles.suppliers = new Array();
                                                    _this.poles.suppliers.push(supplier);
                                                    seg[0].poles.push(_this.poles);
                                                    _this.isEditable(true, marker);
                                                }
                                            }
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "UndergroundCable") {
                                    var seg1_1 = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_8__["Segment"](); // this.design.bluePrint.children[0].segments;
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.cableService.getCables();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            //var marker = mapEntitiesHelper.drawLine(cable, "#000000", 2, false, true);
                                            var parentThis = _this;
                                            var colour = "#000000";
                                            var lineWeight = 3;
                                            var polyline_1 = new google.maps.Polyline({
                                                strokeColor: colour,
                                                strokeOpacity: 1.0,
                                                strokeWeight: lineWeight,
                                                map: _this.map
                                            });
                                            var path_1 = polyline_1.getPath();
                                            polyline_1.setMap(_this.map);
                                            GMHelper.clearClickListener(_this.map, "click");
                                            GMHelper.addListener(_this.map, "click", function (event) {
                                                polyline_1.setEditable(true);
                                                path_1 = polyline_1.getPath();
                                                path_1.push(event.latLng);
                                            });
                                            _this.map.setOptions({ draggableCursor: 'crosshair' });
                                            GMHelper.addListener(polyline_1, "rightclick", function (event) {
                                                GMHelper.clearClickListener(polyline_1, "rightclick");
                                                GMHelper.clearClickListener(polyline_1.map, "click");
                                                polyline_1.map.setOptions({ draggableCursor: '' });
                                                polyline_1.setEditable(false);
                                                //if (this.CableIncrementalID == undefined) {
                                                var id = 0;
                                                if (seg.length != undefined && seg.length > 0) {
                                                    if (id == 0) {
                                                        for (var i = seg.length - 1; i >= 0; i--) {
                                                            if (seg[i].cable != undefined || seg[i].cable != null) {
                                                                var ID2 = seg[i].cable.code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                id = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        id = id + 1;
                                                    }
                                                }
                                                //let seg1 = new Segment();// this.design.bluePrint.children[0].segments;
                                                if (id == 0) {
                                                    id = 1;
                                                }
                                                seg1_1.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                var cable = new _entities_models_cable__WEBPACK_IMPORTED_MODULE_17__["Cable"]();
                                                cable.entityType = "Cable";
                                                cable.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                cable.code = 'Cable_' + id;
                                                cable.name = cable.code;
                                                cable.isUnderground = true;
                                                seg1_1.cable = cable;
                                                //this.isEditable(true, marker);
                                                var coords = polyline_1.getPath().getArray();
                                                var newCoords = new Array();
                                                coords.forEach(function (x) {
                                                    newCoords.push([x.lng(), x.lat()]);
                                                });
                                                cable.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["LineString"]();
                                                cable.geometry.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].cleanLineCoordinates(newCoords);
                                                cable.measuredLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].getLength(cable.geometry.coordinates);
                                                var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                supplier.currency = parentThis.getdata.currency;
                                                supplier.name = parentThis.getdata.name;
                                                supplier.stockQty = parentThis.getdata.stockQty;
                                                supplier.price = parentThis.getdata.price;
                                                supplier.validFrom = parentThis.getdata.validFrom;
                                                supplier.validTo = parentThis.getdata.validTo;
                                                cable.suppliers = new Array();
                                                cable.suppliers.push(supplier);
                                                seg1_1.coordinates = cable.geometry.coordinates;
                                                seg1_1.cable = cable;
                                                parentThis.design.bluePrint.children[0].segments.push(seg1_1);
                                                var marker = mapEntitiesHelper.drawLine(cable, "#000000", 2, false, true);
                                                //this.selectedEntity = polyline.data;
                                                _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                    parentThis.selectedEntity = marker.data;
                                                });
                                            });
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "Overhead Cable") {
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.ductService.getDucts();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            //var marker = mapEntitiesHelper.drawLine(cable, "#000000", 2, false, true);
                                            var parentThis = _this;
                                            var colour = "#000000";
                                            var lineWeight = 3;
                                            var polyline_2 = new google.maps.Polyline({
                                                strokeColor: colour,
                                                strokeOpacity: 1.0,
                                                strokeWeight: lineWeight,
                                                map: _this.map
                                            });
                                            var path_2 = polyline_2.getPath();
                                            polyline_2.setMap(_this.map);
                                            GMHelper.clearClickListener(_this.map, "click");
                                            GMHelper.addListener(_this.map, "click", function (event) {
                                                polyline_2.setEditable(true);
                                                path_2 = polyline_2.getPath();
                                                path_2.push(event.latLng);
                                            });
                                            _this.map.setOptions({ draggableCursor: 'crosshair' });
                                            GMHelper.addListener(polyline_2, "rightclick", function (event) {
                                                GMHelper.clearClickListener(polyline_2, "rightclick");
                                                GMHelper.clearClickListener(polyline_2.map, "click");
                                                polyline_2.map.setOptions({ draggableCursor: '' });
                                                polyline_2.setEditable(false);
                                                var id = 0;
                                                if (seg.length != undefined && seg.length > 0) {
                                                    if (id == 0) {
                                                        for (var i = seg.length - 1; i >= 0; i--) {
                                                            if (seg[i].cable != undefined || seg[i].cable != null) {
                                                                var ID2 = seg[i].cable.code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                id = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                //id = 1;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        id = id + 1;
                                                    }
                                                }
                                                if (id == 0) {
                                                    id = 1;
                                                }
                                                var seg1 = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_8__["Segment"](); // this.design.bluePrint.children[0].segments;
                                                seg1.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                var cable = new _entities_models_cable__WEBPACK_IMPORTED_MODULE_17__["Cable"]();
                                                cable.entityType = "Cable";
                                                cable.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                var ids = cable.id.toString();
                                                cable.name = "Cable_" + id;
                                                cable.code = "Cable_" + id;
                                                cable.isUnderground = false;
                                                seg1.cable = cable;
                                                //this.isEditable(true, marker);
                                                var coords = polyline_2.getPath().getArray();
                                                var newCoords = new Array();
                                                coords.forEach(function (x) {
                                                    newCoords.push([x.lng(), x.lat()]);
                                                });
                                                cable.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["LineString"]();
                                                cable.geometry.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].cleanLineCoordinates(newCoords);
                                                cable.measuredLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].getLength(cable.geometry.coordinates);
                                                var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                supplier.currency = parentThis.getdata.currency;
                                                supplier.name = parentThis.getdata.name;
                                                supplier.stockQty = parentThis.getdata.stockQty;
                                                supplier.price = parentThis.getdata.price;
                                                supplier.validFrom = parentThis.getdata.validFrom;
                                                supplier.validTo = parentThis.getdata.validTo;
                                                cable.suppliers = new Array();
                                                cable.suppliers.push(supplier);
                                                seg1.coordinates = cable.geometry.coordinates;
                                                seg1.cable = cable;
                                                parentThis.design.bluePrint.children[0].segments.push(seg1);
                                                var marker = mapEntitiesHelper.drawLine(cable, "#000000", 2, false, true);
                                                //this.selectedEntity = polyline.data;
                                                _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                    parentThis.selectedEntity = marker.data;
                                                });
                                            });
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                //createEntity(entityType, latLng);
                                if (entityType == "Duct") {
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.ductService.getDucts();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            var lineSymbol = {
                                                path: 'M 0,-1 0,1',
                                                strokeOpacity: 1,
                                                scale: 4
                                            };
                                            var polyline = new google.maps.Polyline({
                                                strokeColor: '#FFA500',
                                                strokeOpacity: 0,
                                                editable: true,
                                                icons: [{
                                                        icon: lineSymbol,
                                                        offset: '0',
                                                        repeat: '20px'
                                                    }],
                                            });
                                            var parentThis = _this;
                                            var path_3 = polyline.getPath();
                                            polyline.setMap(_this.map);
                                            GMHelper.clearClickListener(_this.map, "click");
                                            GMHelper.addListener(_this.map, "click", function (event) {
                                                polyline.setEditable(true);
                                                path_3 = polyline.getPath();
                                                path_3.push(event.latLng);
                                            });
                                            _this.map.setOptions({ draggableCursor: 'crosshair' });
                                            GMHelper.addListener(polyline, "rightclick", function (event) {
                                                GMHelper.clearClickListener(polyline, "rightclick");
                                                GMHelper.clearClickListener(polyline.map, "click");
                                                polyline.map.setOptions({ draggableCursor: '' });
                                                polyline.setEditable(false);
                                                var id = 0;
                                                if (seg.length != undefined && seg.length > 0) {
                                                    if (id == 0) {
                                                        for (var i = seg.length - 1; i >= 0; i--) {
                                                            if (seg[i].ducts != undefined || seg[i].ducts != null) {
                                                                var ID2 = seg[i].ducts.code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                id = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                id = 1;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        id = id + 1;
                                                    }
                                                }
                                                var seg1 = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_8__["Segment"](); // this.design.bluePrint.children[0].segments;
                                                //seg1.id = Helper.generateObjectId();
                                                var duct = new _entities_models_duct__WEBPACK_IMPORTED_MODULE_23__["Duct"]();
                                                duct.entityType = "Duct";
                                                duct.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                duct.name = "Duct_" + id;
                                                duct.code = "Duct_" + id;
                                                //seg1.ducts = duct;
                                                //this.isEditable(true, marker);
                                                var coords = polyline.getPath().getArray();
                                                var newCoords = new Array();
                                                coords.forEach(function (x) {
                                                    newCoords.push([x.lng(), x.lat()]);
                                                });
                                                duct.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["LineString"]();
                                                duct.geometry.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].cleanLineCoordinates(newCoords);
                                                duct.measuredLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].getLength(duct.geometry.coordinates);
                                                var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                supplier.currency = parentThis.getdata.currency;
                                                supplier.name = parentThis.getdata.name;
                                                supplier.stockQty = parentThis.getdata.stockQty;
                                                supplier.price = parentThis.getdata.price;
                                                supplier.validFrom = parentThis.getdata.validFrom;
                                                supplier.validTo = parentThis.getdata.validTo;
                                                duct.suppliers = new Array();
                                                duct.suppliers.push(supplier);
                                                //seg1.coordinates = duct.geometry.coordinates;
                                                seg1.ducts = duct;
                                                parentThis.design.bluePrint.children[0].segments.push(seg1);
                                                var marker = mapEntitiesHelper.drawDuctLine(duct, "#000000", 2, false, true);
                                                //this.selectedEntity = polyline.data;
                                                _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                    parentThis.selectedEntity = marker.data;
                                                });
                                            });
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "Micro Duct") {
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.ductService.getDucts();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            var lineSymbol = {
                                                path: 'M 0,-1 0,1',
                                                strokeOpacity: 1,
                                                scale: 4
                                            };
                                            var polyline = new google.maps.Polyline({
                                                strokeColor: '#000000',
                                                strokeOpacity: 0,
                                                editable: true,
                                                icons: [{
                                                        icon: lineSymbol,
                                                        offset: '0',
                                                        repeat: '20px'
                                                    }],
                                            });
                                            var parentThis = _this;
                                            var path_4 = polyline.getPath();
                                            polyline.setMap(_this.map);
                                            GMHelper.clearClickListener(_this.map, "click");
                                            GMHelper.addListener(_this.map, "click", function (event) {
                                                polyline.setEditable(true);
                                                path_4 = polyline.getPath();
                                                path_4.push(event.latLng);
                                            });
                                            _this.map.setOptions({ draggableCursor: 'crosshair' });
                                            GMHelper.addListener(polyline, "rightclick", function (event) {
                                                GMHelper.clearClickListener(polyline, "rightclick");
                                                GMHelper.clearClickListener(polyline.map, "click");
                                                polyline.map.setOptions({ draggableCursor: '' });
                                                polyline.setEditable(false);
                                                var id = 0;
                                                if (seg.length != undefined && seg.length > 0) {
                                                    if (id == 0) {
                                                        for (var i = seg.length - 1; i >= 0; i--) {
                                                            if (seg[i].ducts != undefined || seg[i].ducts != null) {
                                                                var ID2 = seg[i].ducts.code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                id = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                id = 1;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        id = id + 1;
                                                    }
                                                }
                                                var seg1 = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_8__["Segment"](); // this.design.bluePrint.children[0].segments;
                                                seg1.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                var microduct = new _entities_models_MicroDuct__WEBPACK_IMPORTED_MODULE_20__["MicroDuct"]();
                                                microduct.entityType = "MicroDuct";
                                                microduct.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                var ids = microduct.id.toString();
                                                microduct.name = "MicroDuct_" + id;
                                                microduct.code = "MicroDuct_" + id;
                                                seg1.microduct = microduct;
                                                //this.isEditable(true, marker);
                                                var coords = polyline.getPath().getArray();
                                                var newCoords = new Array();
                                                coords.forEach(function (x) {
                                                    newCoords.push([x.lng(), x.lat()]);
                                                });
                                                microduct.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["LineString"]();
                                                microduct.geometry.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].cleanLineCoordinates(newCoords);
                                                microduct.measuredLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].getLength(microduct.geometry.coordinates);
                                                var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                supplier.currency = parentThis.getdata.currency;
                                                supplier.name = parentThis.getdata.name;
                                                supplier.stockQty = parentThis.getdata.stockQty;
                                                supplier.price = parentThis.getdata.price;
                                                supplier.validFrom = parentThis.getdata.validFrom;
                                                supplier.validTo = parentThis.getdata.validTo;
                                                microduct.suppliers = new Array();
                                                microduct.suppliers.push(supplier);
                                                //seg1.coordinates = microduct.geometry.coordinates;
                                                seg1.microduct = microduct;
                                                parentThis.design.bluePrint.children[0].segments.push(seg1);
                                                var marker = mapEntitiesHelper.drawMicroDuctLine(microduct, "#000000", 2, false, true);
                                                //this.selectedEntity = polyline.data;
                                                _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                    parentThis.selectedEntity = marker.data;
                                                });
                                            });
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "Pop") {
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.chamberService.getChambers();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (seg) {
                                                if (seg[0].pops == null) {
                                                    seg[0].pops = new Array();
                                                    var pop = new _entities_models_pop__WEBPACK_IMPORTED_MODULE_21__["PoP"]();
                                                    pop.entityType = "PoP";
                                                    pop.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    var Uid = pop.id.toString();
                                                    pop.name = 'POP_' + Uid.substring(0, 5);
                                                    pop.code = pop.name;
                                                    pop.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(pop, { url: "images/map-entities/pop.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = "dollar";
                                                    supplier.name = "supplier1";
                                                    supplier.stockQty = 7;
                                                    supplier.price = 1200;
                                                    supplier.validFrom = "2019-12-18";
                                                    supplier.validTo = "2019-12-25";
                                                    pop.suppliers = new Array();
                                                    pop.suppliers.push(supplier);
                                                    seg[0].pops.push(pop);
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    _this.isEditable(true, marker);
                                                }
                                                else {
                                                    var popLength = seg[0].pops.length + 1;
                                                    var newpop = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].pops[0]);
                                                    var LastPopIndex = _this.Data.length - 1;
                                                    var k = false;
                                                    if (_this.PopIncrementalID == 0) {
                                                        for (var i = seg[0].pops.length - 1; i >= 0; i--) {
                                                            //seg[0].splitters[20].code
                                                            if (seg[0].pops[i].code != undefined || seg[0].pops[i].code != null) {
                                                                var ID2 = seg[0].pops[i].code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                _this.PopIncrementalID = parseInt(ID4[1]) + 1;
                                                                k = true;
                                                                break;
                                                            }
                                                            else {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        _this.PopIncrementalID = _this.PopIncrementalID + 1;
                                                    }
                                                    newpop.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    newpop.code = 'Pop_' + _this.PopIncrementalID;
                                                    newpop.name = 'Pop_' + _this.PopIncrementalID;
                                                    newpop.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(newpop, { url: "images/map-entities/pop.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    seg[0].pops.push(newpop);
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    _this.isEditable(true, marker);
                                                }
                                            }
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "FAT") {
                                    _this.fatdata = new _entities_models_fat__WEBPACK_IMPORTED_MODULE_33__["FAT"]();
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.fatService.getfats();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (seg) {
                                                _this.CurrentselectedEntity = null;
                                                if (seg[0].fats == null) {
                                                    seg[0].fats = new Array();
                                                    _this.fatdata.entityType = "FAT";
                                                    _this.fatdata.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.fatdata.code = "Fat_1";
                                                    _this.fatdata.name = "Fat_1";
                                                    _this.fatdata.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.fatdata, { url: "images/map-entities/FAT.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.fatdata.suppliers = new Array();
                                                    _this.fatdata.suppliers.push(supplier);
                                                    seg[0].fats.push(_this.fatdata);
                                                    _this.isEditable(true, marker);
                                                }
                                                else {
                                                    _this.CurrentselectedEntity = null;
                                                    //this.fatdata = null;
                                                    _this.fatdata = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].fats[0]);
                                                    if (_this.fatdata == undefined) {
                                                        _this.fatdata = new _entities_models_fat__WEBPACK_IMPORTED_MODULE_33__["FAT"]();
                                                    }
                                                    if (_this.FatIncrementalID == 0) {
                                                        for (var i = seg[0].fats.length - 1; i >= 0; i--) {
                                                            if (seg[0].fats[i].code != undefined || seg[0].fats[i].code != null) {
                                                                var ID2 = seg[0].fats[i].code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                _this.FatIncrementalID = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        _this.FatIncrementalID = _this.FatIncrementalID + 1;
                                                    }
                                                    _this.fatdata.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.fatdata.code = 'Fat_' + _this.FatIncrementalID;
                                                    _this.fatdata.name = 'Fat_' + _this.FatIncrementalID;
                                                    _this.fatdata.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.fatdata, { url: "images/map-entities/FAT.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.fatdata.suppliers = new Array();
                                                    _this.fatdata.suppliers.push(supplier);
                                                    seg[0].fats.push(_this.fatdata);
                                                    _this.isEditable(true, marker);
                                                }
                                            }
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                                if (entityType == "FDT") {
                                    _this.fatdata = new _entities_models_fat__WEBPACK_IMPORTED_MODULE_33__["FAT"]();
                                    _this.masterEntities = null;
                                    _this.getdata = null;
                                    var masterSvc = _this.fdtService.getfdts();
                                    masterSvc.subscribe(function (resp) {
                                        _this.masterEntities = null;
                                        if (resp.data != null && resp.data.length > 0) {
                                            _this.masterEntities = resp.data;
                                            for (var i = 0; i <= resp.data.length - 1; i++) {
                                                for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                                    if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                        _this.getdata = resp.data[i].suppliers[j];
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (seg) {
                                                _this.CurrentselectedEntity = null;
                                                if (seg[0].fdts == null) {
                                                    seg[0].fdts = new Array();
                                                    _this.fdt.entityType = "FDT";
                                                    _this.fdt.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.fdt.code = "Fdt_1";
                                                    _this.fdt.name = "Fdt_1";
                                                    ;
                                                    _this.fdt.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.fdt, { url: "images/map-entities/FDT.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.fdt.suppliers = new Array();
                                                    _this.fdt.suppliers.push(supplier);
                                                    seg[0].fdts.push(_this.fdt);
                                                    _this.isEditable(true, marker);
                                                }
                                                else {
                                                    _this.CurrentselectedEntity = null;
                                                    _this.fdt = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].fdts[0]);
                                                    if (_this.fdt == undefined) {
                                                        _this.fdt = new _entities_models_Solution2_zip__WEBPACK_IMPORTED_MODULE_34__["FDT"]();
                                                    }
                                                    if (_this.FdtIncrementalID == 0) {
                                                        for (var i = seg[0].fdts.length - 1; i >= 0; i--) {
                                                            if (seg[0].fdts[i].code != undefined || seg[0].fdts[i].code != null) {
                                                                var ID2 = seg[0].fdts[i].code;
                                                                var ID3 = ID2.toString();
                                                                var ID4 = ID3.split('_');
                                                                _this.FdtIncrementalID = parseInt(ID4[1]) + 1;
                                                                break;
                                                            }
                                                            else {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        _this.FdtIncrementalID = _this.FdtIncrementalID + 1;
                                                    }
                                                    _this.fdt.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                                    _this.fdt.code = 'Fdt_' + _this.FdtIncrementalID;
                                                    _this.fdt.name = 'Fdt_' + _this.FdtIncrementalID;
                                                    _this.fdt.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([latLng.lng(), latLng.lat()]);
                                                    var marker = mapEntitiesHelper.drawPoint(_this.fdt, { url: "images/map-entities/FDT.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                                    _this.CurrentselectedEntity = marker.data;
                                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                        _this.selectedEntity = marker.data;
                                                    });
                                                    var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                                    supplier.currency = _this.getdata.currency;
                                                    supplier.name = _this.getdata.name;
                                                    supplier.stockQty = _this.getdata.stockQty;
                                                    supplier.price = _this.getdata.price;
                                                    supplier.validFrom = _this.getdata.validFrom;
                                                    supplier.validTo = _this.getdata.validTo;
                                                    _this.fdt.suppliers = new Array();
                                                    _this.fdt.suppliers.push(supplier);
                                                    seg[0].fdts.push(_this.fdt);
                                                    _this.isEditable(true, marker);
                                                    //this.isEditable(true, marker);
                                                }
                                            }
                                        }
                                    }, function (err) {
                                        _this.masterEntities = new Array();
                                    });
                                }
                            }
                        });
                    }
                };
                DesignMap.prototype.onHover = function (event) {
                    var location = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].convertToPosition(event);
                    var bounds = new google.maps.LatLngBounds();
                    if (this.marker != null) {
                        this.marker.setMap(null);
                    }
                    this.marker = new google.maps.Marker({
                        position: location,
                        cursor: 'pointer',
                        icon: 'images/dwnArrow.png',
                        map: this.map
                    });
                    this.marker.setAnimation(google.maps.Animation.BOUNCE);
                    bounds.extend(location);
                    this.map.fitBounds(bounds);
                };
                DesignMap.prototype.onspliterHover = function (event) {
                    var data;
                    var laln;
                    var id;
                    //for (let i = 0; i < this.design.bluePrint.children.length; i++) {
                    //    for (let j = 0; j < this.design.bluePrint.children[i].segments.length; j++) {
                    //        if (this.design.bluePrint.children[i].segments[j].splitters != undefined) {
                    //            data = $.grep(this.design.bluePrint.children[i].segments[j].splitters, function (n) {
                    //                if (n.code == event) {
                    //                    laln = n.geometry.coordinates;
                    //                    return laln;
                    //                }
                    //            })
                    //        }
                    //    }
                    //}
                    for (var i = 0; i < this.design.bluePrint.children.length; i++) {
                        for (var j = 0; j < this.design.bluePrint.children[i].children.length; j++) {
                            data = $.grep(this.design.bluePrint.children[i].children[j].segments[0].splitters, function (n) {
                                return n.geometry.coordinates;
                            });
                        }
                    }
                    for (var i = 0; i < data.length; i++) {
                        var location = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].convertToPosition(data[i].geometry.coordinates);
                        //Check if the Location is in Bounds of the Map
                        //this.map.getBounds().contains(location);
                        var bounds = new google.maps.LatLngBounds();
                        if (this.marker != null) {
                            this.marker.setMap(null);
                        }
                        this.marker = new google.maps.Marker({
                            position: location,
                            cursor: 'pointer',
                            icon: 'images/dwnArrow.png',
                            map: this.map
                        });
                        this.marker.setAnimation(google.maps.Animation.BOUNCE);
                        this.marker.Animation = "Bounce";
                        bounds.extend(location);
                        this.map.fitBounds(bounds);
                    }
                    //for (let i = 0; i < this.design.bluePrint.children.length; i++) {
                    //    for (let i = 0; i < this.design.bluePrint.children[i].children.length; i++) {
                    //        data = $.grep(this.design.bluePrint.children[i].children, function (n) {
                    //            if (n.levelId == id) {
                    //                return n;
                    //            }
                    //        })
                    //    }
                    //}
                };
                DesignMap.prototype.onLeave = function () {
                    //this.marker.setAnimation(null);
                    this.map.setMap(null);
                    this.marker.setMap(null);
                    // this.map(null);
                };
                DesignMap.prototype.isEditable = function (value, marker) {
                    if (value) {
                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, "rightclick", function (event) {
                            if (marker.draggable)
                                marker.setDraggable(false);
                            else
                                marker.setDraggable(true);
                        });
                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'dragend', function (event) {
                            var latLng = event.latLng;
                            marker.data.geometry.coordinates = [latLng.lng(), latLng.lat()];
                            //let index = this.changedSegments.findIndex(x => (x.levelId == marker.data.levelId && x.segmentId == marker.data.segmentId));
                            //if (index == -1)
                            //   this.changedSegments.push({ levelId: marker.data.levelId, segmentId: marker.data.segmentId });
                        });
                    }
                };
                DesignMap.prototype.ngOnChanges = function (changes) {
                    this.selectedEntity = null;
                    if (this.design.bluePrint && this.design.bluePrint.children && this.design.bluePrint.children.length > 0) {
                        this.entitiesHelper = new _services_entities_helper__WEBPACK_IMPORTED_MODULE_7__["EntitiesHelper"](this.design.bookingIds, this.design.generatedCodes);
                        this.generateMapEntities(this.design.bluePrint);
                        this.isEntitiesGenerated = true;
                        this.map.setCenter({ lat: this.design.bluePrint.coordinates[1], lng: this.design.bluePrint.coordinates[0] });
                    }
                    else {
                        this.isEntitiesGenerated = false;
                    }
                    this.des = this.design.bluePrint;
                };
                DesignMap.prototype.isAllSelected = function () {
                    var numSelected = this.selectedLayers ? this.selectedLayers.length : 0;
                    var numRows = this.layers.length;
                    return numSelected === numRows;
                };
                DesignMap.prototype.toggleSelection = function (layer) {
                    var index = -1;
                    if (this.selectedLayers)
                        index = this.selectedLayers.findIndex(function (x) { return x == layer.id; });
                    else
                        this.selectedLayers = [];
                    if (index == -1)
                        this.selectedLayers.push(layer.id);
                    else
                        this.selectedLayers.splice(index, 1);
                };
                DesignMap.prototype.masterToggle = function () {
                    var _this = this;
                    if (this.isAllSelected()) {
                        this.selectedLayers = [];
                    }
                    else {
                        this.selectedLayers = [];
                        this.layers.forEach(function (x) { return _this.selectedLayers.push(x.id); });
                    }
                };
                DesignMap.prototype.PlotEntity = function (value) {
                    var _this = this;
                    this.DeleteFlag = null;
                    this.DeleteFlag = value;
                    var ent = this.selectedEntity;
                    var seg = this.design.bluePrint.children[0].segments;
                    var mapEntitiesHelper = new _services_map_entities_helper__WEBPACK_IMPORTED_MODULE_9__["MapEntitiesHelper"](this.map);
                    if (seg) {
                        if (value == 'Splitter') {
                            this.getdata = null;
                            var masterSvc = this.splitterService.getSplitters();
                            masterSvc.subscribe(function (resp) {
                                _this.masterEntities = null;
                                if (resp.data != null && resp.data.length > 0) {
                                    _this.masterEntities = resp.data;
                                    for (var i = 0; i <= resp.data.length - 1; i++) {
                                        for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                            if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                _this.getdata = resp.data[i].suppliers[j];
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                    }
                                    if (seg) {
                                        if (seg[0].splitters == null) {
                                            seg[0].splitters = new Array();
                                            var splitters = new _entities_models_splitter__WEBPACK_IMPORTED_MODULE_16__["Splitter"]();
                                            splitters.entityType = "Splitter";
                                            splitters.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                            splitters.code = "Splitter_1";
                                            splitters.name = "Splitter_1";
                                            splitters.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent.geometry.coordinates[0], ent.geometry.coordinates[1]]);
                                            var marker = mapEntitiesHelper.drawPoint(splitters, { url: "images/map-entities/spliceclosure.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                            var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                            supplier.currency = _this.getdata.currency;
                                            supplier.name = _this.getdata.name;
                                            supplier.stockQty = _this.getdata.stockQty;
                                            supplier.price = _this.getdata.price;
                                            supplier.validFrom = _this.getdata.validFrom;
                                            supplier.validTo = _this.getdata.validTo;
                                            splitters.suppliers = new Array();
                                            splitters.suppliers.push(supplier);
                                            seg[0].splitters.push(splitters);
                                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                _this.selectedEntity = marker.data;
                                            });
                                            _this.isEditable(true, marker);
                                        }
                                        else {
                                            var splitters = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].splitters[0]);
                                            if (splitters == undefined) {
                                                splitters = new _entities_models_splitter__WEBPACK_IMPORTED_MODULE_16__["Splitter"]();
                                            }
                                            var k = false;
                                            if (_this.SplitterIncrementalID == 0) {
                                                for (var i = seg[0].splitters.length - 1; i >= 0; i--) {
                                                    //seg[0].splitters[20].code
                                                    if (seg[0].splitters[i].code != undefined || seg[0].splitters[i].code != null) {
                                                        var ID2 = seg[0].splitters[i].code;
                                                        var ID3 = ID2.toString();
                                                        var ID4 = ID3.split('_');
                                                        _this.SplitterIncrementalID = parseInt(ID4[1]) + 1;
                                                        k = true;
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            else {
                                                _this.SplitterIncrementalID = _this.SplitterIncrementalID + 1;
                                            }
                                            splitters.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                            splitters.code = 'Splitter_' + _this.SplitterIncrementalID;
                                            splitters.name = 'Splitters_' + _this.SplitterIncrementalID;
                                            //newPole.name = newPole.code;
                                            splitters.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent.geometry.coordinates[0], ent.geometry.coordinates[1]]);
                                            var marker = mapEntitiesHelper.drawPoint(splitters, { url: "images/map-entities/splitter.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                            var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                            supplier.currency = _this.getdata.currency;
                                            supplier.name = _this.getdata.name;
                                            supplier.stockQty = _this.getdata.stockQty;
                                            supplier.price = _this.getdata.price;
                                            supplier.validFrom = _this.getdata.validFrom;
                                            supplier.validTo = _this.getdata.validTo;
                                            splitters.suppliers = new Array();
                                            splitters.suppliers.push(supplier);
                                            seg[0].splitters.push(splitters);
                                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                _this.selectedEntity = marker.data;
                                            });
                                            _this.isEditable(true, marker);
                                        }
                                    }
                                }
                            }, function (err) {
                                _this.masterEntities = new Array();
                            });
                        }
                        if (value == 'Splice Closure') {
                            this.getdata = null;
                            var masterSvc = this.spliceClosureService.getSpliceClosures();
                            masterSvc.subscribe(function (resp) {
                                _this.masterEntities = null;
                                if (resp.data != null && resp.data.length > 0) {
                                    _this.masterEntities = resp.data;
                                    for (var i = 0; i <= resp.data.length - 1; i++) {
                                        for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                            if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                _this.getdata = resp.data[i].suppliers[j];
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                    }
                                    if (seg) {
                                        _this.onEntityTypeChange("SpliceClosure");
                                        if (seg[0].spliceClosures == null) {
                                            seg[0].spliceClosures = new Array();
                                            var spliceclosures = new src_app_entities_models_spliceClosure__WEBPACK_IMPORTED_MODULE_18__["SpliceClosure"]();
                                            spliceclosures.entityType = "SpliceClosure";
                                            spliceclosures.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                            spliceclosures.name = "SpliceClosure_1";
                                            spliceclosures.code = "SpliceClosure_1";
                                            spliceclosures.parentId = ent.id;
                                            spliceclosures.parentEntityType = ent.entityType;
                                            spliceclosures.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent.geometry.coordinates[0], ent.geometry.coordinates[1]]);
                                            var marker = mapEntitiesHelper.drawPoint(spliceclosures, { url: "images/map-entities/spliceclosure.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                            var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                            supplier.currency = _this.getdata.currency;
                                            supplier.name = _this.getdata.name;
                                            supplier.stockQty = _this.getdata.stockQty;
                                            supplier.price = _this.getdata.price;
                                            supplier.validFrom = _this.getdata.validFrom;
                                            supplier.validTo = _this.getdata.validTo;
                                            spliceclosures.suppliers = new Array();
                                            spliceclosures.suppliers.push(supplier);
                                            seg[0].spliceClosures.push(spliceclosures);
                                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                _this.selectedEntity = marker.data;
                                            });
                                            _this.isEditable(true, marker);
                                        }
                                        else {
                                            var spliceClosure = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].spliceClosures[0]);
                                            if (spliceClosure == undefined) {
                                                spliceClosure = new src_app_entities_models_spliceClosure__WEBPACK_IMPORTED_MODULE_18__["SpliceClosure"]();
                                            }
                                            var k = false;
                                            if (_this.SpliceClosureIncrementalID == 0) {
                                                for (var i = seg[0].spliceClosures.length - 1; i >= 0; i--) {
                                                    //seg[0].splitters[20].code
                                                    if (seg[0].spliceClosures[i].code != undefined || seg[0].spliceClosures[i].code != null) {
                                                        var ID2 = seg[0].spliceClosures[i].code;
                                                        var ID3 = ID2.toString();
                                                        var ID4 = ID3.split('_');
                                                        _this.SpliceClosureIncrementalID = parseInt(ID4[1]) + 1;
                                                        k = true;
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            else {
                                                _this.SpliceClosureIncrementalID = _this.SpliceClosureIncrementalID + 1;
                                            }
                                            spliceClosure.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                            spliceClosure.code = 'SpliceClosure_' + _this.SpliceClosureIncrementalID;
                                            spliceClosure.name = 'SpliceClosure_' + _this.SpliceClosureIncrementalID;
                                            spliceClosure.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent.geometry.coordinates[0], ent.geometry.coordinates[1]]);
                                            var marker = mapEntitiesHelper.drawPoint(spliceClosure, { url: "images/map-entities/spliceclosure.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                            var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                            supplier.currency = _this.getdata.currency;
                                            supplier.name = _this.getdata.name;
                                            supplier.stockQty = _this.getdata.stockQty;
                                            supplier.price = _this.getdata.price;
                                            supplier.validFrom = _this.getdata.validFrom;
                                            supplier.validTo = _this.getdata.validTo;
                                            spliceClosure.suppliers = new Array();
                                            spliceClosure.suppliers.push(supplier);
                                            seg[0].spliceClosures.push(spliceClosure);
                                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                _this.selectedEntity = marker.data;
                                            });
                                            _this.isEditable(true, marker);
                                        }
                                    }
                                }
                            }, function (err) {
                                _this.masterEntities = new Array();
                            });
                        }
                        if (value == 'odf') {
                            this.masterEntities = null;
                            this.getdata = null;
                            var masterSvc = this.odfService.getODFs();
                            masterSvc.subscribe(function (resp) {
                                _this.masterEntities = null;
                                if (resp.data != null && resp.data.length > 0) {
                                    _this.masterEntities = resp.data;
                                    for (var i = 0; i <= resp.data.length - 1; i++) {
                                        for (var j = 0; j <= resp.data[i].suppliers.length - 1; j++) {
                                            if (resp.data[i].suppliers[j].default != undefined && resp.data[i].suppliers[j].default == "true") {
                                                _this.getdata = resp.data[i].suppliers[j];
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                    }
                                    if (seg) {
                                        if (seg[0].odfs == null) {
                                            seg[0].odfs = new Array();
                                            var odf = new _entities_models_odf__WEBPACK_IMPORTED_MODULE_22__["ODF"]();
                                            odf.entityType = "ODF";
                                            odf.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                            var Uid = odf.id.toString();
                                            odf.code = 'ODF_1';
                                            odf.name = odf.code;
                                            odf.parentId = ent.id;
                                            odf.parentEntityType = ent.entityType;
                                            odf.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent.geometry.coordinates[0], ent.geometry.coordinates[1]]);
                                            var marker = mapEntitiesHelper.drawPoint(odf, { url: "images/map-entities/odf.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                            var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                            supplier.currency = _this.getdata.currency;
                                            supplier.name = _this.getdata.name;
                                            supplier.stockQty = _this.getdata.stockQty;
                                            supplier.price = _this.getdata.price;
                                            supplier.validFrom = _this.getdata.validFrom;
                                            supplier.validTo = _this.getdata.validTo;
                                            odf.suppliers = new Array();
                                            odf.suppliers.push(supplier);
                                            seg[0].odfs.push(odf);
                                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                _this.selectedEntity = marker.data;
                                            });
                                            _this.isEditable(true, marker);
                                        }
                                        else {
                                            var odfss = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].odfs[0]);
                                            if (odfss == undefined) {
                                                odfss = new _entities_models_odf__WEBPACK_IMPORTED_MODULE_22__["ODF"]();
                                            }
                                            var k = false;
                                            if (_this.OdfIncrementalID == 0) {
                                                for (var i = seg[0].odfs.length - 1; i >= 0; i--) {
                                                    //seg[0].splitters[20].code
                                                    if (seg[0].odfs[i].code != undefined || seg[0].odfs[i].code != null) {
                                                        var ID2 = seg[0].odfs[i].code;
                                                        var ID3 = ID2.toString();
                                                        var ID4 = ID3.split('_');
                                                        _this.OdfIncrementalID = parseInt(ID4[1]) + 1;
                                                        k = true;
                                                        break;
                                                    }
                                                    else {
                                                        continue;
                                                    }
                                                }
                                            }
                                            else {
                                                _this.OdfIncrementalID = _this.OdfIncrementalID + 1;
                                            }
                                            odfss.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                            odfss.code = 'Odf_' + _this.OdfIncrementalID;
                                            odfss.name = 'Odf_' + _this.OdfIncrementalID;
                                            odfss.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent.geometry.coordinates[0], ent.geometry.coordinates[1]]);
                                            var marker = mapEntitiesHelper.drawPoint(odfss, { url: "images/map-entities/odf.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                            var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                            supplier.currency = _this.getdata.currency;
                                            supplier.name = _this.getdata.name;
                                            supplier.stockQty = _this.getdata.stockQty;
                                            supplier.price = _this.getdata.price;
                                            supplier.validFrom = _this.getdata.validFrom;
                                            supplier.validTo = _this.getdata.validTo;
                                            odfss.suppliers = new Array();
                                            odfss.suppliers.push(supplier);
                                            seg[0].odfs.push(odfss);
                                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                                _this.selectedEntity = marker.data;
                                            });
                                            _this.isEditable(true, marker);
                                        }
                                    }
                                }
                            }, function (err) {
                                _this.masterEntities = new Array();
                            });
                        }
                    }
                };
                DesignMap.prototype.refreshLayers = function () {
                    if (this.design.bluePrint) {
                        if (this.isEntitiesGenerated == false) {
                            this.generateMapEntities(this.design.bluePrint);
                            this.isEntitiesGenerated = true;
                            this.map.setCenter({ lat: this.design.bluePrint.coordinates[1], lng: this.design.bluePrint.coordinates[0] });
                        }
                    }
                    this.toggleEntities(this.design.bluePrint);
                };
                DesignMap.prototype.refreshBlueprint = function () {
                    var _this = this;
                    $("#ajax-loading").show();
                    this.entitiesHelper = new _services_entities_helper__WEBPACK_IMPORTED_MODULE_7__["EntitiesHelper"](this.design.bookingIds, this.design.generatedCodes);
                    this.changedSegments.forEach(function (x) {
                        _this.refreshSegment(_this.design.bluePrint, x.levelId, x.segmentId);
                    });
                    this.bomHelper.generateBOQ(this.design);
                    $("#ajax-loading").hide();
                };
                DesignMap.prototype.refreshSegment = function (geoNode, levelId, segmentId) {
                    var _this = this;
                    if (geoNode.segments) {
                        var segment = geoNode.segments.find(function (x) { return x.id == segmentId; });
                        if (segment) {
                            if (segment.chambers && segment.chambers.length > 0) {
                                segment.coordinates = segment.cable.geometry.coordinates;
                                this.mapEntitiesHelper.removeMapObjects(segment.chambers);
                                segment.chambers = this.entitiesHelper.createChambers(segment.chambers[0], 100, segment, 10, 10);
                                this.plotPointEntities(segment.chambers, "Chamber", levelId, segmentId, true, true);
                            }
                            if (segment.poles && segment.poles.length > 0) {
                                segment.coordinates = segment.cable.geometry.coordinates;
                                this.mapEntitiesHelper.removeMapObjects(segment.poles);
                                segment.poles = this.entitiesHelper.createPoles(segment.poles[0], 100, segment, 10, 10);
                                this.plotPointEntities(segment.poles, "Pole", levelId, segmentId, true, true);
                            }
                            return false;
                        }
                    }
                    if (geoNode.children && geoNode.children.length > 0)
                        geoNode.children.forEach(function (g) {
                            _this.refreshSegment(g, g.id, segmentId);
                        });
                };
                DesignMap.prototype.toggleEntities = function (group) {
                    var _this = this;
                    if (group.children) {
                        group.children.forEach(function (x) {
                            if (x.levelName == "homepasses") {
                                //this.toggleEntity(x, this.selectedLayers.includes("Homepass"));
                                _this.setEntitiesVisible(x, _this.selectedLayers.includes("Homepass"));
                            }
                            //if (x.level == "Feeder") {
                            //    this.toggleEntity(x, this.selectedLayers.includes("Splitter"));
                            //}
                        });
                    }
                    if (group.segments)
                        group.segments.forEach(function (x) {
                            _this.setEntitiesVisible(x.cable, _this.selectedLayers.includes("Cable"));
                            _this.setEntitiesVisible(x.ducts, _this.selectedLayers.includes("Duct"));
                            _this.setEntitiesVisible(x.microduct, _this.selectedLayers.includes("MicroDuct"));
                            _this.setEntitiesVisible(x.chambers, _this.selectedLayers.includes("Chamber"));
                            _this.setEntitiesVisible(x.odfs, _this.selectedLayers.includes("ODF"));
                            _this.setEntitiesVisible(x.poles, _this.selectedLayers.includes("Pole"));
                            _this.setEntitiesVisible(x.splitters, _this.selectedLayers.includes("Splitter"));
                            _this.setEntitiesVisible(x.spliceClosures, _this.selectedLayers.includes("SpliceClosure"));
                            _this.setEntitiesVisible(x.pops, _this.selectedLayers.includes("PoP"));
                        });
                    if (group.children && group.children.length > 0)
                        group.children.forEach(function (g) {
                            _this.toggleEntities(g);
                        });
                };
                DesignMap.prototype.setEntitiesVisible = function (entities, isVisible) {
                    if (entities) {
                        if (entities.length > 0) {
                            entities.forEach(function (x) {
                                if (x && x['mapObject']) {
                                    x['mapObject'].setVisible(isVisible);
                                }
                            });
                        }
                        else {
                            if (entities['mapObject']) {
                                entities['mapObject'].setVisible(isVisible);
                            }
                        }
                    }
                };
                DesignMap.prototype.generateMapEntities = function (group) {
                    var _this = this;
                    var levelId = group.id;
                    if (group.children)
                        group.children.forEach(function (x) {
                            if (x.levelName == "homepasses") {
                                //x['entityType'] = "Homepass";
                                //let entityIcon = this.entityIcons.find(i => i.entityType == 'Homepass');
                                //this.drawPoint(x, entityIcon.icon, false);
                                _this.plotPointEntities(x, "Homepass", levelId, x.id, true, true);
                            }
                            //else {
                            //    x['entityType'] = "Splitter";
                            //    let entityIcon = this.entityIcons.find(i => i.entityType == 'Splitter');
                            //    this.drawPoint(x, entityIcon.icon, true);
                            //}
                        });
                    if (group.segments)
                        group.segments.forEach(function (x) {
                            _this.plotLineEntities(x.cable, "Cable", levelId, x.id, true, true);
                            _this.plotLineEntities(x.ducts, "Duct", levelId, x.id, true, true);
                            _this.plotLineEntities(x.microduct, "MicroDuct", levelId, x.id, true, true);
                            _this.plotPointEntities(x.chambers, "Chamber", levelId, x.id, true, true);
                            _this.plotPointEntities(x.odfs, "ODF", levelId, x.id, true, true);
                            _this.plotPointEntities(x.poles, "Pole", levelId, x.id, true, true);
                            _this.plotPointEntities(x.splitters, "Splitter", levelId, x.id, true, true);
                            _this.plotPointEntities(x.spliceClosures, "SpliceClosure", levelId, x.id, true, true);
                            _this.plotPointEntities(x.pops, "PoP", levelId, x.id, true, true);
                            _this.plotPointEntities(x.fats, "FAT", levelId, x.id, true, true);
                            _this.plotPointEntities(x.fdts, "FDT", levelId, x.id, true, true);
                        });
                    if (group.children && group.children.length > 0)
                        group.children.forEach(function (g) {
                            _this.generateMapEntities(g);
                        });
                };
                DesignMap.prototype.ExportTOPdf = function () {
                    var data = window.document.getElementById('designMap');
                    html2canvas__WEBPACK_IMPORTED_MODULE_31___default()(data, { allowTaint: true, useCORS: true }).then(function (canvas) {
                        var contentDataURL = canvas.toDataURL('image/jpeg');
                        var pdf = new jspdf__WEBPACK_IMPORTED_MODULE_32___default.a('landscape'); // A4 size page of PDF  
                        pdf.addImage(contentDataURL, 'JPEG', 10, 10, 280, 150, null, 'FAST');
                        pdf.save('MYPdf.pdf'); // Generated PDF
                    });
                };
                DesignMap.prototype.plotPointEntities = function (entities, entityType, levelId, segmentId, isEditable, attachMapObject) {
                    var _this = this;
                    var entityIcon = this.entityIcons.find(function (i) { return i.entityType == entityType; });
                    if (entities) {
                        if (entities.length > 0) {
                            entities.forEach(function (x) {
                                _this.plotPointEntity(x, entityIcon.icon, levelId, segmentId, isEditable, attachMapObject);
                            });
                        }
                        else {
                            this.plotPointEntity(entities, entityIcon.icon, levelId, segmentId, isEditable, attachMapObject);
                        }
                    }
                };
                DesignMap.prototype.plotPointEntity = function (entity, entityIcon, levelId, segmentId, isEditable, attachMapObject) {
                    var _this = this;
                    if (entity) {
                        entity["levelId"] = levelId;
                        entity["segmentId"] = segmentId;
                        var marker_1 = this.mapEntitiesHelper.drawPoint(entity, entityIcon, isEditable, attachMapObject);
                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker_1, 'click', function (event) {
                            if (marker_1.data.levelName == "homepasses") {
                                var homepass = _this.design.homepasses.find(function (x) { return x.id == marker_1.data.id; });
                                if (homepass) {
                                    _this.selectedEntity = homepass;
                                    _this.selectedEntity["entityType"] = "Homepass";
                                }
                            }
                            else
                                _this.selectedEntity = marker_1.data;
                            if (_this.selectedEntity.entityType == "Splitter") {
                                _this.entityType = _this.selectedEntity.code;
                                for (var i = 0; i < _this.design.bluePrint.children.length; i++) {
                                    for (var j = 0; j < _this.design.bluePrint.children[i].segments.length; j++) {
                                        for (var k = 0; k < _this.design.bluePrint.children[i].segments[j].splitters.length; j++) {
                                            if (_this.design.bluePrint.children[i].segments[j].splitters[k].code == _this.entityType) {
                                                _this.filterResult = _this.design.bluePrint.children[i].children;
                                            }
                                        }
                                    }
                                }
                            }
                            //if (this.selectedEntity.entityType == "Splitter") {
                            //    this.entityType = this.selectedEntity.code;
                            //    for (let i = 0; i < this.design.bluePrint.children.length; i++) {
                            //        if (this.design.bluePrint.children[i].id == this.selectedEntity.levelId) {
                            //            this.filterResult = this.design.bluePrint.children[i].children;
                            //        }
                            //    }
                            //}
                        });
                        if (isEditable) {
                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker_1, "rightclick", function (event) {
                                if (marker_1.draggable)
                                    marker_1.setDraggable(false);
                                else
                                    marker_1.setDraggable(true);
                            });
                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker_1, 'dragend', function (event) {
                                var latLng = event.latLng;
                                marker_1.data.geometry.coordinates = [latLng.lng(), latLng.lat()];
                                //let index = this.changedSegments.findIndex(x => (x.levelId == marker.data.levelId && x.segmentId == marker.data.segmentId));
                                //if (index == -1)
                                //   this.changedSegments.push({ levelId: marker.data.levelId, segmentId: marker.data.segmentId });
                            });
                        }
                    }
                };
                DesignMap.prototype.plotLineEntities = function (entities, entityType, levelId, segmentId, isEditable, attachMapObject) {
                    var _this = this;
                    if (entities) {
                        if (entities.length > 0) {
                            entities.forEach(function (x) {
                                _this.plotLineEntity(x, levelId, segmentId, isEditable, attachMapObject);
                            });
                        }
                        else {
                            this.plotLineEntity(entities, levelId, segmentId, isEditable, attachMapObject);
                        }
                    }
                };
                DesignMap.prototype.plotLineEntity = function (entity, levelId, segmentId, isEditable, attachMapObject) {
                    var _this = this;
                    if (entity) {
                        entity["levelId"] = levelId;
                        entity["segmentId"] = segmentId;
                        var polyLine_1 = this.mapEntitiesHelper.drawLine(entity, "#000", 2, isEditable, attachMapObject);
                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(polyLine_1, 'click', function (event) {
                            _this.selectedEntity = polyLine_1.data;
                        });
                        if (isEditable) {
                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(polyLine_1, "rightclick", function (event) {
                                if (polyLine_1.editable)
                                    polyLine_1.setEditable(false);
                                else
                                    polyLine_1.setEditable(true);
                            });
                            _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(polyLine_1.getPath(), 'set_at', function () {
                                var coords = polyLine_1.getPath().getArray();
                                var newCoords = new Array();
                                coords.forEach(function (x) {
                                    newCoords.push([x.lng(), x.lat()]);
                                });
                                polyLine_1.data.geometry.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].cleanLineCoordinates(newCoords);
                                polyLine_1.data.measuredLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].getLength(polyLine_1.data.geometry.coordinates);
                                var index = _this.changedSegments.findIndex(function (x) { return (x.levelId == polyLine_1.data.levelId && x.segmentId == polyLine_1.data.segmentId); });
                                if (index == -1)
                                    _this.changedSegments.push({ levelId: polyLine_1.data.levelId, segmentId: polyLine_1.data.segmentId });
                            });
                        }
                    }
                };
                DesignMap.prototype.deleteEntity = function () {
                    var seg = this.design.bluePrint.children[0].segments;
                    var segments = this.design.bluePrint.children;
                    if (this.selectedEntity.entityType == 'Chamber') {
                        for (var i = seg[0].splitters.length - 1; i >= 0; i--) {
                            if (seg[0].splitters[i].parentId == this.selectedEntity.id) {
                                this.mapEntitiesHelper.removeMapObjects(seg[0].splitters[i]);
                            }
                        }
                        for (var i = seg[0].spliceClosures.length - 1; i >= 0; i--) {
                            if (seg[0].spliceClosures[i].parentId == this.selectedEntity.id) {
                                this.mapEntitiesHelper.removeMapObjects(seg[0].spliceClosures[i]);
                            }
                        }
                    }
                    if (this.selectedEntity.entityType == 'PoP') {
                        for (var i = seg[0].pops.length - 1; i >= 0; i--) {
                            if (seg[0].pops[i].parentId == this.selectedEntity.id) {
                                this.mapEntitiesHelper.removeMapObjects(seg[0].pops[i]);
                            }
                        }
                    }
                    if (this.selectedEntity.entityType == 'Cable') {
                        for (var i = 0; i <= segments.length - 1; i++) {
                            //let S = this.design.bluePrint.children[i].segments.length;
                            for (var j = 0; j <= segments[i].segments.length - 1; j++) {
                                if (this.design.bluePrint.children[i].segments[j].cable != undefined) {
                                    if (this.design.bluePrint.children[i].segments[j].cable.code == this.selectedEntity.code) {
                                        //this.design.bluePrint.children[i].segments.findIndex(j);
                                        if (this.design.bluePrint.children[i].segments[j].poles != undefined) {
                                            var Poles = this.design.bluePrint.children[i].segments[j].poles.length;
                                            if (Poles > 0) {
                                                for (var k = 0; k <= Poles - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].poles[k]);
                                                }
                                            }
                                        }
                                        if (this.design.bluePrint.children[i].segments[j].chambers != undefined) {
                                            var Chambers = this.design.bluePrint.children[i].segments[j].chambers.length;
                                            if (Chambers > 0) {
                                                for (var k = 0; k <= Chambers - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].chambers[k]);
                                                }
                                            }
                                        }
                                        if (this.design.bluePrint.children[i].segments[j].homepasses != undefined) {
                                            var HomePasses = this.design.bluePrint.children[i].segments[j].homepasses.length;
                                            if (HomePasses > 0) {
                                                for (var k = 0; k <= HomePasses - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].homepasses[k]);
                                                }
                                            }
                                        }
                                        if (this.design.bluePrint.children[i].segments[j].odfs != undefined) {
                                            var ODFS = this.design.bluePrint.children[i].segments[j].odfs.length;
                                            if (ODFS > 0) {
                                                for (var k = 0; k <= ODFS - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].odfs[k]);
                                                }
                                            }
                                        }
                                        if (this.design.bluePrint.children[i].segments[j].pops != undefined) {
                                            var POPS = this.design.bluePrint.children[i].segments[j].pops.length;
                                            if (POPS > 0) {
                                                for (var k = 0; k <= POPS - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].pops[k]);
                                                }
                                            }
                                        }
                                        if (this.design.bluePrint.children[i].segments[j].spliceClosures != undefined) {
                                            var SpliceClosures = this.design.bluePrint.children[i].segments[j].spliceClosures.length;
                                            if (SpliceClosures > 0) {
                                                for (var k = 0; k <= SpliceClosures - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].spliceClosures[k]);
                                                }
                                            }
                                        }
                                        if (this.design.bluePrint.children[i].segments[j].splitters != undefined) {
                                            var Splitters = this.design.bluePrint.children[i].segments[j].splitters.length;
                                            if (Splitters > 0) {
                                                for (var k = 0; k <= Splitters - 1; k++) {
                                                    this.mapEntitiesHelper.removeMapObjects(this.design.bluePrint.children[i].segments[j].splitters[k]);
                                                }
                                            }
                                        }
                                        //this.design.bluePrint.children.splice(i, 1);
                                        this.design.bluePrint.children[i].segments.splice(j, 1);
                                        this.mapEntitiesHelper.removeMapObjects(this.selectedEntity);
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                    this.mapEntitiesHelper.removeMapObjects(this.selectedEntity);
                    if (this.selectedEntity.entityType == "MicroDuct" || this.selectedEntity.entityType == "Duct") {
                        _services_geoNode_helper__WEBPACK_IMPORTED_MODULE_10__["GeoNodeHelper"].deleteLineSegmentEntity(this.design.bluePrint, this.selectedEntity.id, this.selectedEntity.entityType);
                    }
                    else {
                        _services_geoNode_helper__WEBPACK_IMPORTED_MODULE_10__["GeoNodeHelper"].deleteSegmentEntity(this.design.bluePrint, this.selectedEntity.id, this.selectedEntity.entityType);
                    }
                    this.selectedEntity = null;
                    this.refreshBlueprint();
                };
                DesignMap.prototype.stringify = function (object) {
                    return JSON.stringify(object);
                };
                DesignMap.prototype.onEntityTypeChange = function (entityType) {
                    if (this.entitySettings.entityName == 'Homepass') {
                        this.entitySettings.dataSource = 'automatic';
                    }
                    else {
                        this.entitySettings.chambers = null;
                        this.entitySettings.odfs = null;
                        this.entitySettings.poles = null;
                        this.entitySettings.spliceClosures = null;
                        this.entitySettings.splitters = null;
                        this.initializeEntities();
                        this.loadMasterEntities(entityType);
                    }
                };
                DesignMap.prototype.initializeEntities = function () {
                    switch (this.entitySettings.entityName) {
                        case "Chamber":
                            if (this.entitySettings.chambers == null)
                                this.entitySettings.chambers = new Array();
                            this.entities = this.entitySettings.chambers;
                            break;
                        case "ODF":
                            if (this.entitySettings.odfs == null)
                                this.entitySettings.odfs = new Array();
                            this.entities = this.entitySettings.odfs;
                            break;
                        case "Pole":
                            if (this.entitySettings.poles == null)
                                this.entitySettings.poles = new Array();
                            this.entities = this.entitySettings.poles;
                            break;
                        case "SpliceClosure":
                            if (this.entitySettings.spliceClosures == null)
                                this.entitySettings.spliceClosures = new Array();
                            this.entities = this.entitySettings.spliceClosures;
                            break;
                        case "Splitter":
                            if (this.entitySettings.splitters == null)
                                this.entitySettings.splitters = new Array();
                            this.entities = this.entitySettings.splitters;
                            break;
                        case "Pop":
                            if (this.entitySettings.pops == null)
                                this.entitySettings.pops = new Array();
                            this.entities = this.entitySettings.pops;
                            break;
                    }
                };
                DesignMap.prototype.loadMasterEntities = function (entityType) {
                    var _this = this;
                    var masterSvc = null;
                    switch (entityType) {
                        case "Chamber":
                            masterSvc = this.chamberService.getChambers();
                            break;
                        case "ODF":
                            masterSvc = this.odfService.getODFs();
                            break;
                        case "Pole":
                            masterSvc = this.poleService.getPoles();
                            break;
                        case "SpliceClosure":
                            masterSvc = this.spliceClosureService.getSpliceClosures();
                            break;
                        case "Splitter":
                            masterSvc = this.splitterService.getSplitters();
                            break;
                        case "Pop":
                            masterSvc = this.splitterService.getSplitters();
                            break;
                        default:
                            masterSvc = this.splitterService.getSplitters();
                            break;
                    }
                    this.Flag = entityType;
                    masterSvc.subscribe(function (resp) {
                        _this.masterEntities = null;
                        if (resp.data != null && resp.data.length > 0) {
                            _this.masterEntities = resp.data;
                        }
                    }, function (err) {
                        _this.masterEntities = new Array();
                    });
                };
                DesignMap.prototype.PlotPostEntities = function () {
                    var _this = this;
                    var ent = this.selectedEntity;
                    var SelectedValue = null;
                    SelectedValue = $('#designEntity').val();
                    if (SelectedValue != 0) {
                        var getdata = $.grep(this.masterEntities, function (l) {
                            return l.id == SelectedValue;
                        });
                        var ent_1 = this.selectedEntity;
                        var seg = this.design.bluePrint.children[0].segments;
                        var mapEntitiesHelper = new _services_map_entities_helper__WEBPACK_IMPORTED_MODULE_9__["MapEntitiesHelper"](this.map);
                        if (seg) {
                            if (this.Flag == 'Splitter') {
                                if (seg[0].splitters == null) {
                                    seg[0].splitters = new Array();
                                    var splitters = new _entities_models_splitter__WEBPACK_IMPORTED_MODULE_16__["Splitter"]();
                                    splitters.entityType = "Splitter";
                                    splitters.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                    splitters.code = this.entitiesHelper.generatedCodes('Splitter');
                                    splitters.name = splitters.code;
                                    splitters.parentId = ent_1.id;
                                    splitters.parentEntityType = ent_1.entityType;
                                    splitters.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent_1.geometry.coordinates[0], ent_1.geometry.coordinates[1]]);
                                    var marker = mapEntitiesHelper.drawPoint(splitters, { url: "images/map-entities/spliceclosure.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                    splitters.suppliers = new Array();
                                    splitters.suppliers.push(getdata.suppliers);
                                    seg[0].splitters.push(splitters);
                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                        _this.selectedEntity = marker.data;
                                    });
                                    this.isEditable(true, marker);
                                }
                                else {
                                    var splitters = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].splitters[0]);
                                    var k = false;
                                    if (this.SplitterIncrementalID == 0) {
                                        for (var i = seg[0].splitters.length - 1; i >= 0; i--) {
                                            //seg[0].splitters[20].code
                                            if (seg[0].splitters[i].code != undefined || seg[0].splitters[i].code != null) {
                                                var ID2 = seg[0].splitters[i].code;
                                                var ID3 = ID2.toString();
                                                var ID4 = ID3.split('_');
                                                this.SplitterIncrementalID = parseInt(ID4[1]) + 1;
                                                k = true;
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                    }
                                    else {
                                        this.SplitterIncrementalID = this.SplitterIncrementalID + 1;
                                    }
                                    splitters.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                    splitters.code = 'Splitter_' + this.SplitterIncrementalID;
                                    splitters.name = 'Splitters_' + this.SplitterIncrementalID;
                                    splitters.parentId = ent_1.id;
                                    splitters.parentEntityType = ent_1.entityType;
                                    //newPole.name = newPole.code;
                                    splitters.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent_1.geometry.coordinates[0], ent_1.geometry.coordinates[1]]);
                                    var marker = mapEntitiesHelper.drawPoint(splitters, { url: "images/map-entities/splitter.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                    seg[0].splitters.push(splitters);
                                    splitters.suppliers = new Array();
                                    splitters.suppliers.push(getdata.suppliers);
                                    seg[0].splitters.push(splitters);
                                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                        _this.selectedEntity = marker.data;
                                    });
                                    this.isEditable(true, marker);
                                }
                            }
                            if (this.Flag == 'SpliceClosure') {
                                if (seg) {
                                    if (seg[0].spliceClosures == null) {
                                        seg[0].spliceClosures = new Array();
                                        var spliceclosures = new src_app_entities_models_spliceClosure__WEBPACK_IMPORTED_MODULE_18__["SpliceClosure"]();
                                        spliceclosures.entityType = "SpliceClosure";
                                        spliceclosures.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                        var Uid = spliceclosures.id.toString();
                                        spliceclosures.code = this.entitiesHelper.generatedCodes('SpliceClosure');
                                        spliceclosures.name = spliceclosures.code;
                                        spliceclosures.parentId = ent_1.id;
                                        spliceclosures.parentEntityType = ent_1.entityType;
                                        spliceclosures.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent_1.geometry.coordinates[0], ent_1.geometry.coordinates[1]]);
                                        var marker = mapEntitiesHelper.drawPoint(spliceclosures, { url: "images/map-entities/spliceclosure.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                        spliceclosures.suppliers = new Array();
                                        spliceclosures.suppliers.push(getdata.suppliers);
                                        seg[0].spliceClosures.push(spliceclosures);
                                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                            _this.selectedEntity = marker.data;
                                        });
                                        this.isEditable(true, marker);
                                    }
                                    else {
                                        var spliceClosure = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].spliceClosures[0]);
                                        var k = false;
                                        if (this.SpliceClosureIncrementalID == 0) {
                                            for (var i = seg[0].spliceClosures.length - 1; i >= 0; i--) {
                                                if (seg[0].spliceClosures[i].code != undefined || seg[0].spliceClosures[i].code != null) {
                                                    var ID2 = seg[0].spliceClosures[i].code;
                                                    var ID3 = ID2.toString();
                                                    var ID4 = ID3.split('_');
                                                    this.SpliceClosureIncrementalID = parseInt(ID4[1]) + 1;
                                                    k = true;
                                                    break;
                                                }
                                                else {
                                                    continue;
                                                }
                                            }
                                        }
                                        else {
                                            this.SpliceClosureIncrementalID = this.SpliceClosureIncrementalID + 1;
                                        }
                                        spliceClosure.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                        spliceClosure.code = 'SpliceClosure_' + this.SpliceClosureIncrementalID;
                                        spliceClosure.name = 'SpliceClosure_' + this.SpliceClosureIncrementalID;
                                        spliceClosure.parentId = ent_1.id;
                                        spliceClosure.parentEntityType = ent_1.entityType;
                                        spliceClosure.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent_1.geometry.coordinates[0], ent_1.geometry.coordinates[1]]);
                                        var marker = mapEntitiesHelper.drawPoint(spliceClosure, { url: "images/map-entities/spliceclosure.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                        spliceClosure.suppliers = new Array();
                                        spliceClosure.suppliers.push(getdata.suppliers);
                                        //seg[0].spliceClosures.push(spliceClosure);
                                        seg[0].spliceClosures.push(spliceClosure);
                                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                            _this.selectedEntity = marker.data;
                                        });
                                        this.isEditable(true, marker);
                                    }
                                }
                            }
                            if (this.Flag == 'odf') {
                                if (seg) {
                                    if (seg[0].odfs == null) {
                                        seg[0].odfs = new Array();
                                        var odf = new _entities_models_odf__WEBPACK_IMPORTED_MODULE_22__["ODF"]();
                                        odf.entityType = "ODF";
                                        odf.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                        var Uid = odf.id.toString();
                                        odf.code = this.entitiesHelper.generatedCodes('Odf');
                                        odf.name = odf.code;
                                        odf.parentId = ent_1.id;
                                        odf.parentEntityType = ent_1.entityType;
                                        odf.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent_1.geometry.coordinates[0], ent_1.geometry.coordinates[1]]);
                                        var marker = mapEntitiesHelper.drawPoint(odf, { url: "images/map-entities/odf.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                        odf.suppliers = new Array();
                                        odf.suppliers.push(getdata.suppliers);
                                        seg[0].odfs.push(odf);
                                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                            _this.selectedEntity = marker.data;
                                        });
                                        this.isEditable(true, marker);
                                    }
                                    else {
                                        var odfss = lodash__WEBPACK_IMPORTED_MODULE_15__["cloneDeep"](seg[0].odfs[0]);
                                        var odfssLength = seg[0].odfs.length + 1;
                                        var k = false;
                                        if (this.OdfIncrementalID == 0) {
                                            for (var i = seg[0].odfs.length - 1; i >= 0; i--) {
                                                //seg[0].splitters[20].code
                                                if (seg[0].odfs[i].code != undefined || seg[0].odfs[i].code != null) {
                                                    var ID2 = seg[0].odfs[i].code;
                                                    var ID3 = ID2.toString();
                                                    var ID4 = ID3.split('_');
                                                    this.OdfIncrementalID = parseInt(ID4[1]) + 1;
                                                    break;
                                                }
                                                else {
                                                    continue;
                                                }
                                            }
                                        }
                                        else {
                                            this.OdfIncrementalID = this.OdfIncrementalID + 1;
                                        }
                                        odfss.id = _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"].generateObjectId();
                                        odfss.code = 'Odf_' + this.OdfIncrementalID;
                                        odfss.name = 'Odf_' + this.OdfIncrementalID;
                                        odfss.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_12__["Point"]([ent_1.geometry.coordinates[0], ent_1.geometry.coordinates[1]]);
                                        odfss.parentId = ent_1.id;
                                        odfss.parentEntityType = ent_1.entityType;
                                        var marker = mapEntitiesHelper.drawPoint(odfss, { url: "images/map-entities/odf.png", anchor: new google.maps.Point(10, 10) }, true, true);
                                        odfss.suppliers = new Array();
                                        odfss.suppliers.push(getdata.suppliers);
                                        seg[0].odfs.push(odfss);
                                        _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_5__["GMapsHelper"].addListener(marker, 'click', function (event) {
                                            _this.selectedEntity = marker.data;
                                        });
                                        this.isEditable(true, marker);
                                    }
                                }
                            }
                            if (this.Flag == 'Chamber') {
                                var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                supplier.currency = getdata[0].currency;
                                supplier.name = getdata[0].name;
                                supplier.stockQty = getdata[0].stockQty;
                                supplier.price = getdata[0].price;
                                supplier.validFrom = getdata[0].validFrom;
                                supplier.validTo = getdata[0].validTo;
                                this.chamber.suppliers = new Array();
                                //seg[0].chambers = new Array<Chamber>();
                                //this.chamber.suppliers = new Array<Supplier>();
                                this.chamber.suppliers.push(supplier);
                                seg[0].chambers.push(this.chamber);
                            }
                            if (this.Flag == 'Pole') {
                                var supplier = new src_app_common_models_supplier__WEBPACK_IMPORTED_MODULE_19__["Supplier"]();
                                supplier.currency = getdata[0].currency;
                                supplier.name = getdata[0].name;
                                supplier.stockQty = getdata[0].stockQty;
                                supplier.price = getdata[0].price;
                                supplier.validFrom = getdata[0].validFrom;
                                supplier.validTo = getdata[0].validTo;
                                this.poles.suppliers = new Array();
                                this.poles.suppliers.push(supplier);
                                seg[0].poles.push(this.poles);
                            }
                            $("#exampleModalCenter").modal("hide");
                        }
                    }
                    else {
                        this.helper.showAlertMessage("Please select template", "error");
                    }
                };
                DesignMap.prototype.ClearEntities = function () {
                    if (this.DeleteFlag == null) {
                        this.mapEntitiesHelper.removeMapObjects(this.CurrentselectedEntity);
                    }
                };
                return DesignMap;
            }());
            DesignMap.ctorParameters = function () { return [
                { type: _app_config__WEBPACK_IMPORTED_MODULE_3__["AppConfig"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_13__["Helper"] },
                { type: _services_bom_helper__WEBPACK_IMPORTED_MODULE_4__["BomHelper"] },
                { type: _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_24__["ChamberService"] },
                { type: _entities_services_odf_service__WEBPACK_IMPORTED_MODULE_25__["ODFService"] },
                { type: _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_26__["PoleService"] },
                { type: _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_27__["SpliceClosureService"] },
                { type: _entities_services_splitter_service__WEBPACK_IMPORTED_MODULE_28__["SplitterService"] },
                { type: _entities_services_fat_service__WEBPACK_IMPORTED_MODULE_29__["fatService"] },
                { type: _entities_services_fdt_service__WEBPACK_IMPORTED_MODULE_30__["fdtService"] },
                { type: _entities_services_duct_service__WEBPACK_IMPORTED_MODULE_35__["DuctService"] },
                { type: _entities_services_cable_service__WEBPACK_IMPORTED_MODULE_36__["CableService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignMap.prototype, "entitySettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignMap.prototype, "design", void 0);
            DesignMap = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-map',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-map.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-map.html")).default
                })
            ], DesignMap);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-networkSettings.ts": 
        /*!***********************************************************!*\
          !*** ./src/app/designs/components/dzn-networkSettings.ts ***!
          \***********************************************************/
        /*! exports provided: DesignNetworkSettings */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignNetworkSettings", function () { return DesignNetworkSettings; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            var DesignNetworkSettings = /** @class */ (function () {
                function DesignNetworkSettings(helper) {
                    this.helper = helper;
                    this.selectedSetting = new _models_design__WEBPACK_IMPORTED_MODULE_2__["NetworkSetting"]();
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_2__["Design"]();
                    this.allDesigns = new Array();
                }
                DesignNetworkSettings.prototype.ngOnInit = function () {
                    this.hierarchyName = "";
                };
                DesignNetworkSettings.prototype.ngOnChanges = function (changes) {
                    if (this.design.networkSettings && this.design.networkSettings.length > 0) {
                        this.selectedSetting = this.design.networkSettings[0];
                        //this.ngOnInit();
                    }
                };
                DesignNetworkSettings.prototype.addHierarchy = function () {
                    var _this = this;
                    if (this.design.networkSettings == null)
                        this.design.networkSettings = [];
                    if (this.hierarchyName == null || this.hierarchyName.trim() == "") {
                        this.helper.showAlertMessage("Please provide hierarchy name.", "info");
                        return;
                    }
                    var index = this.design.networkSettings.findIndex(function (x) { return x.name == _this.hierarchyName.trim(); });
                    if (index >= 0) {
                        this.helper.showAlertMessage("hierarchy name already exist.", "info");
                        return;
                    }
                    var networkSetting = {
                        id: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId(),
                        name: this.hierarchyName,
                        position: this.design.networkSettings.length,
                        startNode: new _models_design__WEBPACK_IMPORTED_MODULE_2__["NodeSettings"](),
                        destinationNode: new _models_design__WEBPACK_IMPORTED_MODULE_2__["NodeSettings"](),
                        cabling: new _models_design__WEBPACK_IMPORTED_MODULE_2__["Cabling"]()
                    };
                    if (this.design.designType == "FTTx") {
                        this.design.networkSettings.push(networkSetting);
                    }
                    else {
                        networkSetting.startNode = null;
                        networkSetting.destinationNode = null;
                        networkSetting['fdpNode'] = new _models_design__WEBPACK_IMPORTED_MODULE_2__["NodeSettings"]();
                        if (this.design.networkSettings.length == 0) {
                            this.design.networkSettings.push(networkSetting);
                        }
                    }
                    this.hierarchyName = '';
                };
                DesignNetworkSettings.prototype.deleteHierarchy = function (index) {
                    this.design.networkSettings.splice(index, 1);
                };
                return DesignNetworkSettings;
            }());
            DesignNetworkSettings.ctorParameters = function () { return [
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignNetworkSettings.prototype, "design", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignNetworkSettings.prototype, "allDesigns", void 0);
            DesignNetworkSettings = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-networkSettings',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-networkSettings.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-networkSettings.html")).default
                })
            ], DesignNetworkSettings);
            /***/ 
        }),
        /***/ "./src/app/designs/components/dzn-spliceClosure.ts": 
        /*!*********************************************************!*\
          !*** ./src/app/designs/components/dzn-spliceClosure.ts ***!
          \*********************************************************/
        /*! exports provided: DesignSpliceClosure */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignSpliceClosure", function () { return DesignSpliceClosure; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../entities/services/spliceClosure.service */ "./src/app/entities/services/spliceClosure.service.ts");
            var DesignSpliceClosure = /** @class */ (function () {
                function DesignSpliceClosure(spliceClosureService) {
                    this.spliceClosureService = spliceClosureService;
                    this.spliceClosureSettings = new _models_design__WEBPACK_IMPORTED_MODULE_2__["SpliceClosureSettings"]();
                    this.allDesigns = new Array();
                    this.spliceClosuresMaster = new Array();
                }
                DesignSpliceClosure.prototype.ngOnInit = function () {
                    this.getSpliceClosuresMaster();
                };
                DesignSpliceClosure.prototype.getSpliceClosuresMaster = function () {
                    var _this = this;
                    //this.spliceClosureSettings.spliceClosures = null;
                    this.spliceClosureService.getSpliceClosures().subscribe(function (resp) {
                        _this.spliceClosuresMaster = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.spliceClosuresMaster = resp.data;
                            }
                            else {
                                _this.statusMessage = "There are no registered spliceClosures.";
                            }
                        }
                    }, function (err) {
                        _this.spliceClosuresMaster = null;
                        _this.statusMessage = "Error fetching spliceClosures.";
                    });
                };
                //fileChangeEvent(event: any) {
                //    var files = event.target.files;
                //    this.populateDummyData();
                //}
                DesignSpliceClosure.prototype.addSpliceClosure = function () {
                    var _this = this;
                    if (this.spliceClosureSettings.spliceClosures == null)
                        this.spliceClosureSettings.spliceClosures = new Array();
                    var index = this.spliceClosureSettings.spliceClosures.findIndex(function (x) { return x.id == _this.selectedSpliceClosure.id; });
                    if (index == -1) {
                        this.spliceClosureSettings.spliceClosures.push(this.selectedSpliceClosure);
                        this.selectedSpliceClosure = null;
                    }
                };
                DesignSpliceClosure.prototype.removeSpliceClosure = function (index) {
                    this.spliceClosureSettings.spliceClosures.splice(index, 1);
                };
                return DesignSpliceClosure;
            }());
            DesignSpliceClosure.ctorParameters = function () { return [
                { type: _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_3__["SpliceClosureService"] }
            ]; };
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignSpliceClosure.prototype, "spliceClosureSettings", void 0);
            tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])()
            ], DesignSpliceClosure.prototype, "allDesigns", void 0);
            DesignSpliceClosure = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    selector: 'dzn-spliceClosure',
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./dzn-spliceClosure.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/components/dzn-spliceClosure.html")).default
                })
            ], DesignSpliceClosure);
            /***/ 
        }),
        /***/ "./src/app/designs/design.module.ts": 
        /*!******************************************!*\
          !*** ./src/app/designs/design.module.ts ***!
          \******************************************/
        /*! exports provided: DesignModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignModule", function () { return DesignModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm2015/material.js");
            /* harmony import */ var _shared_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared.module */ "./src/app/shared.module.ts");
            /* harmony import */ var _design_routes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./design.routes */ "./src/app/designs/design.routes.ts");
            /* harmony import */ var _views_design_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/design-list */ "./src/app/designs/views/design-list.ts");
            /* harmony import */ var _views_design_details__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./views/design-details */ "./src/app/designs/views/design-details.ts");
            /* harmony import */ var _services_design_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/design.service */ "./src/app/designs/services/design.service.ts");
            /* harmony import */ var _users_services_user_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../users/services/user.service */ "./src/app/users/services/user.service.ts");
            /* harmony import */ var _entities_services_splitter_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../entities/services/splitter.service */ "./src/app/entities/services/splitter.service.ts");
            /* harmony import */ var _components_dzn_info__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/dzn-info */ "./src/app/designs/components/dzn-info.ts");
            /* harmony import */ var _services_design_helper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services/design.helper */ "./src/app/designs/services/design.helper.ts");
            /* harmony import */ var _components_dzn_documents__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/dzn-documents */ "./src/app/designs/components/dzn-documents.ts");
            /* harmony import */ var _components_dzn_clusters__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/dzn-clusters */ "./src/app/designs/components/dzn-clusters.ts");
            /* harmony import */ var _components_dzn_bookingIds__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/dzn-bookingIds */ "./src/app/designs/components/dzn-bookingIds.ts");
            /* harmony import */ var _components_dzn_networkSettings__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/dzn-networkSettings */ "./src/app/designs/components/dzn-networkSettings.ts");
            /* harmony import */ var _components_dzn_entities__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/dzn-entities */ "./src/app/designs/components/dzn-entities.ts");
            /* harmony import */ var _entities_services_cable_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../entities/services/cable.service */ "./src/app/entities/services/cable.service.ts");
            /* harmony import */ var _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../entities/services/chamber.service */ "./src/app/entities/services/chamber.service.ts");
            /* harmony import */ var _entities_services_duct_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../entities/services/duct.service */ "./src/app/entities/services/duct.service.ts");
            /* harmony import */ var _entities_services_odf_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../entities/services/odf.service */ "./src/app/entities/services/odf.service.ts");
            /* harmony import */ var _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../entities/services/pole.service */ "./src/app/entities/services/pole.service.ts");
            /* harmony import */ var _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../entities/services/spliceClosure.service */ "./src/app/entities/services/spliceClosure.service.ts");
            /* harmony import */ var _accessories_services_accessory_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../accessories/services/accessory.service */ "./src/app/accessories/services/accessory.service.ts");
            /* harmony import */ var _civilworks_services_civilwork_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../civilworks/services/civilwork.service */ "./src/app/civilworks/services/civilwork.service.ts");
            /* harmony import */ var _components_dzn_accessories__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/dzn-accessories */ "./src/app/designs/components/dzn-accessories.ts");
            /* harmony import */ var _components_dzn_civilworks__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./components/dzn-civilworks */ "./src/app/designs/components/dzn-civilworks.ts");
            /* harmony import */ var _components_dzn_duct__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./components/dzn-duct */ "./src/app/designs/components/dzn-duct.ts");
            /* harmony import */ var _components_dzn_cable__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./components/dzn-cable */ "./src/app/designs/components/dzn-cable.ts");
            /* harmony import */ var _components_dzn_spliceClosure__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./components/dzn-spliceClosure */ "./src/app/designs/components/dzn-spliceClosure.ts");
            /* harmony import */ var _components_dzn_costing__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./components/dzn-costing */ "./src/app/designs/components/dzn-costing.ts");
            /* harmony import */ var _components_dzn_map__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./components/dzn-map */ "./src/app/designs/components/dzn-map.ts");
            /* harmony import */ var _components_dzn_bom__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./components/dzn-bom */ "./src/app/designs/components/dzn-bom.ts");
            /* harmony import */ var _components_dzn_fdp__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./components/dzn-fdp */ "./src/app/designs/components/dzn-fdp.ts");
            /* harmony import */ var _services_bom_helper__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./services/bom.helper */ "./src/app/designs/services/bom.helper.ts");
            /* harmony import */ var _services_fttx_helper__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./services/fttx.helper */ "./src/app/designs/services/fttx.helper.ts");
            /* harmony import */ var _services_backbone_helper__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./services/backbone.helper */ "./src/app/designs/services/backbone.helper.ts");
            /* harmony import */ var _entities_services_fdt_service__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../entities/services/fdt.service */ "./src/app/entities/services/fdt.service.ts");
            /* harmony import */ var _entities_services_fat_service__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../entities/services/fat.service */ "./src/app/entities/services/fat.service.ts");
            /* harmony import */ var _entities_services_pop_service__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../entities/services/pop.service */ "./src/app/entities/services/pop.service.ts");
            var DesignModule = /** @class */ (function () {
                function DesignModule() {
                }
                return DesignModule;
            }());
            DesignModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatCheckboxModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatRadioModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSelectModule"],
                        _shared_module__WEBPACK_IMPORTED_MODULE_5__["SharedModule"],
                        _design_routes__WEBPACK_IMPORTED_MODULE_6__["DesignRouting"]
                    ],
                    declarations: [
                        _views_design_list__WEBPACK_IMPORTED_MODULE_7__["DesignList"],
                        _views_design_details__WEBPACK_IMPORTED_MODULE_8__["DesignDetails"],
                        _components_dzn_info__WEBPACK_IMPORTED_MODULE_12__["DesignInfo"],
                        _components_dzn_documents__WEBPACK_IMPORTED_MODULE_14__["DesignDocuments"],
                        _components_dzn_clusters__WEBPACK_IMPORTED_MODULE_15__["DesignClusters"],
                        _components_dzn_bookingIds__WEBPACK_IMPORTED_MODULE_16__["DesignBookingIds"],
                        _components_dzn_networkSettings__WEBPACK_IMPORTED_MODULE_17__["DesignNetworkSettings"],
                        _components_dzn_entities__WEBPACK_IMPORTED_MODULE_18__["DesignEntities"],
                        _components_dzn_fdp__WEBPACK_IMPORTED_MODULE_35__["DesignFPDs"],
                        _components_dzn_accessories__WEBPACK_IMPORTED_MODULE_27__["DesignAccessories"],
                        _components_dzn_civilworks__WEBPACK_IMPORTED_MODULE_28__["DesignCivilwork"],
                        _components_dzn_duct__WEBPACK_IMPORTED_MODULE_29__["DesignDuct"],
                        _components_dzn_cable__WEBPACK_IMPORTED_MODULE_30__["DesignCable"],
                        _components_dzn_spliceClosure__WEBPACK_IMPORTED_MODULE_31__["DesignSpliceClosure"],
                        _components_dzn_costing__WEBPACK_IMPORTED_MODULE_32__["DesignCosting"],
                        _components_dzn_map__WEBPACK_IMPORTED_MODULE_33__["DesignMap"],
                        _components_dzn_bom__WEBPACK_IMPORTED_MODULE_34__["DesignBOM"]
                    ],
                    providers: [
                        _services_design_service__WEBPACK_IMPORTED_MODULE_9__["DesignService"],
                        _services_design_helper__WEBPACK_IMPORTED_MODULE_13__["DesignHelper"],
                        _services_bom_helper__WEBPACK_IMPORTED_MODULE_36__["BomHelper"],
                        _services_fttx_helper__WEBPACK_IMPORTED_MODULE_37__["FTTxHelper"],
                        _services_backbone_helper__WEBPACK_IMPORTED_MODULE_38__["BackboneHelper"],
                        _users_services_user_service__WEBPACK_IMPORTED_MODULE_10__["UserService"],
                        _entities_services_cable_service__WEBPACK_IMPORTED_MODULE_19__["CableService"],
                        _entities_services_chamber_service__WEBPACK_IMPORTED_MODULE_20__["ChamberService"],
                        _entities_services_duct_service__WEBPACK_IMPORTED_MODULE_21__["DuctService"],
                        _entities_services_odf_service__WEBPACK_IMPORTED_MODULE_22__["ODFService"],
                        _entities_services_pole_service__WEBPACK_IMPORTED_MODULE_23__["PoleService"],
                        _entities_services_spliceClosure_service__WEBPACK_IMPORTED_MODULE_24__["SpliceClosureService"],
                        _entities_services_splitter_service__WEBPACK_IMPORTED_MODULE_11__["SplitterService"],
                        _accessories_services_accessory_service__WEBPACK_IMPORTED_MODULE_25__["AccessoryService"],
                        _civilworks_services_civilwork_service__WEBPACK_IMPORTED_MODULE_26__["CivilworkService"], _entities_services_fdt_service__WEBPACK_IMPORTED_MODULE_39__["fdtService"], _entities_services_fat_service__WEBPACK_IMPORTED_MODULE_40__["fatService"], _entities_services_pop_service__WEBPACK_IMPORTED_MODULE_41__["PopService"]
                    ]
                })
            ], DesignModule);
            /***/ 
        }),
        /***/ "./src/app/designs/design.routes.ts": 
        /*!******************************************!*\
          !*** ./src/app/designs/design.routes.ts ***!
          \******************************************/
        /*! exports provided: designRoutes, DesignRouting */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "designRoutes", function () { return designRoutes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignRouting", function () { return DesignRouting; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _views_design_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/design-list */ "./src/app/designs/views/design-list.ts");
            /* harmony import */ var _views_design_details__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/design-details */ "./src/app/designs/views/design-details.ts");
            var designRoutes = [
                {
                    path: 'designs',
                    children: [
                        { path: '', component: _views_design_list__WEBPACK_IMPORTED_MODULE_2__["DesignList"] },
                        { path: 'details', component: _views_design_details__WEBPACK_IMPORTED_MODULE_3__["DesignDetails"] },
                        { path: 'details/:id', component: _views_design_details__WEBPACK_IMPORTED_MODULE_3__["DesignDetails"] },
                    ]
                },
            ];
            var DesignRouting = _angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(designRoutes);
            /***/ 
        }),
        /***/ "./src/app/designs/models/design.ts": 
        /*!******************************************!*\
          !*** ./src/app/designs/models/design.ts ***!
          \******************************************/
        /*! exports provided: Design, NetworkSetting, NodeSettings, EntitySettings, FDPSettings, AccessorySettings, CivilworkSettings, DuctSettings, EquipmentSettings, Cabling, CableSettings, SpliceClosureSettings, CodeId, Costing */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Design", function () { return Design; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NetworkSetting", function () { return NetworkSetting; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodeSettings", function () { return NodeSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntitySettings", function () { return EntitySettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FDPSettings", function () { return FDPSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccessorySettings", function () { return AccessorySettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CivilworkSettings", function () { return CivilworkSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DuctSettings", function () { return DuctSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquipmentSettings", function () { return EquipmentSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cabling", function () { return Cabling; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CableSettings", function () { return CableSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpliceClosureSettings", function () { return SpliceClosureSettings; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CodeId", function () { return CodeId; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Costing", function () { return Costing; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _common_models_dbBaseEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/models/dbBaseEntity */ "./src/app/common/models/dbBaseEntity.ts");
            /* harmony import */ var _entities_models_chamber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../entities/models/chamber */ "./src/app/entities/models/chamber.ts");
            /* harmony import */ var _entities_models_pole__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../entities/models/pole */ "./src/app/entities/models/pole.ts");
            var Design = /** @class */ (function (_super) {
                __extends(Design, _super);
                function Design() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.version = 1;
                    _this.documents = new Array();
                    _this.bookingIds = new Array();
                    _this.networkSettings = new Array();
                    _this.log = "";
                    return _this;
                }
                return Design;
            }(_common_models_dbBaseEntity__WEBPACK_IMPORTED_MODULE_1__["DbBaseEntity"]));
            var NetworkSetting = /** @class */ (function () {
                function NetworkSetting() {
                    this.startNode = new NodeSettings();
                    this.destinationNode = new NodeSettings();
                    this.fdpNode = new NodeSettings();
                    this.cabling = new Cabling();
                }
                return NetworkSetting;
            }());
            var NodeSettings = /** @class */ (function () {
                function NodeSettings() {
                    this.entitySettings = new EntitySettings();
                    this.fdpSettings = new FDPSettings();
                    this.accessorySettings = new AccessorySettings();
                    this.civilworkSettings = new CivilworkSettings();
                    this.ductSettings = new DuctSettings();
                    this.equipmentSettings = new EquipmentSettings();
                }
                return NodeSettings;
            }());
            var EntitySettings = /** @class */ (function () {
                function EntitySettings() {
                    this.entityName = "";
                    this.dataSource = "automatic";
                    this.chambers = new Array();
                    this.odfs = new Array();
                    this.poles = new Array();
                    this.spliceClosures = new Array();
                    this.splitters = new Array();
                    this.pops = new Array();
                }
                return EntitySettings;
            }());
            var FDPSettings = /** @class */ (function () {
                function FDPSettings() {
                    this.dataSource = "import";
                    this.fdps = new Array();
                    this.aggregateFdps = new Array();
                }
                return FDPSettings;
            }());
            var AccessorySettings = /** @class */ (function () {
                function AccessorySettings() {
                    this.entityName = "";
                    this.dataSource = "automatic";
                    //existingDesignId?: string;
                    //importedFile?: string;
                    this.accessories = new Array();
                    this.existingAccessories = new Array();
                }
                return AccessorySettings;
            }());
            var CivilworkSettings = /** @class */ (function () {
                function CivilworkSettings() {
                    this.civilworks = new Array();
                }
                return CivilworkSettings;
            }());
            var DuctSettings = /** @class */ (function () {
                function DuctSettings() {
                    this.ducts = new Array();
                }
                return DuctSettings;
            }());
            var EquipmentSettings = /** @class */ (function () {
                function EquipmentSettings() {
                    this.entityName = "";
                    this.dataSource = "";
                    this.equipments = new Array();
                }
                return EquipmentSettings;
            }());
            var Cabling = /** @class */ (function () {
                function Cabling() {
                    this.cableSettings = new CableSettings();
                    this.spliceClosureSettings = new SpliceClosureSettings();
                    this.accessorySettings = new AccessorySettings();
                    this.ductSettings = new DuctSettings();
                }
                return Cabling;
            }());
            var CableSettings = /** @class */ (function () {
                function CableSettings() {
                    this.entityName = "Cable";
                    this.dataSource = "";
                    this.cables = new Array();
                    this.pole = new _entities_models_pole__WEBPACK_IMPORTED_MODULE_3__["Pole"]();
                    this.chamber = new _entities_models_chamber__WEBPACK_IMPORTED_MODULE_2__["Chamber"]();
                    this.connectionPercent = 100;
                }
                return CableSettings;
            }());
            var SpliceClosureSettings = /** @class */ (function () {
                function SpliceClosureSettings() {
                    this.entityName = "";
                    this.dataSource = "";
                    this.spliceClosures = new Array();
                }
                ;
                return SpliceClosureSettings;
            }());
            var CodeId = /** @class */ (function () {
                function CodeId() {
                }
                return CodeId;
            }());
            var Costing = /** @class */ (function () {
                function Costing() {
                    this.quantity = 0;
                    this.materialCost = 0;
                    this.serviceCost = 0;
                }
                return Costing;
            }());
            /***/ 
        }),
        /***/ "./src/app/designs/services/backbone.helper.ts": 
        /*!*****************************************************!*\
          !*** ./src/app/designs/services/backbone.helper.ts ***!
          \*****************************************************/
        /*! exports provided: BackboneHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackboneHelper", function () { return BackboneHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _homepasses_services_homepass_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../homepasses/services/homepass.service */ "./src/app/homepasses/services/homepass.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/geo/geoNode */ "./src/app/common/geo/geoNode.ts");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _app_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../app.config */ "./src/app/app.config.ts");
            /* harmony import */ var _entities_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./entities.helper */ "./src/app/designs/services/entities.helper.ts");
            var BackboneHelper = /** @class */ (function () {
                function BackboneHelper(httpClient, appConfig, homepassService, helper) {
                    this.httpClient = httpClient;
                    this.appConfig = appConfig;
                    this.homepassService = homepassService;
                    this.helper = helper;
                }
                BackboneHelper.prototype.generateBackboneDesign = function (design) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var status, fdps, geoNodes_1, level_1, _loop_5, this_5, index, popCentroid, designTree, e_2;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.design = design;
                                    this.entitiesHelper = new _entities_helper__WEBPACK_IMPORTED_MODULE_8__["EntitiesHelper"](design.bookingIds, design.generatedCodes);
                                    status = false;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 6, , 7]);
                                    this.helper.log(this.design, "Information", "Generating Backbone design...");
                                    if (this.design.networkSettings[0] == null)
                                        throw new Error('No FDTs available to process...');
                                    fdps = this.design.networkSettings[0].fdpNode.fdpSettings.fdps;
                                    geoNodes_1 = new Array();
                                    level_1 = this.design.networkSettings.length + 1;
                                    fdps.forEach(function (x) {
                                        geoNodes_1.push({ id: x.id, level: level_1, levelName: "fdps", coordinates: x.geometry.coordinates, connections: 1 });
                                    });
                                    _loop_5 = function (index) {
                                        var splitters, cableSettings, preferedCable;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    splitters = this_5.getSplitters(index);
                                                    if (splitters == null || splitters.length == 0) {
                                                        this_5.helper.log(this_5.design, "Error", "Splitters not defined at any of the levels...");
                                                        throw new Error('No splitters available to process...');
                                                    }
                                                    return [4 /*yield*/, this_5.createClusters(geoNodes_1, splitters, index)];
                                                case 1:
                                                    //geoNodes = GeoHelper.clustersKmeans(geoNodes, splitterCount, this.design.networkSettings[index].name);
                                                    geoNodes_1 = _a.sent();
                                                    cableSettings = this_5.design.networkSettings[index].cabling.cableSettings;
                                                    preferedCable = this_5.getPreferedCable(cableSettings, geoNodes_1.length);
                                                    if (preferedCable == null) {
                                                        this_5.helper.log(this_5.design, "Error", "Insufficient Cable Configuration");
                                                        throw new Error('Insufficient cable configuration');
                                                    }
                                                    return [4 /*yield*/, this_5.generateSegments(geoNodes_1)];
                                                case 2:
                                                    //let levelIndex = index;
                                                    geoNodes_1 = _a.sent();
                                                    geoNodes_1.forEach(function (x) {
                                                        _this.generateSegmentEntities(preferedCable, x.segments, index);
                                                    });
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_5 = this;
                                    index = this.design.networkSettings.length - 1;
                                    _a.label = 2;
                                case 2:
                                    if (!(index >= 0)) return [3 /*break*/, 5];
                                    return [5 /*yield**/, _loop_5(index)];
                                case 3:
                                    _a.sent();
                                    _a.label = 4;
                                case 4:
                                    index--;
                                    return [3 /*break*/, 2];
                                case 5:
                                    popCentroid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].center(geoNodes_1);
                                    designTree = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                                    designTree.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                                    designTree.levelName = "pop";
                                    designTree.coordinates = popCentroid;
                                    designTree.connections = 1;
                                    designTree.children = geoNodes_1;
                                    this.design.bluePrint = designTree;
                                    status = true;
                                    return [3 /*break*/, 7];
                                case 6:
                                    e_2 = _a.sent();
                                    status = false;
                                    this.helper.log(this.design, "Error", e_2);
                                    return [3 /*break*/, 7];
                                case 7:
                                    $("#ajax-loading").hide();
                                    return [2 /*return*/, status];
                            }
                        });
                    });
                };
                BackboneHelper.prototype.getSplitters = function (level) {
                    var splitters = [];
                    for (var i = level; i >= 0; i--) {
                        if (this.design.networkSettings[i].destinationNode.entitySettings.entityName == "Splitter") {
                            splitters = this.design.networkSettings[i].destinationNode.entitySettings.splitters;
                            break;
                        }
                    }
                    return splitters;
                };
                BackboneHelper.prototype.createClusters = function (geoNodes, splitters, level) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var tempGeoNodes, resp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.helper.log(this.design, "Information", "Generating clusters...");
                                    return [4 /*yield*/, this.httpClient.post(this.appConfig.urls.Routeware.SortPoints, { Region: this.appConfig.settings.Region, Nodes: geoNodes }).toPromise()];
                                case 1:
                                    resp = _a.sent();
                                    if (resp.status.toLowerCase() == "error") {
                                        this.helper.log(this.design.log, "Error", "Error sorting nodes - " + resp.message);
                                        throw Error("Error sorting nodes");
                                    }
                                    else {
                                        if (resp.data != null && resp.data.length > 0) {
                                            if (this.design.networkSettings[level].destinationNode.entitySettings.dataSource == 'automatic') {
                                                tempGeoNodes = this.createAutomaticCluster(resp.data, splitters, level);
                                            }
                                            else {
                                                tempGeoNodes = this.createCluster(resp.data, splitters, level);
                                            }
                                        }
                                        else {
                                            this.helper.log(this.design.log, "Error", "Nodes not available - " + resp.message);
                                            throw Error("Nodes not available");
                                        }
                                    }
                                    this.helper.log(this.design, "Information", "Sorting homepasses completed");
                                    return [2 /*return*/, tempGeoNodes];
                            }
                        });
                    });
                };
                BackboneHelper.prototype.createAutomaticCluster = function (sortedNodes, splitters, level) {
                    var _this = this;
                    var tempClusters = new Array();
                    var outputPorts = this.getTotalSplitterPorts(splitters);
                    var connections = 0;
                    var geoNode = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                    geoNode.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    geoNode.levelName = this.design.networkSettings[level].name;
                    geoNode.level = level;
                    geoNode.coordinates = null;
                    geoNode.connections = 0;
                    geoNode.children = new Array();
                    sortedNodes.forEach(function (x) {
                        if ((outputPorts - connections) <= 0) {
                            geoNode.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].center(geoNode.children);
                            geoNode.children.push({
                                id: geoNode.id,
                                connections: 0,
                                children: null,
                                coordinates: geoNode.coordinates,
                                level: geoNode.level,
                                segments: null
                            });
                            tempClusters.push(geoNode);
                            geoNode = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                            connections = 0;
                            geoNode.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                            geoNode.levelName = _this.design.networkSettings[level].name;
                            geoNode.level = level;
                            geoNode.coordinates = null;
                            if (geoNode.children == null)
                                geoNode.children = new Array();
                        }
                        geoNode.children.push(x);
                        connections += x.connections;
                        geoNode.connections = connections;
                    });
                    if (geoNode.children.length > 0) {
                        geoNode.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].center(geoNode.children);
                        geoNode.children.push({
                            id: geoNode.id,
                            connections: 0,
                            children: null,
                            coordinates: geoNode.coordinates,
                            level: geoNode.level,
                            segments: null
                        });
                        tempClusters.push(geoNode);
                    }
                    return tempClusters;
                };
                BackboneHelper.prototype.createCluster = function (sortedNodes, splitters, level) {
                    var tempClusters = new Array();
                    return tempClusters;
                };
                BackboneHelper.prototype.getTotalSplitterPorts = function (splitters) {
                    var outputPorts = 0;
                    splitters.forEach(function (x) {
                        outputPorts += parseInt(x.splitterRatio.split(":")[1]);
                    });
                    return outputPorts;
                };
                BackboneHelper.prototype.getPreferedCable = function (cableSettings, splitterCount) {
                    var cable = null;
                    if (cableSettings.cables && cableSettings.cables.length > 0) {
                        for (var i = 0; i < cableSettings.cables.length; i++) {
                            var availableConn = cableSettings.cables[i].corePerTube * cableSettings.cables[i].noOfTubes;
                            if (splitterCount < availableConn) {
                                cable = cableSettings.cables[i];
                                break;
                            }
                        }
                    }
                    return cable;
                };
                BackboneHelper.prototype.generateSegments = function (geoNodes) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var tempNodes, resp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    tempNodes = new Array();
                                    this.helper.log(this.design, "Information", "Generating segment information...");
                                    return [4 /*yield*/, this.httpClient.post(this.appConfig.urls.Routeware.GenerateMSTRecursive, { Region: this.appConfig.settings.Region, Nodes: geoNodes }).toPromise()];
                                case 1:
                                    resp = _a.sent();
                                    if (resp.status.toLowerCase() == "error") {
                                        this.helper.log(this.design.log, "Error", "Error generating segments - " + resp.message);
                                        throw new Error('Error generating segments..');
                                    }
                                    else {
                                        if (resp.data != null && resp.data.length > 0) {
                                            tempNodes = resp.data;
                                        }
                                    }
                                    this.helper.log(this.design, "Information", "Generating segment information completed");
                                    return [2 /*return*/, tempNodes];
                            }
                        });
                    });
                };
                BackboneHelper.prototype.generateSegmentEntities = function (preferedCable, segments, level) {
                    var _this = this;
                    if (segments && segments.length > 0) {
                        segments.forEach(function (segment) {
                            var cableType = _this.design.networkSettings[level].cabling.cableSettings.cableType;
                            var prefChamber = _this.design.networkSettings[level].cabling.cableSettings.chamber;
                            var prefPole = _this.design.networkSettings[level].cabling.cableSettings.pole;
                            var chamberInterval = _this.design.networkSettings[level].cabling.cableSettings.chamberInterval;
                            var loopLength = _this.design.networkSettings[level].cabling.cableSettings.cableLoop;
                            var loopEnd = _this.design.networkSettings[level].cabling.cableSettings.loopAtClosure;
                            segment.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                            //1. generate Cables
                            segment.cable = _this.entitiesHelper.createCable(preferedCable, segment.coordinates);
                            //2. Generate Poles/Chambers
                            if (cableType.toLowerCase() == "underground") {
                                segment.chambers = _this.entitiesHelper.createChambers(prefChamber, chamberInterval, segment, loopLength, loopEnd);
                            }
                            else {
                                segment.poles = _this.entitiesHelper.createPoles(prefPole, chamberInterval, segment, loopLength, loopEnd);
                            }
                        });
                    }
                };
                return BackboneHelper;
            }());
            BackboneHelper.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpClient"] },
                { type: _app_config__WEBPACK_IMPORTED_MODULE_7__["AppConfig"] },
                { type: _homepasses_services_homepass_service__WEBPACK_IMPORTED_MODULE_2__["HomepassService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            BackboneHelper = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], BackboneHelper);
            /***/ 
        }),
        /***/ "./src/app/designs/services/bom.helper.ts": 
        /*!************************************************!*\
          !*** ./src/app/designs/services/bom.helper.ts ***!
          \************************************************/
        /*! exports provided: BomHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BomHelper", function () { return BomHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            var BomHelper = /** @class */ (function () {
                function BomHelper(helper) {
                    this.helper = helper;
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_3__["Design"]();
                }
                BomHelper.prototype.generateBOQ = function (design) {
                    this.design = design;
                    this.design.boq = new Array();
                    this.generateBOQRec(design.bluePrint, this.design.boq);
                };
                BomHelper.prototype.generateBOQRec = function (group, boq) {
                    var _this = this;
                    if (group.segments) {
                        group.segments.forEach(function (x) {
                            //Add Cable Cost
                            if (x.cable) {
                                var supplier = x.cable.suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'Cable',
                                        code: x.cable.code,
                                        units: 'Meters',
                                        quantity: x.cable.measuredLength,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.cable.name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for cable - " + x.cable.name);
                            }
                            //Add Chambers Cost
                            if (x.chambers) {
                                supplier = x.chambers[0].suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'Chamber',
                                        code: "",
                                        units: 'Nos',
                                        quantity: x.chambers.length,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.chambers[0].name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for Chamber - " + x.chambers[0].name);
                            }
                            //Add Ducts Cost
                            if (x.ducts) {
                                supplier = x.ducts.suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'Duct',
                                        code: "",
                                        units: 'meters',
                                        quantity: x.ducts.measuredLength,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.ducts.name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for Duct - " + x.ducts.name);
                            }
                            //Add ODF Cost
                            if (x.odfs) {
                                supplier = x.odfs[0].suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'ODF',
                                        code: "",
                                        units: 'nos',
                                        quantity: x.odfs.length,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.odfs[0].name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for ODF - " + x.odfs[0].name);
                            }
                            //Add Poles Cost
                            if (x.poles) {
                                supplier = x.poles[0].suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'Pole',
                                        code: "",
                                        units: 'nos',
                                        quantity: x.poles.length,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.poles[0].name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for Pole - " + x.poles[0].name);
                            }
                            //Add Splitters Cost
                            if (x.splitters && x.splitters[0].suppliers) {
                                supplier = x.splitters[0].suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'Splitter',
                                        code: "",
                                        units: 'nos',
                                        quantity: x.splitters.length,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.splitters[0].name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for Splitter - " + x.splitters[0].name);
                            }
                            //Add Splice Closures Cost
                            if (x.spliceClosures) {
                                supplier = x.spliceClosures[0].suppliers.find(function (s) { return s.isPrefered == true; });
                                if (supplier) {
                                    boq.push({
                                        levelName: group.levelName,
                                        level: group.level,
                                        entityType: 'SpliceClosure',
                                        code: "",
                                        units: 'nos',
                                        quantity: x.spliceClosures.length,
                                        materialCost: supplier.price,
                                        serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                        currency: supplier.currency,
                                        description: x.spliceClosures[0].name
                                    });
                                }
                                else
                                    _this.helper.log(_this.design, "Error", "Supplier not available for Splice Closure - " + x.spliceClosures[0].name);
                            }
                            //Add CivilWorks Cost
                            //this.generateBoqEntry(boq, x.civilworks, "Civilwork", group, "");
                            if (x.civilworks) {
                                x.civilworks.forEach(function (cw) {
                                    supplier = cw.suppliers.find(function (s) { return s.isPrefered == true; });
                                    if (supplier) {
                                        boq.push({
                                            levelName: group.levelName,
                                            level: group.level,
                                            entityType: 'Civilwork',
                                            code: "",
                                            units: '',
                                            quantity: 1,
                                            materialCost: supplier.price,
                                            serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                            currency: supplier.currency,
                                            description: cw.name
                                        });
                                    }
                                    else
                                        _this.helper.log(_this.design, "Error", "Supplier not available for Civil work - " + cw.name);
                                });
                            }
                            //Add Accessories Cost
                            //this.generateBoqEntry(boq, x.accessories, "Accessory", group, "");
                            if (x.accessories) {
                                x.accessories.forEach(function (a) {
                                    supplier = a.suppliers.find(function (s) { return s.isPrefered == true; });
                                    if (supplier) {
                                        boq.push({
                                            levelName: group.levelName,
                                            level: group.level,
                                            entityType: "Accessory",
                                            code: "",
                                            units: '',
                                            quantity: 1,
                                            materialCost: supplier.price,
                                            serviceCost: supplier.serviceCost == null ? 0 : supplier.serviceCost,
                                            currency: supplier.currency,
                                            description: a.parentEntityType + ' - Accessories'
                                        });
                                    }
                                    else
                                        _this.helper.log(_this.design, "Error", "Supplier not available for Accessory - " + a.name);
                                });
                            }
                        });
                    }
                    if (group.children && group.children.length > 0)
                        group.children.forEach(function (g) {
                            _this.generateBOQRec(g, boq);
                        });
                };
                return BomHelper;
            }());
            BomHelper.ctorParameters = function () { return [
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_2__["Helper"] }
            ]; };
            BomHelper = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], BomHelper);
            /***/ 
        }),
        /***/ "./src/app/designs/services/design.helper.ts": 
        /*!***************************************************!*\
          !*** ./src/app/designs/services/design.helper.ts ***!
          \***************************************************/
        /*! exports provided: DesignHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignHelper", function () { return DesignHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _bom_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bom.helper */ "./src/app/designs/services/bom.helper.ts");
            /* harmony import */ var _fttx_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fttx.helper */ "./src/app/designs/services/fttx.helper.ts");
            /* harmony import */ var _backbone_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./backbone.helper */ "./src/app/designs/services/backbone.helper.ts");
            var DesignHelper = /** @class */ (function () {
                function DesignHelper(bomHelper, fttxHelper, backboneHelper, helper) {
                    this.bomHelper = bomHelper;
                    this.fttxHelper = fttxHelper;
                    this.backboneHelper = backboneHelper;
                    this.helper = helper;
                }
                DesignHelper.prototype.generateDesign = function (design) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var status;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    $("#ajax-loading").show();
                                    this.design = design;
                                    this.design.generatedCodes = null;
                                    this.design.boq = null;
                                    this.design.bluePrint = null;
                                    status = false;
                                    if (!(this.design.designType == 'FTTx')) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.fttxHelper.generateFTTxDesign(this.design)];
                                case 1:
                                    status = _a.sent();
                                    return [3 /*break*/, 4];
                                case 2: return [4 /*yield*/, this.backboneHelper.generateBackboneDesign(this.design)];
                                case 3:
                                    status = _a.sent();
                                    _a.label = 4;
                                case 4:
                                    if (status) {
                                        //Generate BOQ
                                        this.helper.log(this.design, "Information", "Generating BOQ...");
                                        this.design.boq = new Array();
                                        this.bomHelper.generateBOQ(this.design);
                                        this.helper.log(this.design, "Information", "Generated BOQ...");
                                        this.helper.log(this.design, "Information", "Design generated...");
                                        this.helper.showAlertMessage("Design Generated", "info");
                                    }
                                    else {
                                        this.helper.log(this.design, "Error", "Error generating design...");
                                        this.helper.showAlertMessage("Error generating design.", "error");
                                    }
                                    $("#ajax-loading").hide();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                return DesignHelper;
            }());
            DesignHelper.ctorParameters = function () { return [
                { type: _bom_helper__WEBPACK_IMPORTED_MODULE_3__["BomHelper"] },
                { type: _fttx_helper__WEBPACK_IMPORTED_MODULE_4__["FTTxHelper"] },
                { type: _backbone_helper__WEBPACK_IMPORTED_MODULE_5__["BackboneHelper"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_2__["Helper"] }
            ]; };
            DesignHelper = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], DesignHelper);
            /***/ 
        }),
        /***/ "./src/app/designs/services/design.service.ts": 
        /*!****************************************************!*\
          !*** ./src/app/designs/services/design.service.ts ***!
          \****************************************************/
        /*! exports provided: DesignService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignService", function () { return DesignService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _app_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../app.config */ "./src/app/app.config.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var DesignService = /** @class */ (function () {
                function DesignService(http, appConfig) {
                    this.http = http;
                    this.appConfig = appConfig;
                }
                DesignService.prototype.getDesigns = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "name",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_4__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.appConfig.urls.Design.getDesignsApi, paginationRequest);
                };
                DesignService.prototype.getDesign = function (designId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('designId', designId);
                    return this.http.get(this.appConfig.urls.Design.getDesignApi, { params: params });
                };
                DesignService.prototype.saveDesign = function (design) {
                    var formData = new FormData();
                    design.documents.forEach(function (x) {
                        if (x.file)
                            formData.append("DocumentFiles", x.file, x.file.name);
                    });
                    formData.append("SerializedDesign", JSON.stringify(design));
                    return this.http.post(this.appConfig.urls.Design.saveDesignApi, formData);
                    //return this.http.post<ServiceResponse>(this.appConfig.urls.Design.saveDesignApi, design);
                };
                DesignService.prototype.deleteDesign = function (designId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('designId', designId);
                    return this.http.delete(this.appConfig.urls.Design.deleteDesignApi, { params: params });
                };
                DesignService.prototype.deleteDocument = function (designId, documentId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('projectId', designId)
                        .set('documentId', documentId);
                    return this.http.get(this.appConfig.urls.Design.deleteDocumentApi, { params: params });
                };
                DesignService.prototype.exportDesign = function (designId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('designId', designId);
                    return this.http.get(this.appConfig.urls.Design.exportDesignApi, { params: params });
                };
                return DesignService;
            }());
            DesignService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
                { type: _app_config__WEBPACK_IMPORTED_MODULE_3__["AppConfig"] }
            ]; };
            DesignService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], DesignService);
            /***/ 
        }),
        /***/ "./src/app/designs/services/entities.helper.ts": 
        /*!*****************************************************!*\
          !*** ./src/app/designs/services/entities.helper.ts ***!
          \*****************************************************/
        /*! exports provided: EntitiesHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntitiesHelper", function () { return EntitiesHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _common_geo_geometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/geo/geometry */ "./src/app/common/geo/geometry.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
            /* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);
            var EntitiesHelper = /** @class */ (function () {
                function EntitiesHelper(bookingIds, generatedCodes) {
                    this.bookingIds = bookingIds;
                    this.generatedCodes = generatedCodes;
                }
                EntitiesHelper.prototype.createCable = function (prefCable, coordinates) {
                    var cable = lodash__WEBPACK_IMPORTED_MODULE_4__["cloneDeep"](prefCable);
                    cable.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    cable.entityType = "Cable";
                    cable.code = this.generateEntityCode("Cable");
                    cable.name = cable.code;
                    cable.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_2__["LineString"](coordinates);
                    cable.measuredLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_1__["GeoHelper"].getLength(coordinates) * 1000;
                    cable.isUnderground = prefCable.isUnderground;
                    cable.noOfTubes = prefCable.noOfTubes;
                    cable.corePerTube = prefCable.corePerTube;
                    cable.suppliers = prefCable.suppliers;
                    cable.customFields = prefCable.customFields;
                    cable.aLocation = coordinates[0][0] + "," + coordinates[0][1];
                    cable.bLocation = coordinates[coordinates.length - 1][0] + "," + coordinates[coordinates.length - 1][1];
                    return cable;
                };
                EntitiesHelper.prototype.createChambers = function (prefChamber, interval, segment, loopLength, loopEnd) {
                    var intervalPoints = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_1__["GeoHelper"].getPointsAtDistance(segment.coordinates, (interval / 1000));
                    var chambers = new Array();
                    for (var i = 0; i < intervalPoints.length; i++) {
                        if (i == intervalPoints.length - 1)
                            var chamber = this.createChamber(prefChamber, intervalPoints[i], (loopLength + loopEnd));
                        else
                            var chamber = this.createChamber(prefChamber, intervalPoints[i], loopLength);
                        chambers.push(chamber);
                    }
                    return chambers;
                };
                EntitiesHelper.prototype.createChamber = function (prefChamber, coordinate, loopLength) {
                    var chamber = lodash__WEBPACK_IMPORTED_MODULE_4__["cloneDeep"](prefChamber);
                    chamber.entityType = "Chamber";
                    chamber.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    chamber.code = this.generateEntityCode("Chamber");
                    chamber.name = chamber.code;
                    chamber.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_2__["Point"](coordinate);
                    chamber.loopLength = loopLength;
                    return chamber;
                };
                EntitiesHelper.prototype.createPoles = function (prefPole, interval, segment, loopLength, loopEnd) {
                    var intervalPoints = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_1__["GeoHelper"].getPointsAtDistance(segment.coordinates, (interval / 1000));
                    var poles = new Array();
                    for (var i = 0; i < intervalPoints.length; i++) {
                        if (i == intervalPoints.length - 1)
                            var pole = this.createPole(prefPole, intervalPoints[i], (loopLength + loopEnd));
                        else
                            var pole = this.createPole(prefPole, intervalPoints[i], loopLength);
                        poles.push(pole);
                    }
                    return poles;
                };
                EntitiesHelper.prototype.createPole = function (prefPole, coordinate, loopLength) {
                    var pole = lodash__WEBPACK_IMPORTED_MODULE_4__["cloneDeep"](prefPole);
                    pole.entityType = "Pole";
                    pole.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    pole.code = this.generateEntityCode("Pole");
                    pole.name = pole.code;
                    pole.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_2__["Point"](coordinate);
                    pole.loopLength = loopLength;
                    return pole;
                };
                EntitiesHelper.prototype.createSplitter = function (prefSplitter, coordinates) {
                    var splitter = lodash__WEBPACK_IMPORTED_MODULE_4__["cloneDeep"](prefSplitter);
                    splitter.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    splitter.entityType = "Splitter";
                    splitter.code = this.generateEntityCode("Splitter");
                    splitter.name = splitter.code;
                    splitter.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_2__["Point"](coordinates);
                    return splitter;
                };
                EntitiesHelper.prototype.createSpliceClosure = function (prefSpliceClosure, coordinates) {
                    var spliceClosure = lodash__WEBPACK_IMPORTED_MODULE_4__["cloneDeep"](prefSpliceClosure);
                    spliceClosure.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    spliceClosure.entityType = "SpliceClosure";
                    spliceClosure.code = this.generateEntityCode("SpliceClosure");
                    spliceClosure.name = spliceClosure.code;
                    spliceClosure.geometry = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_2__["Point"](coordinates);
                    return spliceClosure;
                };
                EntitiesHelper.prototype.generateEntityCode = function (entityType) {
                    var entityCode = "";
                    var maxId = null;
                    var bookingId = this.bookingIds.find(function (x) { return x.entityType == entityType; });
                    if (this.generatedCodes == null)
                        this.generatedCodes = new Array();
                    var codeId = this.generatedCodes.find(function (x) { return x.entityType == entityType; });
                    if (codeId) {
                        maxId = codeId.maxId + bookingId.step;
                        entityCode = bookingId.format.replace('{code}', maxId.toString());
                        codeId.maxId = maxId;
                    }
                    else {
                        maxId = bookingId.sequenceStart;
                        entityCode = bookingId.format.replace('{code}', maxId.toString());
                        this.generatedCodes.push({ entityType: entityType, maxId: maxId });
                    }
                    return entityCode;
                };
                return EntitiesHelper;
            }());
            /***/ 
        }),
        /***/ "./src/app/designs/services/fttx.helper.ts": 
        /*!*************************************************!*\
          !*** ./src/app/designs/services/fttx.helper.ts ***!
          \*************************************************/
        /*! exports provided: FTTxHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FTTxHelper", function () { return FTTxHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _homepasses_services_homepass_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../homepasses/services/homepass.service */ "./src/app/homepasses/services/homepass.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/geo/geoNode */ "./src/app/common/geo/geoNode.ts");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _app_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../app.config */ "./src/app/app.config.ts");
            /* harmony import */ var _entities_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./entities.helper */ "./src/app/designs/services/entities.helper.ts");
            var FTTxHelper = /** @class */ (function () {
                function FTTxHelper(httpClient, appConfig, homepassService, helper) {
                    this.httpClient = httpClient;
                    this.appConfig = appConfig;
                    this.homepassService = homepassService;
                    this.helper = helper;
                }
                FTTxHelper.prototype.generateFTTxDesign = function (design) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var status, homepasses, geoNodes_2, homepassNodes, level_2, _loop_6, this_6, index, popCentroid, designTree, e_3;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.design = design;
                                    this.design.bluePrint = null;
                                    this.entitiesHelper = new _entities_helper__WEBPACK_IMPORTED_MODULE_8__["EntitiesHelper"](design.bookingIds, design.generatedCodes);
                                    status = false;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 7, , 8]);
                                    this.helper.log(this.design, "Information", "Generating FTTX design...");
                                    return [4 /*yield*/, this.getHomepasses(this.design.clusterId)];
                                case 2:
                                    homepasses = _a.sent();
                                    if (homepasses == null || homepasses.length == 0)
                                        throw new Error('No homepasses to process...');
                                    geoNodes_2 = new Array();
                                    homepassNodes = new Array();
                                    level_2 = this.design.networkSettings.length + 1;
                                    this.design.homepasses = homepasses;
                                    homepasses.forEach(function (x) {
                                        geoNodes_2.push({ id: x.id, level: level_2, levelName: "homepasses", coordinates: x.geometry.coordinates, connections: x.connections });
                                    });
                                    _loop_6 = function (index) {
                                        var splitters, cableSettings, preferedCable;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    splitters = this_6.getSplitters(index);
                                                    if (splitters == null || splitters.length == 0) {
                                                        this_6.helper.log(this_6.design, "Error", "Splitters not defined at any of the levels...");
                                                        throw new Error('No splitters available to process...');
                                                    }
                                                    return [4 /*yield*/, this_6.createClusters(geoNodes_2, splitters, index)];
                                                case 1:
                                                    //let outputPorts = this.getTotalSplitterPorts(splitters);
                                                    //let connections = this.getConnectionsCount(geoNodes);
                                                    //let splitterCount = Math.ceil((connections / outputPorts) * (cableSettings.connectionPercent) / 100);
                                                    //geoNodes = GeoHelper.clustersKmeans(geoNodes, splitterCount, this.design.networkSettings[index].name);
                                                    geoNodes_2 = _a.sent();
                                                    cableSettings = this_6.design.networkSettings[index].cabling.cableSettings;
                                                    preferedCable = this_6.getPreferedCable(cableSettings, geoNodes_2.length);
                                                    if (preferedCable == null) {
                                                        this_6.helper.log(this_6.design, "Error", "Insufficient Cable Configuration");
                                                        throw new Error('Insufficient cable configuration');
                                                    }
                                                    return [4 /*yield*/, this_6.generateSegments(geoNodes_2)];
                                                case 2:
                                                    geoNodes_2 = _a.sent();
                                                    geoNodes_2.forEach(function (x) {
                                                        if (x.segments != null) {
                                                            _this.generateSegmentEntities(preferedCable, x, index);
                                                            if (_this.design.networkSettings[index].destinationNode.entitySettings.dataSource == 'automatic')
                                                                _this.placeSplitter(x.segments, x.coordinates, splitters);
                                                        }
                                                    });
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_6 = this;
                                    index = this.design.networkSettings.length - 1;
                                    _a.label = 3;
                                case 3:
                                    if (!(index >= 0)) return [3 /*break*/, 6];
                                    return [5 /*yield**/, _loop_6(index)];
                                case 4:
                                    _a.sent();
                                    _a.label = 5;
                                case 5:
                                    index--;
                                    return [3 /*break*/, 3];
                                case 6:
                                    popCentroid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].center(geoNodes_2);
                                    designTree = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                                    designTree.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                                    //designTree.levelName = "pop";
                                    designTree.coordinates = popCentroid;
                                    //designTree.connections = 1;
                                    designTree.children = geoNodes_2;
                                    this.design.bluePrint = designTree;
                                    status = true;
                                    return [3 /*break*/, 8];
                                case 7:
                                    e_3 = _a.sent();
                                    status = false;
                                    this.helper.log(this.design, "Error", e_3);
                                    return [3 /*break*/, 8];
                                case 8:
                                    $("#ajax-loading").hide();
                                    return [2 /*return*/, status];
                            }
                        });
                    });
                };
                FTTxHelper.prototype.getHomepasses = function (clusterId) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var homepasses, params, resp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.helper.log(this.design, "Information", "Getting home passes for cluster - " + clusterId);
                                    homepasses = new Array();
                                    if (!(this.design.designType == 'FTTx')) return [3 /*break*/, 2];
                                    params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpParams"]()
                                        .set('clusterId', clusterId);
                                    return [4 /*yield*/, this.httpClient.get(this.homepassService.getHomepassesInClusterApi, { params: params }).toPromise()];
                                case 1:
                                    resp = _a.sent();
                                    if (resp.status.toLowerCase() == "error") {
                                        this.helper.log(this.design.log, "Error", "Error fetching home passes - " + resp.message);
                                    }
                                    else {
                                        if (resp.data != null && resp.data.length > 0) {
                                            homepasses = resp.data;
                                        }
                                        this.helper.log(this.design, "Information", "Getting home passes completed");
                                    }
                                    _a.label = 2;
                                case 2: return [2 /*return*/, homepasses];
                            }
                        });
                    });
                };
                FTTxHelper.prototype.getSplitters = function (level) {
                    var splitters = [];
                    for (var i = level; i >= 0; i--) {
                        if (this.design.networkSettings[i].destinationNode.entitySettings.entityName == "Splitter") {
                            var sptrs = this.design.networkSettings[i].destinationNode.entitySettings.splitters;
                            if (sptrs[0].splitterRatio) {
                                splitters = sptrs;
                                break;
                            }
                        }
                        if (this.design.networkSettings[i].startNode.entitySettings.entityName == "Splitter") {
                            var sptrs = this.design.networkSettings[i].startNode.entitySettings.splitters;
                            if (sptrs[0].splitterRatio) {
                                splitters = sptrs;
                                break;
                            }
                        }
                    }
                    return splitters;
                };
                FTTxHelper.prototype.createClusters = function (geoNodes, splitters, level) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var tempGeoNodes, resp, e_4, sortedData_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.helper.log(this.design, "Information", "Generating clusters...");
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this.httpClient.post(this.appConfig.urls.Routeware.SortPoints, { Region: this.appConfig.settings.Region, Nodes: geoNodes }).toPromise()];
                                case 2:
                                    resp = _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_4 = _a.sent();
                                    alert(e_4);
                                    return [3 /*break*/, 4];
                                case 4:
                                    if (resp.status.toLowerCase() == "error") {
                                        this.helper.log(this.design.log, "Error", "Error sorting nodes - " + resp.message);
                                        throw Error("Error sorting nodes");
                                    }
                                    else {
                                        if (resp.data != null && resp.data.length > 0) {
                                            sortedData_1 = new Array();
                                            resp.data.forEach(function (x) {
                                                var i = geoNodes.find(function (n) { return x.id == n.id; });
                                                if (i)
                                                    sortedData_1.push(i);
                                            });
                                            if (this.design.networkSettings[level].destinationNode.entitySettings.dataSource == 'automatic') {
                                                //tempGeoNodes = this.createAutomaticCluster(sortedData, splitters, level);
                                                tempGeoNodes = this.createAutomaticCluster(geoNodes, splitters, level);
                                            }
                                            else {
                                                //tempGeoNodes = this.createExistingCluster(sortedData, splitters, level);
                                                tempGeoNodes = this.createExistingCluster(geoNodes, splitters, level);
                                            }
                                        }
                                        else {
                                            this.helper.log(this.design.log, "Error", "Nodes not available - " + resp.message);
                                            throw Error("Nodes not available");
                                        }
                                    }
                                    this.helper.log(this.design, "Information", "Sorting homepasses completed");
                                    return [2 /*return*/, tempGeoNodes];
                            }
                        });
                    });
                };
                FTTxHelper.prototype.createAutomaticCluster = function (sortedNodes, splitters, level) {
                    var _this = this;
                    var tempClusters = new Array();
                    var cableSettings = this.design.networkSettings[level].cabling.cableSettings;
                    //let outputPorts = this.getTotalSplitterPorts(splitters);
                    var outputPorts = parseInt(splitters[0].splitterRatio.split(":")[1]);
                    var outputPortsTemp = ((outputPorts * cableSettings.connectionPercent) / 100).toFixed();
                    var connections = 0;
                    var geoNode = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                    geoNode.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                    geoNode.levelName = this.design.networkSettings[level].name;
                    geoNode.level = level;
                    geoNode.coordinates = null;
                    geoNode.connections = 1;
                    geoNode.children = new Array();
                    sortedNodes.forEach(function (x) {
                        if ((parseInt(outputPortsTemp) - connections) <= 0) {
                            geoNode.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].center(geoNode.children);
                            //geoNode.children.push({
                            //   id: geoNode.id,
                            //   connections: 0,
                            //   children: null,
                            //   coordinates: geoNode.coordinates,
                            //   level: geoNode.level,
                            //   segments: null
                            //});
                            tempClusters.push(geoNode);
                            geoNode = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                            connections = 0;
                            geoNode.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                            geoNode.levelName = _this.design.networkSettings[level].name;
                            geoNode.level = level;
                            geoNode.coordinates = null;
                            geoNode.connections = 1;
                            if (geoNode.children == null)
                                geoNode.children = new Array();
                        }
                        geoNode.children.push(x);
                        connections += x.connections;
                        //geoNode.connections = connections;
                    });
                    if (geoNode.children.length > 0) {
                        geoNode.coordinates = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].center(geoNode.children);
                        //geoNode.children.push({
                        //   id: geoNode.id,
                        //   connections: 0,
                        //   children: null,
                        //   coordinates: geoNode.coordinates,
                        //   level: geoNode.level,
                        //   segments: null
                        //});
                        tempClusters.push(geoNode);
                    }
                    return tempClusters;
                };
                FTTxHelper.prototype.createExistingCluster = function (sortedNodes, splitters, level) {
                    var _this = this;
                    var tempClusters = new Array();
                    splitters.forEach(function (x) {
                        var geoNode = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["GeoNode"]();
                        geoNode.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                        geoNode.levelName = _this.design.networkSettings[level].name;
                        geoNode.level = level;
                        geoNode.coordinates = x.geometry.coordinates;
                        geoNode.connections = 1;
                        geoNode["availableConnections"] = 8;
                        geoNode.children = new Array();
                        tempClusters.push(geoNode);
                    });
                    sortedNodes.forEach(function (x) {
                        var nearestSplitter = _this.getNearestSplitter(x.coordinates, tempClusters, x.connections);
                        if (nearestSplitter && nearestSplitter["availableConnections"] >= x.connections) {
                            if (nearestSplitter.children == null)
                                nearestSplitter.children = new Array();
                            nearestSplitter.children.push(x);
                            //nearestSplitter.connections += x.connections;
                            nearestSplitter["availableConnections"] -= x.connections;
                        }
                    });
                    var validClusters = new Array();
                    tempClusters.forEach(function (x) {
                        if (x.children.length > 0)
                            validClusters.push(x);
                    });
                    return validClusters;
                };
                //getTotalSplitterPorts(splitters: Splitter[]): number {
                //    let outputPorts = 0;
                //    splitters.forEach(x => {
                //        outputPorts += parseInt(x.splitterRatio.split(":")[1])
                //    });
                //    return outputPorts;
                //}
                FTTxHelper.prototype.getPreferedCable = function (cableSettings, splitterCount) {
                    var cable = null;
                    if (cableSettings.cables && cableSettings.cables.length > 0) {
                        for (var i = 0; i < cableSettings.cables.length; i++) {
                            var availableConn = cableSettings.cables[i].corePerTube * cableSettings.cables[i].noOfTubes;
                            if (splitterCount < availableConn) {
                                cable = cableSettings.cables[i];
                                break;
                            }
                        }
                    }
                    return cable;
                };
                FTTxHelper.prototype.generateSegments = function (geoNodes) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var tempNodes, resp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    tempNodes = new Array();
                                    this.helper.log(this.design, "Information", "Generating segment information...");
                                    return [4 /*yield*/, this.httpClient.post(this.appConfig.urls.Routeware.GenerateMSTRecursive, { Region: this.appConfig.settings.Region, Nodes: geoNodes }).toPromise()];
                                case 1:
                                    resp = _a.sent();
                                    if (resp.status.toLowerCase() == "error") {
                                        this.helper.log(this.design.log, "Error", "Error generating segments - " + resp.message);
                                        throw new Error('Error generating segments..');
                                    }
                                    else {
                                        if (resp.data != null && resp.data.length > 0) {
                                            tempNodes = resp.data;
                                        }
                                    }
                                    this.helper.log(this.design, "Information", "Generating segment information completed");
                                    return [2 /*return*/, tempNodes];
                            }
                        });
                    });
                };
                FTTxHelper.prototype.generateSegmentEntities = function (preferedCable, geoNode, level) {
                    var _this = this;
                    var sourceEntity = this.design.networkSettings[level].startNode.entitySettings.entityName;
                    var cableType = this.design.networkSettings[level].cabling.cableSettings.cableType;
                    var prefChamber = this.design.networkSettings[level].cabling.cableSettings.chamber;
                    var prefPole = this.design.networkSettings[level].cabling.cableSettings.pole;
                    var prefSpliceClosure = this.design.networkSettings[level].cabling.spliceClosureSettings.spliceClosures[0];
                    var chamberInterval = this.design.networkSettings[level].cabling.cableSettings.chamberInterval;
                    var loopLength = this.design.networkSettings[level].cabling.cableSettings.cableLoop;
                    var loopDistance = this.design.networkSettings[level].cabling.cableSettings.loopInterval;
                    var loopEnd = this.design.networkSettings[level].cabling.cableSettings.loopAtClosure;
                    var drumLength = this.design.networkSettings[level].cabling.spliceClosureSettings.drumLength;
                    geoNode.segments = this.splitSegments(geoNode.segments, drumLength, loopDistance, loopLength, loopEnd);
                    var segments = geoNode.segments;
                    if (segments && segments.length > 0) {
                        segments.forEach(function (segment) {
                            segment.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                            //1. generate Cables
                            segment.cable = _this.entitiesHelper.createCable(preferedCable, segment.coordinates);
                            segment.cable.calculatedLength = (((segment.cable.measuredLength / loopDistance)) * loopLength) + segment.cable.measuredLength + loopEnd;
                            //2. Generate Poles/Chambers
                            if (cableType.toLowerCase() == "underground") {
                                segment.chambers = _this.entitiesHelper.createChambers(prefChamber, chamberInterval, segment, loopLength, loopEnd);
                            }
                            else {
                                segment.poles = _this.entitiesHelper.createPoles(prefPole, chamberInterval, segment, loopLength, loopEnd);
                            }
                            //3. Place SpliceClosure at end of each segment
                            var cableEndPoint = segment.coordinates[segment.coordinates.length - 1];
                            var spliceClosure = _this.entitiesHelper.createSpliceClosure(prefSpliceClosure, cableEndPoint);
                            if (segment.spliceClosures == null)
                                segment.spliceClosures = new Array();
                            segment.spliceClosures.push(spliceClosure);
                        });
                        //If not splitter, place entities near Homepasses
                        if (sourceEntity != "Splitter") {
                            geoNode.children.forEach(function (item) {
                                var nearestSegment = _this.getNearestSegment(segments, item.coordinates);
                                var nearestPoint = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].nearestPointOnLine(item.coordinates, nearestSegment.coordinates);
                                switch (sourceEntity) {
                                    case "Chamber":
                                        if (nearestSegment.chambers == null)
                                            nearestSegment.chambers = new Array();
                                        var chamber = _this.entitiesHelper.createChamber(prefChamber, nearestPoint, loopLength);
                                        nearestSegment.chambers.push(chamber);
                                        break;
                                    case "Pole":
                                        if (nearestSegment.poles == null)
                                            nearestSegment.poles = new Array();
                                        var pole = _this.entitiesHelper.createPole(prefPole, nearestPoint, loopLength);
                                        nearestSegment.poles.push(pole);
                                        break;
                                    case "SpliceClosure":
                                        if (nearestSegment.spliceClosures == null)
                                            nearestSegment.spliceClosures = new Array();
                                        var spliceClosure = _this.entitiesHelper.createSpliceClosure(prefSpliceClosure, nearestPoint);
                                        nearestSegment.spliceClosures.push(spliceClosure);
                                        break;
                                    default:
                                }
                            });
                        }
                    }
                };
                FTTxHelper.prototype.splitSegments = function (segments, drumLength, loopDistance, loopLength, loopEnd) {
                    var tempSegments = new Array();
                    var eSegmentLength = ((loopDistance * (drumLength + loopLength - loopEnd)) / (loopLength + loopDistance)) / 1000;
                    segments.forEach(function (segment) {
                        //let intervalPoints = GeoHelper.getPointsAtDistance(segment.coordinates, (chamberInterval / 1000));
                        var segmentLength = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].getLength(segment.coordinates);
                        if (segmentLength <= eSegmentLength)
                            tempSegments.push(segment);
                        else {
                            var points = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].lineChunk(segment.coordinates, eSegmentLength);
                            points.forEach(function (x) {
                                var newSegment = new _common_geo_geoNode__WEBPACK_IMPORTED_MODULE_4__["Segment"]();
                                newSegment.id = _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"].generateObjectId();
                                newSegment.coordinates = x;
                                tempSegments.push(newSegment);
                            });
                        }
                    });
                    return tempSegments;
                };
                FTTxHelper.prototype.placeSplitter = function (segments, point, splitters) {
                    if (segments && segments.length > 0) {
                        var nearestSegment = this.getNearestSegment(segments, point);
                        //let nearestPoint = GeoHelper.nearestPointOnLine(point, nearestSegment.coordinates);
                        var nearestPoint = null;
                        if (nearestSegment.chambers && nearestSegment.chambers.length > 0) {
                            nearestPoint = this.getNearestPoleOrChamberLocation(nearestSegment.chambers, point);
                        }
                        else {
                            nearestPoint = this.getNearestPoleOrChamberLocation(nearestSegment.poles, point);
                        }
                        if (nearestSegment.splitters == null)
                            nearestSegment.splitters = new Array();
                        var splitter = this.entitiesHelper.createSplitter(splitters[0], nearestPoint);
                        nearestSegment.splitters.push(splitter);
                    }
                };
                FTTxHelper.prototype.getNearestSegment = function (segments, point) {
                    var distance;
                    var nearestSegment;
                    segments.forEach(function (x) {
                        var d = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].pointToLineDistance(point, x.coordinates);
                        if (distance == null) {
                            distance = d;
                            nearestSegment = x;
                        }
                        else {
                            if (d < distance) {
                                distance = d;
                                nearestSegment = x;
                            }
                        }
                    });
                    return nearestSegment;
                };
                FTTxHelper.prototype.getNearestSplitter = function (point, splitters, connections) {
                    var filteredSplitters = new Array();
                    splitters.forEach(function (x) {
                        if (x["availableConnections"] >= connections)
                            filteredSplitters.push(x);
                    });
                    //let filteredSplitters = splitters.filter(x => {
                    //    x["availableConnections"] >= connections;
                    //});
                    var nearestSplitter = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].nearestPoint(point, filteredSplitters);
                    return nearestSplitter;
                };
                FTTxHelper.prototype.getNearestPoleOrChamberLocation = function (entity, point) {
                    var coords = [];
                    entity.forEach(function (x) {
                        coords.push(x.geometry.coordinates);
                    });
                    var nearestPoint = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].nearestPoint2(point, coords);
                    return nearestPoint;
                };
                return FTTxHelper;
            }());
            FTTxHelper.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_5__["HttpClient"] },
                { type: _app_config__WEBPACK_IMPORTED_MODULE_7__["AppConfig"] },
                { type: _homepasses_services_homepass_service__WEBPACK_IMPORTED_MODULE_2__["HomepassService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_3__["Helper"] }
            ]; };
            FTTxHelper = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], FTTxHelper);
            /***/ 
        }),
        /***/ "./src/app/designs/services/geoNode.helper.ts": 
        /*!****************************************************!*\
          !*** ./src/app/designs/services/geoNode.helper.ts ***!
          \****************************************************/
        /*! exports provided: GeoNodeHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoNodeHelper", function () { return GeoNodeHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var GeoNodeHelper = /** @class */ (function () {
                function GeoNodeHelper() {
                }
                GeoNodeHelper.prototype.getSegmentById = function () {
                };
                GeoNodeHelper.deleteSegmentEntity = function (geoNode, entityId, entityType) {
                    var _this = this;
                    var i = 0;
                    if (geoNode) {
                        //if (group.children)
                        //    group.children.forEach(x => {
                        //        this.removeMapObject(x);
                        //    });
                        if (geoNode.segments) {
                            geoNode.segments.forEach(function (x) {
                                i = i + 1;
                                if ((entityType == "Cable" || x.cable.entityType == "Cable") && (x.cable.id == entityId)) {
                                    //x.cable = null;
                                    //geoNode.segments.slice[i - 1];
                                    var index = geoNode.segments.map(function (x) { return x.cable.id; }).indexOf(entityId);
                                    geoNode.segments.splice(index, 1);
                                }
                                if (entityType == "Chamber" && x.chambers) {
                                    var index_1 = x.chambers.findIndex(function (i) { return i.id == entityId; });
                                    if (index_1 >= 0)
                                        x.chambers.splice(index_1, 1);
                                }
                                //if (entityType == "Duct") {
                                //    x.ducts.forEach(duct => {
                                //        if (duct.id == entityId)
                                //            duct = null;
                                //    })
                                //}
                                if (entityType == "ODF" && x.odfs) {
                                    var index_2 = x.odfs.findIndex(function (i) { return i.id == entityId; });
                                    if (index_2 >= 0)
                                        x.odfs.splice(index_2, 1);
                                }
                                if (entityType == "Pole" && x.poles) {
                                    var index_3 = x.poles.findIndex(function (i) { return i.id == entityId; });
                                    if (index_3 >= 0)
                                        x.poles.splice(index_3, 1);
                                }
                                if (entityType == "Splitter" && x.splitters) {
                                    var index_4 = x.splitters.findIndex(function (i) { return i.id == entityId; });
                                    if (index_4 >= 0)
                                        x.splitters.splice(index_4, 1);
                                }
                                if (entityType == "SpliceClosure" && x.spliceClosures) {
                                    var index_5 = x.spliceClosures.findIndex(function (i) { return i.id == entityId; });
                                    if (index_5 >= 0)
                                        x.spliceClosures.splice(index_5, 1);
                                }
                                if (entityType == "FAT" && x.fats) {
                                    var index_6 = x.fats.findIndex(function (i) { return i.id == entityId; });
                                    if (index_6 >= 0)
                                        x.fats.splice(index_6, 1);
                                }
                                if (entityType == "FDT" && x.fdts) {
                                    var index_7 = x.fdts.findIndex(function (i) { return i.id == entityId; });
                                    if (index_7 >= 0)
                                        x.fdts.splice(index_7, 1);
                                }
                                if ((entityType == "MicroDuct" || x.microduct.entityType == "MicroDuct") && x.microduct.id == entityId) {
                                    var index = geoNode.segments.map(function (x) { return x.microduct.id; }).indexOf(entityId);
                                    geoNode.segments.splice(index, 1);
                                }
                            });
                        }
                        if (geoNode.children && geoNode.children.length > 0)
                            geoNode.children.forEach(function (g) {
                                _this.deleteSegmentEntity(g, entityId, entityType);
                            });
                    }
                };
                GeoNodeHelper.deleteLineSegmentEntity = function (geoNode, entityId, entityType) {
                    //console.log(geoNode);
                    //console.log(entityId);
                    //console.log(entityType);
                    if (entityType == "Duct") {
                        for (var i = 0; i <= geoNode.children.length - 1; i++) {
                            for (var j = 0; j <= geoNode.children[i].segments.length - 1; j++) {
                                if (geoNode.children[i].segments[j].ducts != undefined) {
                                    if (geoNode.children[i].segments[j].ducts.id == entityId) {
                                        geoNode.children[i].segments.splice(j, 1);
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                    if (entityType == "MicroDuct") {
                        for (var i = 0; i <= geoNode.children.length - 1; i++) {
                            for (var j = 0; j <= geoNode.children[i].segments.length - 1; j++) {
                                if (geoNode.children[i].segments[j].microduct != undefined) {
                                    if (geoNode.children[i].segments[j].microduct.id == entityId) {
                                        geoNode.children[i].segments.splice(j, 1);
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                };
                GeoNodeHelper.getLastSegment = function (geoNode) {
                    var _this = this;
                    var segment = null;
                    if (geoNode) {
                        if (geoNode.segments) {
                            geoNode.segments.forEach(function (x) {
                                segment = x;
                            });
                        }
                        if (geoNode.children && geoNode.children.length > 0)
                            geoNode.children.forEach(function (g) {
                                _this.getLastSegment(g);
                            });
                    }
                    return segment;
                };
                return GeoNodeHelper;
            }());
            /***/ 
        }),
        /***/ "./src/app/designs/services/map-entities.helper.ts": 
        /*!*********************************************************!*\
          !*** ./src/app/designs/services/map-entities.helper.ts ***!
          \*********************************************************/
        /*! exports provided: MapEntitiesHelper */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapEntitiesHelper", function () { return MapEntitiesHelper; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/geo/googleMapsHelper */ "./src/app/common/geo/googleMapsHelper.ts");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            var MapEntitiesHelper = /** @class */ (function () {
                function MapEntitiesHelper(map) {
                    this.map = map;
                }
                MapEntitiesHelper.prototype.drawPoint = function (entity, icon, isEditable, attachMapObject) {
                    var coordinates = [];
                    if (entity.geometry)
                        coordinates = entity.geometry.coordinates;
                    else if (entity.coordinates)
                        coordinates = entity.coordinates;
                    var location = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_2__["GeoHelper"].convertToPosition(coordinates);
                    var marker = new google.maps.Marker({
                        position: location,
                        draggable: isEditable,
                        cursor: 'pointer',
                        id: entity.id,
                        data: entity,
                        //icon: {
                        //    url: icon,
                        //    ////origin: new google.maps.Point(96, 0),
                        //    ////size: new google.maps.Size(96, 96),
                        //    ////scaledSize: new google.maps.Size(192, 96),
                        //    //anchor: new google.maps.Point(10, 10)
                        //},
                        icon: icon,
                        map: this.map
                    });
                    //https://pepsized.com/customize-your-google-map-markers/
                    marker.setTitle(entity.layerName);
                    if (attachMapObject)
                        entity['mapObject'] = marker;
                    return marker;
                };
                MapEntitiesHelper.prototype.drawLine = function (entity, lineColor, strokeWeight, isEditable, attachMapObject) {
                    var colour = "#000000";
                    var lineWeight = 3;
                    if (lineColor)
                        colour = lineColor;
                    if (strokeWeight)
                        lineWeight = strokeWeight;
                    var polyline = new google.maps.Polyline({
                        strokeColor: colour,
                        strokeOpacity: 1.0,
                        strokeWeight: lineWeight,
                        editable: isEditable,
                        data: entity,
                        id: entity.id,
                        map: this.map
                    });
                    var path = polyline.getPath();
                    polyline.setMap(this.map);
                    if (attachMapObject)
                        entity['mapObject'] = polyline;
                    if (entity.geometry != undefined) {
                        if (entity.geometry.coordinates.length > 1) {
                            for (var i = 0; i < entity.geometry.coordinates.length; i++) {
                                path.push(new google.maps.LatLng(entity.geometry.coordinates[i][1], entity.geometry.coordinates[i][0]));
                            }
                            polyline.setEditable(false);
                        }
                    }
                    else {
                        GMHelper.clearClickListener(this.map, "click");
                        GMHelper.addListener(this.map, "click", function (event) {
                            polyline.setEditable(true);
                            path = polyline.getPath();
                            path.push(event.latLng);
                        });
                        this.map.setOptions({ draggableCursor: 'crosshair' });
                        GMHelper.addListener(polyline, "rightclick", function (event) {
                            GMHelper.clearClickListener(polyline, "rightclick");
                            GMHelper.clearClickListener(polyline.map, "click");
                            polyline.map.setOptions({ draggableCursor: '' });
                            polyline.setEditable(false);
                            entity['mapObject'] = polyline;
                            return polyline;
                        });
                    }
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__["GMapsHelper"].addListener(polyline, 'mouseover', function (latlng) {
                        polyline.setOptions({ strokeColor: '#FF0000', strokeWeight: lineWeight + 2 });
                    });
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__["GMapsHelper"].addListener(polyline, 'mouseout', function (latlng) {
                        polyline.setOptions({ strokeColor: lineColor, strokeWeight: lineWeight });
                    });
                    return polyline;
                };
                MapEntitiesHelper.prototype.drawPolygon = function (entity, lineColor, strokeWeight, isEditable, attachMapObject) {
                    var colour = "#000000";
                    var lineWeight = 3;
                    if (lineColor)
                        colour = lineColor;
                    if (strokeWeight)
                        lineWeight = strokeWeight;
                    var polygon = new google.maps.Polygon({
                        strokeColor: colour,
                        strokeOpacity: 1.0,
                        strokeWeight: lineWeight,
                        editable: isEditable,
                        data: entity,
                        id: entity.id
                    });
                    var path = polygon.getPath();
                    polygon.setMap(this.map);
                    if (attachMapObject)
                        entity['mapObject'] = polygon;
                    if (entity.geometry.coordinates.length > 1) {
                        for (var i = 0; i < entity.geometry.coordinates.length; i++) {
                            path.push(new google.maps.LatLng(entity.geometry.coordinates[i][1], entity.geometry.coordinates[i][0]));
                        }
                        polygon.setEditable(false);
                    }
                    return polygon;
                };
                MapEntitiesHelper.prototype.removeMapObjects = function (entities) {
                    if (entities) {
                        if (entities.length > 0) {
                            entities.forEach(function (x) {
                                if (x['mapObject']) {
                                    x['mapObject'].setMap(null);
                                }
                            });
                        }
                        else {
                            if (entities['mapObject']) {
                                entities['mapObject'].setMap(null);
                            }
                        }
                    }
                };
                //removeLines(entities: any) {
                //    if (entities) {
                //        if (entities.length > 0) {
                //            entities.forEach(x => {
                //                if (x['mapObject']) {
                //                    x['mapObject'].setMap(null);
                //                }
                //            });
                //        }
                //        else {
                //            if (entities['mapObject']) {
                //                entities['mapObject'].setMap(null);
                //            }
                //        }
                //    }
                //}
                MapEntitiesHelper.prototype.drawDuctLine = function (entity, lineColor, strokeWeight, isEditable, attachMapObject) {
                    var polyline;
                    var lineSymbol = {
                        path: 'M 0,-1 0,1',
                        strokeOpacity: 1,
                        scale: 4
                    };
                    polyline = new google.maps.Polyline({
                        strokeColor: '#FFA500',
                        strokeOpacity: 0,
                        editable: isEditable,
                        data: entity,
                        id: entity.id,
                        map: this.map,
                        icons: [{
                                icon: lineSymbol,
                                offset: '0',
                                repeat: '20px'
                            }],
                    });
                    var path = polyline.getPath();
                    polyline.setMap(this.map);
                    if (attachMapObject)
                        entity['mapObject'] = polyline;
                    if (entity.geometry != undefined) {
                        if (entity.geometry.coordinates.length > 1) {
                            for (var i = 0; i < entity.geometry.coordinates.length; i++) {
                                path.push(new google.maps.LatLng(entity.geometry.coordinates[i][1], entity.geometry.coordinates[i][0]));
                            }
                            polyline.setEditable(false);
                        }
                    }
                    else {
                        GMHelper.clearClickListener(this.map, "click");
                        GMHelper.addListener(this.map, "click", function (event) {
                            polyline.setEditable(true);
                            path = polyline.getPath();
                            path.push(event.latLng);
                        });
                        this.map.setOptions({ draggableCursor: 'crosshair' });
                        GMHelper.addListener(polyline, "rightclick", function (event) {
                            GMHelper.clearClickListener(polyline, "rightclick");
                            GMHelper.clearClickListener(polyline.map, "click");
                            polyline.map.setOptions({ draggableCursor: '' });
                            polyline.setEditable(false);
                            entity['mapObject'] = polyline;
                            return polyline;
                        });
                    }
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__["GMapsHelper"].addListener(polyline, 'mouseover', function (latlng) {
                        polyline.setOptions({ strokeColor: '#FFA500' });
                    });
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__["GMapsHelper"].addListener(polyline, 'mouseout', function (latlng) {
                        polyline.setOptions({ strokeColor: 'FFA500' });
                    });
                    return polyline;
                };
                MapEntitiesHelper.prototype.drawMicroDuctLine = function (entity, lineColor, strokeWeight, isEditable, attachMapObject) {
                    var polyline;
                    var lineSymbol = {
                        path: 'M 0,-1 0,1',
                        strokeOpacity: 1,
                        scale: 4
                    };
                    polyline = new google.maps.Polyline({
                        strokeColor: '#000000',
                        strokeOpacity: 0,
                        editable: isEditable,
                        data: entity,
                        id: entity.id,
                        map: this.map,
                        icons: [{
                                icon: lineSymbol,
                                offset: '0',
                                repeat: '20px'
                            }],
                    });
                    var path = polyline.getPath();
                    polyline.setMap(this.map);
                    if (attachMapObject)
                        entity['mapObject'] = polyline;
                    if (entity.geometry != undefined) {
                        if (entity.geometry.coordinates.length > 1) {
                            for (var i = 0; i < entity.geometry.coordinates.length; i++) {
                                path.push(new google.maps.LatLng(entity.geometry.coordinates[i][1], entity.geometry.coordinates[i][0]));
                            }
                            polyline.setEditable(false);
                        }
                    }
                    else {
                        GMHelper.clearClickListener(this.map, "click");
                        GMHelper.addListener(this.map, "click", function (event) {
                            polyline.setEditable(true);
                            path = polyline.getPath();
                            path.push(event.latLng);
                        });
                        this.map.setOptions({ draggableCursor: 'crosshair' });
                        GMHelper.addListener(polyline, "rightclick", function (event) {
                            GMHelper.clearClickListener(polyline, "rightclick");
                            GMHelper.clearClickListener(polyline.map, "click");
                            polyline.map.setOptions({ draggableCursor: '' });
                            polyline.setEditable(false);
                            entity['mapObject'] = polyline;
                            return polyline;
                        });
                    }
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__["GMapsHelper"].addListener(polyline, 'mouseover', function (latlng) {
                        polyline.setOptions({ strokeColor: '#000000' });
                    });
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_1__["GMapsHelper"].addListener(polyline, 'mouseout', function (latlng) {
                        polyline.setOptions({ strokeColor: '000000' });
                    });
                    return polyline;
                };
                return MapEntitiesHelper;
            }());
            /***/ 
        }),
        /***/ "./src/app/designs/views/design-details.ts": 
        /*!*************************************************!*\
          !*** ./src/app/designs/views/design-details.ts ***!
          \*************************************************/
        /*! exports provided: DesignDetails */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignDetails", function () { return DesignDetails; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _services_design_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/design.service */ "./src/app/designs/services/design.service.ts");
            /* harmony import */ var _models_design__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/design */ "./src/app/designs/models/design.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _services_design_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/design.helper */ "./src/app/designs/services/design.helper.ts");
            /* harmony import */ var _services_bom_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/bom.helper */ "./src/app/designs/services/bom.helper.ts");
            var DesignDetails = /** @class */ (function () {
                function DesignDetails(location, route, designService, designHelper, helper, bomHelper) {
                    this.location = location;
                    this.route = route;
                    this.designService = designService;
                    this.designHelper = designHelper;
                    this.helper = helper;
                    this.bomHelper = bomHelper;
                    this.referenceId = "";
                    this.design = new _models_design__WEBPACK_IMPORTED_MODULE_5__["Design"]();
                    this.designs = new Array();
                    this.allDesigns = new Array();
                    this.title = "New Design";
                }
                DesignDetails.prototype.ngOnInit = function () {
                    var _this = this;
                    this.route.params.subscribe(function (params) {
                        _this.referenceId = params['id'];
                        if (_this.referenceId == null)
                            _this.title = "New Design";
                        else
                            _this.title = "Edit Design";
                        _this.getFormData(_this.referenceId);
                    });
                };
                DesignDetails.prototype.getFormData = function (referenceId) {
                    var _this = this;
                    $("#ajax-loading").show();
                    this.designService.getDesigns().subscribe(function (resp) {
                        if (resp.status.toLowerCase() == "error") {
                            _this.helper.showAlertMessage(resp.message, "error");
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.allDesigns = resp.data;
                                if (_this.allDesigns && _this.allDesigns.length > 0)
                                    _this.designs = _this.allDesigns.filter(function (x) { return x.referenceId == referenceId; });
                                if (_this.designs && _this.designs.length > 0) {
                                    var latestVersion_1 = Math.max.apply(Math, _this.designs.map(function (o) { return o.version; }));
                                    _this.design = _this.designs.find(function (x) { return x.version == latestVersion_1; });
                                }
                                _this.allDesigns = _this.allDesigns.filter(function (x) { return x.id != _this.design.id; });
                                if (_this.design.bluePrint) {
                                    _this.bomHelper.generateBOQ(_this.design);
                                }
                            }
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        var msg = "Unable to fetch design : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                    });
                };
                DesignDetails.prototype.onVersionChange = function (event) {
                    this.design = this.designs.find(function (x) { return x.version == event; });
                };
                DesignDetails.prototype.generateDesign = function () {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.designHelper.generateDesign(this.design)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                DesignDetails.prototype.save = function () {
                    var _this = this;
                    var errorMessages = this.validateDesign(this.design);
                    if (errorMessages.length == 0) {
                        this.clearMapObjects(this.design.bluePrint);
                        this.designService.saveDesign(this.design).subscribe(function (resp) {
                            if (resp.status.toLowerCase() == "error") {
                                _this.helper.showAlertMessage(resp.message, "error");
                            }
                            else {
                                if (resp.data != null) {
                                    _this.helper.showAlertMessage("Design information saved", "success");
                                    _this.goBack();
                                }
                                else
                                    _this.helper.showAlertMessage("Unable to save design information.", "error");
                            }
                        }, function (err) {
                            _this.helper.showAlertMessage("Unable to save design information.", "error");
                        });
                    }
                    else {
                        var errorMessage = this.helper.getErrorMessagesText(errorMessages);
                        this.helper.showAlertMessage(errorMessage, "error");
                    }
                };
                DesignDetails.prototype.clearMapObjects = function (group) {
                    var _this = this;
                    if (group) {
                        if (group.children)
                            group.children.forEach(function (x) {
                                _this.removeMapObject(x);
                            });
                        if (group.segments) {
                            group.segments.forEach(function (x) {
                                _this.removeMapObject(x.cable);
                                _this.removeMapObject(x.chambers);
                                _this.removeMapObject(x.ducts);
                                _this.removeMapObject(x.odfs);
                                _this.removeMapObject(x.poles);
                                _this.removeMapObject(x.splitters);
                                _this.removeMapObject(x.spliceClosures);
                                _this.removeMapObject(x.fdts);
                                _this.removeMapObject(x.fats);
                                _this.removeMapObject(x.microduct);
                            });
                        }
                        if (group.children && group.children.length > 0)
                            group.children.forEach(function (g) {
                                _this.clearMapObjects(g);
                            });
                    }
                };
                DesignDetails.prototype.removeMapObject = function (entities) {
                    if (entities) {
                        if (entities.length > 0) {
                            entities.forEach(function (x) {
                                if (x['mapObject']) {
                                    x['mapObject'] = null;
                                }
                            });
                        }
                        else {
                            if (entities['mapObject']) {
                                entities['mapObject'] = null;
                            }
                        }
                    }
                };
                DesignDetails.prototype.saveNewVersion = function () {
                    var latestVersion = Math.max.apply(Math, this.designs.map(function (o) { return o.version; }));
                    this.design.id = null;
                    this.design.version = latestVersion + 1;
                    this.save();
                };
                DesignDetails.prototype.validateDesign = function (design) {
                    var errorMessages = [];
                    if (design.name == null || design.name.trim() == '')
                        errorMessages.push("Design name cannot be empty");
                    if (design.code == null || design.code.trim() == '')
                        errorMessages.push("Design code cannot be empty");
                    return errorMessages;
                };
                DesignDetails.prototype.goBack = function () {
                    this.location.back();
                };
                return DesignDetails;
            }());
            DesignDetails.ctorParameters = function () { return [
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"] },
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] },
                { type: _services_design_service__WEBPACK_IMPORTED_MODULE_4__["DesignService"] },
                { type: _services_design_helper__WEBPACK_IMPORTED_MODULE_7__["DesignHelper"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_6__["Helper"] },
                { type: _services_bom_helper__WEBPACK_IMPORTED_MODULE_8__["BomHelper"] }
            ]; };
            DesignDetails = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./design-details.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/views/design-details.html")).default,
                    providers: [_services_design_service__WEBPACK_IMPORTED_MODULE_4__["DesignService"]],
                })
            ], DesignDetails);
            /***/ 
        }),
        /***/ "./src/app/designs/views/design-list.ts": 
        /*!**********************************************!*\
          !*** ./src/app/designs/views/design-list.ts ***!
          \**********************************************/
        /*! exports provided: DesignList */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DesignList", function () { return DesignList; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            /* harmony import */ var _services_design_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/design.service */ "./src/app/designs/services/design.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            var DesignList = /** @class */ (function () {
                function DesignList(designService, helper) {
                    this.designService = designService;
                    this.helper = helper;
                    this.designs = new Array();
                    this.statusMessage = "";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.totalPages = 1;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SortOrder"].descending;
                    this.searchFields = new Array();
                    this.searchFields.push({ field: 'Name', label: 'Name', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'DesignType', label: 'Design Type', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'Version', label: 'Version', dataType: "number", value: "" });
                    this.searchFields.push({ field: 'UpdatedBy', label: 'Updated By', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedDate', label: 'Updated On', dataType: "date", value: "" });
                }
                DesignList.prototype.ngOnInit = function () {
                    this.statusMessage = "Loading Designs...";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.sortColumn = null;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SortOrder"].noSort;
                    this.getFormData();
                };
                DesignList.prototype.getFormData = function () {
                    var _this = this;
                    $("#ajax-loading").show();
                    this.totalPages = 1;
                    var paginationRequest = {
                        page: this.currentPage,
                        pageSize: this.pageSize,
                        filter: this.searchFilter,
                        order: {
                            orderByProperty: this.sortColumn,
                            sortOrder: this.sortOrder
                        }
                    };
                    this.designService.getDesigns(paginationRequest).subscribe(function (resp) {
                        _this.designs = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                            _this.helper.showAlertMessage(_this.statusMessage, "error");
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.designs = resp.data;
                                _this.totalPages = Math.ceil(resp.recordCount / _this.pageSize);
                            }
                            else {
                                _this.statusMessage = "There are no registered designs.";
                            }
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        _this.designs = null;
                        var msg = "Unable to fetch designs : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                        _this.statusMessage = "Error fetching designs.";
                    });
                };
                DesignList.prototype.search = function (searchFilter) {
                    this.searchFilter = searchFilter;
                    this.getFormData();
                };
                DesignList.prototype.onPageSizeChange = function (pageSize) {
                    this.pageSize = pageSize;
                    this.getFormData();
                };
                DesignList.prototype.onPageChange = function (currentPage) {
                    this.currentPage = currentPage;
                    this.getFormData();
                };
                DesignList.prototype.onColumnClick = function (e) {
                    if (this.previousElement && e.getAttribute('data-column') != this.previousElement.getAttribute('data-column')) {
                        this.previousElement.classList.remove('table-sorter-desc');
                        this.previousElement.classList.remove('table-sorter-asc');
                    }
                    this.previousElement = e;
                    this.sortColumn = e.getAttribute('data-column');
                    if (e.classList.contains("table-sorter-asc")) {
                        e.classList.remove('table-sorter-asc');
                        e.classList.add('table-sorter-desc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SortOrder"].descending;
                    }
                    else if (e.classList.contains("table-sorter-desc")) {
                        e.classList.remove('table-sorter-desc');
                        this.sortColumn = null;
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SortOrder"].noSort;
                    }
                    else {
                        e.classList.add('table-sorter-asc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_2__["SortOrder"].ascending;
                    }
                    this.getFormData();
                };
                DesignList.prototype.delete = function (design) {
                    var _this = this;
                    new jBox("Confirm", {
                        minWidth: 500,
                        minHeight: 70,
                        title: "<b>Delete Design</b>",
                        overlay: false,
                        content: "Do you want to delete design - " + design.name,
                        draggable: "title",
                        confirmButton: "Yes",
                        cancelButton: "No",
                        confirm: function () {
                            _this.designService.deleteDesign(design.id).subscribe(function (resp) {
                                if (resp.status.toLowerCase() == "error") {
                                    _this.helper.showAlertMessage(resp.message, "error");
                                }
                                else {
                                    if (resp.data != null) {
                                        _this.helper.showAlertMessage("Design deleted.", "success");
                                        _this.getFormData();
                                    }
                                    else {
                                        _this.helper.showAlertMessage("Error deleting design", "error");
                                    }
                                }
                            }, function (err) {
                                _this.helper.showAlertMessage("Error deleting design", "error");
                            });
                        }
                    }).open();
                };
                DesignList.prototype.exportKML = function (design) {
                    var _this = this;
                    this.designService.exportDesign(design.id).subscribe(function (resp) {
                        _this.designs = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                            _this.helper.showAlertMessage(_this.statusMessage, "error");
                        }
                        else {
                            if (resp.data != null) {
                                if (resp.data != "") {
                                    window.location.href = "/Designs/Download?fileName=" + resp.data;
                                }
                            }
                            else {
                                _this.statusMessage = "There are no registered designs.";
                            }
                            _this.getFormData();
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        _this.designs = null;
                        var msg = "Unable to export designs : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                        _this.statusMessage = "Error export designs.";
                    });
                };
                return DesignList;
            }());
            DesignList.ctorParameters = function () { return [
                { type: _services_design_service__WEBPACK_IMPORTED_MODULE_3__["DesignService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_4__["Helper"] }
            ]; };
            DesignList = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./design-list.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/designs/views/design-list.html")).default
                })
            ], DesignList);
            /***/ 
        }),
        /***/ "./src/app/entities/models/MicroDuct.ts": 
        /*!**********************************************!*\
          !*** ./src/app/entities/models/MicroDuct.ts ***!
          \**********************************************/
        /*! exports provided: MicroDuct */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MicroDuct", function () { return MicroDuct; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            var MicroDuct = /** @class */ (function (_super) {
                __extends(MicroDuct, _super);
                function MicroDuct() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "Duct";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_2__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_1__["Owner"]();
                    return _this;
                }
                return MicroDuct;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_3__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/Solution2.zip.ts": 
        /*!**************************************************!*\
          !*** ./src/app/entities/models/Solution2.zip.ts ***!
          \**************************************************/
        /*! exports provided: FDT */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FDT", function () { return FDT; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            /* harmony import */ var _optics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optics */ "./src/app/entities/models/optics.ts");
            var FDT = /** @class */ (function (_super) {
                __extends(FDT, _super);
                function FDT() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "FDT";
                    _this.optics = new _optics__WEBPACK_IMPORTED_MODULE_4__["Optics"]();
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return FDT;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/baseNetworkEntity.ts": 
        /*!******************************************************!*\
          !*** ./src/app/entities/models/baseNetworkEntity.ts ***!
          \******************************************************/
        /*! exports provided: BaseNetworkEntity */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseNetworkEntity", function () { return BaseNetworkEntity; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _common_models_dbBaseEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/models/dbBaseEntity */ "./src/app/common/models/dbBaseEntity.ts");
            var BaseNetworkEntity = /** @class */ (function (_super) {
                __extends(BaseNetworkEntity, _super);
                function BaseNetworkEntity(id, code) {
                    var _this = _super.call(this) || this;
                    _this.customFields = new Array();
                    _this.photos = new Array();
                    _this.attachments = new Array();
                    _this.suppliers = new Array();
                    _this.id = id;
                    _this.code = code;
                    return _this;
                }
                return BaseNetworkEntity;
            }(_common_models_dbBaseEntity__WEBPACK_IMPORTED_MODULE_1__["DbBaseEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/cable.ts": 
        /*!******************************************!*\
          !*** ./src/app/entities/models/cable.ts ***!
          \******************************************/
        /*! exports provided: Cable */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cable", function () { return Cable; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            /* harmony import */ var _optics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optics */ "./src/app/entities/models/optics.ts");
            var Cable = /** @class */ (function (_super) {
                __extends(Cable, _super);
                function Cable(id, code, isUnderground, noOfTubes, corePerTube, optics) {
                    var _this = _super.call(this, id, code) || this;
                    _this.entityType = "Cable";
                    _this.optics = new _optics__WEBPACK_IMPORTED_MODULE_4__["Optics"]();
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    _this.isUnderground = isUnderground;
                    _this.noOfTubes = noOfTubes;
                    _this.corePerTube = corePerTube;
                    _this.optics = optics;
                    return _this;
                }
                return Cable;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/chamber.ts": 
        /*!********************************************!*\
          !*** ./src/app/entities/models/chamber.ts ***!
          \********************************************/
        /*! exports provided: Chamber */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chamber", function () { return Chamber; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            var Chamber = /** @class */ (function (_super) {
                __extends(Chamber, _super);
                function Chamber() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "Chamber";
                    _this.loopLength = "";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return Chamber;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/duct.ts": 
        /*!*****************************************!*\
          !*** ./src/app/entities/models/duct.ts ***!
          \*****************************************/
        /*! exports provided: Duct */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Duct", function () { return Duct; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            var Duct = /** @class */ (function (_super) {
                __extends(Duct, _super);
                function Duct() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "Duct";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_2__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_1__["Owner"]();
                    return _this;
                }
                return Duct;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_3__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/fat.ts": 
        /*!****************************************!*\
          !*** ./src/app/entities/models/fat.ts ***!
          \****************************************/
        /*! exports provided: FAT */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FAT", function () { return FAT; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            /* harmony import */ var _optics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optics */ "./src/app/entities/models/optics.ts");
            var FAT = /** @class */ (function (_super) {
                __extends(FAT, _super);
                function FAT() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "FAT";
                    _this.optics = new _optics__WEBPACK_IMPORTED_MODULE_4__["Optics"]();
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return FAT;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/installation.ts": 
        /*!*************************************************!*\
          !*** ./src/app/entities/models/installation.ts ***!
          \*************************************************/
        /*! exports provided: Installation */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Installation", function () { return Installation; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var Installation = /** @class */ (function () {
                function Installation() {
                }
                return Installation;
            }());
            /***/ 
        }),
        /***/ "./src/app/entities/models/odf.ts": 
        /*!****************************************!*\
          !*** ./src/app/entities/models/odf.ts ***!
          \****************************************/
        /*! exports provided: ODF */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ODF", function () { return ODF; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            var ODF = /** @class */ (function (_super) {
                __extends(ODF, _super);
                function ODF() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "ODF";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return ODF;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/optics.ts": 
        /*!*******************************************!*\
          !*** ./src/app/entities/models/optics.ts ***!
          \*******************************************/
        /*! exports provided: Optics */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Optics", function () { return Optics; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var Optics = /** @class */ (function () {
                function Optics() {
                }
                return Optics;
            }());
            /***/ 
        }),
        /***/ "./src/app/entities/models/owner.ts": 
        /*!******************************************!*\
          !*** ./src/app/entities/models/owner.ts ***!
          \******************************************/
        /*! exports provided: Owner */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Owner", function () { return Owner; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            var Owner = /** @class */ (function () {
                function Owner() {
                }
                return Owner;
            }());
            /***/ 
        }),
        /***/ "./src/app/entities/models/pole.ts": 
        /*!*****************************************!*\
          !*** ./src/app/entities/models/pole.ts ***!
          \*****************************************/
        /*! exports provided: Pole */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pole", function () { return Pole; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            var Pole = /** @class */ (function (_super) {
                __extends(Pole, _super);
                function Pole() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "Pole";
                    _this.loopLength = "";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return Pole;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/pop.ts": 
        /*!****************************************!*\
          !*** ./src/app/entities/models/pop.ts ***!
          \****************************************/
        /*! exports provided: PoP */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PoP", function () { return PoP; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            var PoP = /** @class */ (function (_super) {
                __extends(PoP, _super);
                function PoP() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "PoP";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return PoP;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/spliceClosure.ts": 
        /*!**************************************************!*\
          !*** ./src/app/entities/models/spliceClosure.ts ***!
          \**************************************************/
        /*! exports provided: SpliceClosure */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpliceClosure", function () { return SpliceClosure; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            var SpliceClosure = /** @class */ (function (_super) {
                __extends(SpliceClosure, _super);
                function SpliceClosure() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "SpliceClosure";
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return SpliceClosure;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/models/splitter.ts": 
        /*!*********************************************!*\
          !*** ./src/app/entities/models/splitter.ts ***!
          \*********************************************/
        /*! exports provided: Splitter */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Splitter", function () { return Splitter; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseNetworkEntity */ "./src/app/entities/models/baseNetworkEntity.ts");
            /* harmony import */ var _owner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./owner */ "./src/app/entities/models/owner.ts");
            /* harmony import */ var _installation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./installation */ "./src/app/entities/models/installation.ts");
            /* harmony import */ var _optics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./optics */ "./src/app/entities/models/optics.ts");
            var Splitter = /** @class */ (function (_super) {
                __extends(Splitter, _super);
                function Splitter() {
                    var _this = _super.apply(this, __spread(arguments)) || this;
                    _this.entityType = "Splitter";
                    _this.optics = new _optics__WEBPACK_IMPORTED_MODULE_4__["Optics"]();
                    _this.installation = new _installation__WEBPACK_IMPORTED_MODULE_3__["Installation"]();
                    _this.owner = new _owner__WEBPACK_IMPORTED_MODULE_2__["Owner"]();
                    return _this;
                }
                return Splitter;
            }(_baseNetworkEntity__WEBPACK_IMPORTED_MODULE_1__["BaseNetworkEntity"]));
            /***/ 
        }),
        /***/ "./src/app/entities/services/cable.service.ts": 
        /*!****************************************************!*\
          !*** ./src/app/entities/services/cable.service.ts ***!
          \****************************************************/
        /*! exports provided: CableService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CableService", function () { return CableService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var CableService = /** @class */ (function () {
                function CableService(http) {
                    this.http = http;
                    this.getCablesApi = 'Cables/GetCables/';
                    this.getCableApi = 'Cables/GetCable/';
                    this.saveCableApi = 'Cables/SaveCable/';
                    this.deleteCableApi = 'Cables/DeleteCable/';
                }
                CableService.prototype.getCables = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getCablesApi, paginationRequest);
                };
                CableService.prototype.getCable = function (cableId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('cableId', cableId);
                    return this.http.get(this.getCableApi, { params: params });
                };
                CableService.prototype.saveCable = function (cable) {
                    return this.http.post(this.saveCableApi, cable);
                };
                CableService.prototype.deleteCable = function (cableId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('cableId', cableId);
                    return this.http.delete(this.deleteCableApi, { params: params });
                };
                return CableService;
            }());
            CableService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            CableService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], CableService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/chamber.service.ts": 
        /*!******************************************************!*\
          !*** ./src/app/entities/services/chamber.service.ts ***!
          \******************************************************/
        /*! exports provided: ChamberService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChamberService", function () { return ChamberService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var ChamberService = /** @class */ (function () {
                function ChamberService(http) {
                    this.http = http;
                    this.getChambersApi = 'Chambers/GetChambers/';
                    this.getChamberApi = 'Chambers/GetChamber/';
                    this.saveChamberApi = 'Chambers/SaveChamber/';
                    this.deleteChamberApi = 'Chambers/DeleteChamber/';
                }
                ChamberService.prototype.getChambers = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getChambersApi, paginationRequest);
                };
                ChamberService.prototype.getChamber = function (chamberId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('chamberId', chamberId);
                    return this.http.get(this.getChamberApi, { params: params });
                };
                ChamberService.prototype.saveChamber = function (chamber) {
                    return this.http.post(this.saveChamberApi, chamber);
                };
                ChamberService.prototype.deleteChamber = function (chamberId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('chamberId', chamberId);
                    return this.http.delete(this.deleteChamberApi, { params: params });
                };
                return ChamberService;
            }());
            ChamberService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            ChamberService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], ChamberService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/duct.service.ts": 
        /*!***************************************************!*\
          !*** ./src/app/entities/services/duct.service.ts ***!
          \***************************************************/
        /*! exports provided: DuctService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DuctService", function () { return DuctService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var DuctService = /** @class */ (function () {
                function DuctService(http) {
                    this.http = http;
                    this.getDuctsApi = 'Ducts/GetDucts/';
                    this.getDuctApi = 'Ducts/GetDuct/';
                    this.saveDuctApi = 'Ducts/SaveDuct/';
                    this.deleteDuctApi = 'Ducts/DeleteDuct/';
                }
                DuctService.prototype.getDucts = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getDuctsApi, paginationRequest);
                };
                DuctService.prototype.getDuct = function (ductId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('ductId', ductId);
                    return this.http.get(this.getDuctApi, { params: params });
                };
                DuctService.prototype.saveDuct = function (duct) {
                    return this.http.post(this.saveDuctApi, duct);
                };
                DuctService.prototype.deleteDuct = function (ductId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('ductId', ductId);
                    return this.http.delete(this.deleteDuctApi, { params: params });
                };
                return DuctService;
            }());
            DuctService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            DuctService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], DuctService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/fat.service.ts": 
        /*!**************************************************!*\
          !*** ./src/app/entities/services/fat.service.ts ***!
          \**************************************************/
        /*! exports provided: fatService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fatService", function () { return fatService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var fatService = /** @class */ (function () {
                function fatService(http) {
                    this.http = http;
                    this.getfatsApi = 'fat/Getfats/';
                    this.getfatApi = 'fat/Getfat/';
                    this.savefatApi = 'fat/Savefat/';
                    this.deletefatApi = 'fat/Deletefat/';
                }
                fatService.prototype.getfats = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getfatsApi, paginationRequest);
                };
                fatService.prototype.getfat = function (fatId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('fatId', fatId);
                    return this.http.get(this.getfatApi, { params: params });
                };
                fatService.prototype.savefat = function (fat) {
                    return this.http.post(this.savefatApi, fat);
                };
                fatService.prototype.deletefat = function (fatId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('fatId', fatId);
                    return this.http.delete(this.deletefatApi, { params: params });
                };
                return fatService;
            }());
            fatService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            fatService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], fatService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/fdt.service.ts": 
        /*!**************************************************!*\
          !*** ./src/app/entities/services/fdt.service.ts ***!
          \**************************************************/
        /*! exports provided: fdtService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fdtService", function () { return fdtService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var fdtService = /** @class */ (function () {
                function fdtService(http) {
                    this.http = http;
                    this.getfdtsApi = 'Fdt/GetFdts/';
                    this.getfdtApi = 'Fdt/Getfdt/';
                    this.savefdtApi = 'fdt/Savefdt/';
                    this.deletefdtApi = 'fdt/Deletefdt/';
                }
                fdtService.prototype.getfdts = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getfdtsApi, paginationRequest);
                };
                fdtService.prototype.getfdt = function (fdtId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('fdtId', fdtId);
                    return this.http.get(this.getfdtApi, { params: params });
                };
                fdtService.prototype.savefdt = function (fdt) {
                    return this.http.post(this.savefdtApi, fdt);
                };
                fdtService.prototype.deletefdt = function (fdtId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('fdtId', fdtId);
                    return this.http.delete(this.deletefdtApi, { params: params });
                };
                return fdtService;
            }());
            fdtService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            fdtService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], fdtService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/odf.service.ts": 
        /*!**************************************************!*\
          !*** ./src/app/entities/services/odf.service.ts ***!
          \**************************************************/
        /*! exports provided: ODFService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ODFService", function () { return ODFService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var ODFService = /** @class */ (function () {
                function ODFService(http) {
                    this.http = http;
                    this.getODFsApi = 'ODFs/GetODFs/';
                    this.getODFApi = 'ODFs/GetODF/';
                    this.saveODFApi = 'ODFs/SaveODF/';
                    this.deleteODFApi = 'ODFs/DeleteODF/';
                }
                ODFService.prototype.getODFs = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getODFsApi, paginationRequest);
                };
                ODFService.prototype.getODF = function (odfId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('odfId', odfId);
                    return this.http.get(this.getODFApi, { params: params });
                };
                ODFService.prototype.saveODF = function (odf) {
                    return this.http.post(this.saveODFApi, odf);
                };
                ODFService.prototype.deleteODF = function (odfId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('odfId', odfId);
                    return this.http.delete(this.deleteODFApi, { params: params });
                };
                return ODFService;
            }());
            ODFService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            ODFService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], ODFService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/pole.service.ts": 
        /*!***************************************************!*\
          !*** ./src/app/entities/services/pole.service.ts ***!
          \***************************************************/
        /*! exports provided: PoleService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PoleService", function () { return PoleService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var PoleService = /** @class */ (function () {
                function PoleService(http) {
                    this.http = http;
                    this.getPolesApi = 'Poles/GetPoles/';
                    this.getPoleApi = 'Poles/GetPole/';
                    this.savePoleApi = 'Poles/SavePole/';
                    this.deletePoleApi = 'Poles/DeletePole/';
                }
                PoleService.prototype.getPoles = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getPolesApi, paginationRequest);
                };
                PoleService.prototype.getPole = function (poleId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('poleId', poleId);
                    return this.http.get(this.getPoleApi, { params: params });
                };
                PoleService.prototype.savePole = function (pole) {
                    return this.http.post(this.savePoleApi, pole);
                };
                PoleService.prototype.deletePole = function (poleId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('poleId', poleId);
                    return this.http.delete(this.deletePoleApi, { params: params });
                };
                return PoleService;
            }());
            PoleService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            PoleService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], PoleService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/pop.service.ts": 
        /*!**************************************************!*\
          !*** ./src/app/entities/services/pop.service.ts ***!
          \**************************************************/
        /*! exports provided: PopService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopService", function () { return PopService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var PopService = /** @class */ (function () {
                function PopService(http) {
                    this.http = http;
                    this.getPopsApi = 'Pop/GetPops/';
                    this.getPopApi = 'Pop/GetPop/';
                    this.savePopApi = 'Pop/SavePop/';
                    this.deletePopApi = 'Pop/DeletePop/';
                }
                PopService.prototype.getChambers = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getPopsApi, paginationRequest);
                };
                PopService.prototype.getChamber = function (popId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('popId', popId);
                    return this.http.get(this.getPopApi, { params: params });
                };
                PopService.prototype.saveChamber = function (pop) {
                    return this.http.post(this.savePopApi, pop);
                };
                PopService.prototype.deleteChamber = function (popId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('popId', popId);
                    return this.http.delete(this.deletePopApi, { params: params });
                };
                return PopService;
            }());
            PopService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            PopService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], PopService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/spliceClosure.service.ts": 
        /*!************************************************************!*\
          !*** ./src/app/entities/services/spliceClosure.service.ts ***!
          \************************************************************/
        /*! exports provided: SpliceClosureService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpliceClosureService", function () { return SpliceClosureService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var SpliceClosureService = /** @class */ (function () {
                function SpliceClosureService(http) {
                    this.http = http;
                    this.getSpliceClosuresApi = 'SpliceClosures/GetSpliceClosures/';
                    this.getSpliceClosureApi = 'SpliceClosures/GetSpliceClosure/';
                    this.saveSpliceClosureApi = 'SpliceClosures/SaveSpliceClosure/';
                    this.deleteSpliceClosureApi = 'SpliceClosures/DeleteSpliceClosure/';
                }
                SpliceClosureService.prototype.getSpliceClosures = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getSpliceClosuresApi, paginationRequest);
                };
                SpliceClosureService.prototype.getSpliceClosure = function (spliceClosureId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('spliceClosureId', spliceClosureId);
                    return this.http.get(this.getSpliceClosureApi, { params: params });
                };
                SpliceClosureService.prototype.saveSpliceClosure = function (spliceClosure) {
                    return this.http.post(this.saveSpliceClosureApi, spliceClosure);
                };
                SpliceClosureService.prototype.deleteSpliceClosure = function (spliceClosureId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('spliceClosureId', spliceClosureId);
                    return this.http.delete(this.deleteSpliceClosureApi, { params: params });
                };
                return SpliceClosureService;
            }());
            SpliceClosureService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            SpliceClosureService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], SpliceClosureService);
            /***/ 
        }),
        /***/ "./src/app/entities/services/splitter.service.ts": 
        /*!*******************************************************!*\
          !*** ./src/app/entities/services/splitter.service.ts ***!
          \*******************************************************/
        /*! exports provided: SplitterService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SplitterService", function () { return SplitterService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var SplitterService = /** @class */ (function () {
                function SplitterService(http) {
                    this.http = http;
                    this.getSplittersApi = 'Splitters/GetSplitters/';
                    this.getSplitterApi = 'Splitters/GetSplitter/';
                    this.saveSplitterApi = 'Splitters/SaveSplitter/';
                    this.deleteSplitterApi = 'Splitters/DeleteSplitter/';
                }
                SplitterService.prototype.getSplitters = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "updatedDate",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getSplittersApi, paginationRequest);
                };
                SplitterService.prototype.getSplitter = function (splitterId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('splitterId', splitterId);
                    return this.http.get(this.getSplitterApi, { params: params });
                };
                SplitterService.prototype.saveSplitter = function (splitter) {
                    return this.http.post(this.saveSplitterApi, splitter);
                };
                SplitterService.prototype.deleteSplitter = function (splitterId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('splitterId', splitterId);
                    return this.http.delete(this.deleteSplitterApi, { params: params });
                };
                return SplitterService;
            }());
            SplitterService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            SplitterService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], SplitterService);
            /***/ 
        }),
        /***/ "./src/app/homepasses/homepass.module.ts": 
        /*!***********************************************!*\
          !*** ./src/app/homepasses/homepass.module.ts ***!
          \***********************************************/
        /*! exports provided: HomepassModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepassModule", function () { return HomepassModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! primeng/checkbox */ "./node_modules/primeng/checkbox.js");
            /* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(primeng_checkbox__WEBPACK_IMPORTED_MODULE_4__);
            /* harmony import */ var primeng_treetable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! primeng/treetable */ "./node_modules/primeng/treetable.js");
            /* harmony import */ var primeng_treetable__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(primeng_treetable__WEBPACK_IMPORTED_MODULE_5__);
            /* harmony import */ var _views_homepass_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/homepass-list */ "./src/app/homepasses/views/homepass-list.ts");
            /* harmony import */ var _views_homepass_details__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/homepass-details */ "./src/app/homepasses/views/homepass-details.ts");
            /* harmony import */ var _services_homepass_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/homepass.service */ "./src/app/homepasses/services/homepass.service.ts");
            /* harmony import */ var _homepass_routes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./homepass.routes */ "./src/app/homepasses/homepass.routes.ts");
            /* harmony import */ var _shared_module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared.module */ "./src/app/shared.module.ts");
            //import { TreeModule } from 'primeng/tree';
            var HomepassModule = /** @class */ (function () {
                function HomepassModule() {
                }
                return HomepassModule;
            }());
            HomepassModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        primeng_checkbox__WEBPACK_IMPORTED_MODULE_4__["CheckboxModule"],
                        primeng_treetable__WEBPACK_IMPORTED_MODULE_5__["TreeTableModule"],
                        _homepass_routes__WEBPACK_IMPORTED_MODULE_9__["HomepassRouting"],
                        _shared_module__WEBPACK_IMPORTED_MODULE_10__["SharedModule"]
                    ],
                    declarations: [
                        _views_homepass_list__WEBPACK_IMPORTED_MODULE_6__["HomepassList"],
                        _views_homepass_details__WEBPACK_IMPORTED_MODULE_7__["HomepassDetails"]
                    ],
                    providers: [
                        _services_homepass_service__WEBPACK_IMPORTED_MODULE_8__["HomepassService"]
                    ]
                })
            ], HomepassModule);
            /***/ 
        }),
        /***/ "./src/app/homepasses/homepass.routes.ts": 
        /*!***********************************************!*\
          !*** ./src/app/homepasses/homepass.routes.ts ***!
          \***********************************************/
        /*! exports provided: homepassRoutes, HomepassRouting */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "homepassRoutes", function () { return homepassRoutes; });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepassRouting", function () { return HomepassRouting; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _views_homepass_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/homepass-list */ "./src/app/homepasses/views/homepass-list.ts");
            /* harmony import */ var _views_homepass_details__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/homepass-details */ "./src/app/homepasses/views/homepass-details.ts");
            var homepassRoutes = [
                {
                    path: 'homepasses',
                    children: [
                        { path: '', component: _views_homepass_list__WEBPACK_IMPORTED_MODULE_2__["HomepassList"] },
                        { path: 'details', component: _views_homepass_details__WEBPACK_IMPORTED_MODULE_3__["HomepassDetails"] },
                        { path: 'details/:id', component: _views_homepass_details__WEBPACK_IMPORTED_MODULE_3__["HomepassDetails"] },
                    ]
                },
            ];
            var HomepassRouting = _angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(homepassRoutes);
            /***/ 
        }),
        /***/ "./src/app/homepasses/services/homepass.service.ts": 
        /*!*********************************************************!*\
          !*** ./src/app/homepasses/services/homepass.service.ts ***!
          \*********************************************************/
        /*! exports provided: HomepassService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepassService", function () { return HomepassService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var HomepassService = /** @class */ (function () {
                function HomepassService(http) {
                    this.http = http;
                    this.getHomepassesApi = 'Homepasses/GetHomepasses/';
                    this.getHomepassApi = 'Homepasses/GetHomepass/';
                    this.getHomepassesInClusterApi = 'Homepasses/GetHomepassesInCluster/';
                    this.getHomepassesInPolygonApi = 'Homepasses/GetHomepassesInPolygon/';
                    this.getHomepassesWithinRadiusApi = 'Homepasses/GetHomepassesWithinRadius/';
                    this.saveHomepassApi = 'Homepasses/SaveHomepass/';
                    this.saveHomepassesApi = 'Homepasses/SaveHomepasses/';
                    this.deleteHomepassApi = 'Homepasses/DeleteHomepass/';
                }
                HomepassService.prototype.getHomepasses = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "name",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getHomepassesApi, paginationRequest);
                };
                HomepassService.prototype.getHomepass = function (homepassId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('homepassId', homepassId);
                    return this.http.get(this.getHomepassApi, { params: params });
                };
                //getHomepassesInCluster(clusterId): Observable<ServiceResponse> {
                //    const params = new HttpParams()
                //        .set('clusterId', clusterId);
                //    return this.http.get<ServiceResponse>(this.getHomepassesInClusterApi, { params });
                //}
                //async getHomepassesInCluster(clusterId) {
                //    const params = new HttpParams()
                //        .set('clusterId', clusterId);
                //    return await this.http.get<ServiceResponse>(this.getHomepassesInClusterApi, { params }).toPromise();
                //}
                HomepassService.prototype.saveHomepass = function (homepass) {
                    return this.http.post(this.saveHomepassApi, homepass);
                };
                HomepassService.prototype.saveHomepasses = function (homepasses) {
                    return this.http.post(this.saveHomepassesApi, homepasses);
                };
                HomepassService.prototype.deleteHomepass = function (homepassId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('homepassId', homepassId);
                    return this.http.delete(this.deleteHomepassApi, { params: params });
                };
                return HomepassService;
            }());
            HomepassService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            HomepassService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], HomepassService);
            /***/ 
        }),
        /***/ "./src/app/homepasses/views/homepass-details.ts": 
        /*!******************************************************!*\
          !*** ./src/app/homepasses/views/homepass-details.ts ***!
          \******************************************************/
        /*! exports provided: HomepassDetails */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepassDetails", function () { return HomepassDetails; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _services_homepass_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/homepass.service */ "./src/app/homepasses/services/homepass.service.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/geo/geoHelper */ "./src/app/common/geo/geoHelper.ts");
            /* harmony import */ var _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/geo/googleMapsHelper */ "./src/app/common/geo/googleMapsHelper.ts");
            /* harmony import */ var _common_geo_geometry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/geo/geometry */ "./src/app/common/geo/geometry.ts");
            /* harmony import */ var _app_config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../app.config */ "./src/app/app.config.ts");
            var HomepassDetails = /** @class */ (function () {
                function HomepassDetails(location, route, appConfig, homepassService, helper) {
                    this.location = location;
                    this.route = route;
                    this.appConfig = appConfig;
                    this.homepassService = homepassService;
                    this.helper = helper;
                    this.homepasses = new Array();
                    this.tabTitle = "Add New";
                    this.title = "New Homepass";
                    this.isNew = true;
                    this.polyOptions = {
                        strokeWeight: 0,
                        fillOpacity: 0.45,
                        editable: false,
                        draggable: false
                    };
                }
                HomepassDetails.prototype.ngOnInit = function () {
                    var _this = this;
                    var location = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].getLatLng(this.appConfig.settings.MapCenter);
                    this.map = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].initializeMap('homepassMap', location, 18, 21);
                    this.route.params.subscribe(function (params) {
                        _this.homepassId = params['id'];
                        if (_this.homepassId == null) {
                            _this.title = "New Homepass";
                            _this.isNew = true;
                        }
                        else {
                            _this.title = "Edit Homepass";
                            _this.tabTitle = "Edit Homepass";
                            _this.isNew = false;
                        }
                        _this.getFormData(_this.homepassId);
                    });
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].addListener(this.map, 'dblclick', function (event) {
                        _this.homepass = {
                            name: "",
                            code: "",
                            description: "",
                            type: "",
                            geometry: new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_8__["Point"]([event.latLng.lng(), event.latLng.lat()]),
                            area: null,
                            connections: 1,
                        };
                        _this.homepasses.push(_this.homepass);
                        _this.addHomepassMarker(_this.homepass);
                    });
                };
                HomepassDetails.prototype.getFormData = function (homepassId) {
                    var _this = this;
                    this.homepassService.getHomepass(homepassId).subscribe(function (resp) {
                        _this.homepass = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.helper.showAlertMessage(resp.message, "error");
                        }
                        else {
                            if (resp.data != null) {
                                _this.homepass = resp.data;
                                _this.homepasses.push(_this.homepass);
                                _this.map.setCenter({ lat: _this.homepass.geometry.coordinates[1], lng: _this.homepass.geometry.coordinates[0] });
                                if (_this.homepass.area)
                                    _this.addHomepassPolygon(_this.homepass);
                                else
                                    _this.addHomepassMarker(_this.homepass);
                            }
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        _this.homepass = null;
                        var msg = "Unable to fetch homepass : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                    });
                };
                HomepassDetails.prototype.addHomepassMarker = function (homepass) {
                    var _this = this;
                    var location = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].convertToPosition(homepass.geometry.coordinates);
                    var icon = {
                        url: "images/map-entities/homepass.png",
                    };
                    var marker = new google.maps.Marker({
                        position: location,
                        icon: icon,
                        draggable: false,
                        cursor: 'pointer',
                        id: homepass.id,
                        code: homepass.code,
                        data: homepass,
                        map: this.map
                    });
                    marker.setTitle(homepass.name);
                    homepass.marker = marker;
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].addListener(marker, "rightclick", function (event) {
                        if (marker.draggable == true) {
                            marker.setOptions({ draggable: false });
                            marker.data.geometry.coordinates[0] = event.latLng.lng();
                            marker.data.geometry.coordinates[1] = event.latLng.lat();
                            _this.homepass = marker.data;
                        }
                        else
                            marker.setOptions({ draggable: true });
                    });
                    //GMapsHelper.addListener(marker, 'dragend', (event) => {
                    //});
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].addListener(marker, 'click', function (event) {
                        _this.homepass = marker.data;
                    });
                };
                HomepassDetails.prototype.addHomepassPolygon = function (homepass) {
                    var _this = this;
                    var polygon = _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].createPolygon(homepass.area.coordinates, this.polyOptions);
                    polygon.setMap(this.map);
                    polygon.data = homepass;
                    //polygon.setTitle(homepass.name);
                    homepass.marker = polygon;
                    this.addCentroidMarker(polygon.data);
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].addListener(polygon, "rightclick", function (event) {
                        if (polygon.draggable == true) {
                            polygon.setOptions({ draggable: false, editable: false });
                            if (homepass["centroidMarker"])
                                homepass["centroidMarker"].setMap(null);
                            var coords = polygon.getPath().getArray();
                            var newCoords_1 = new Array();
                            coords.forEach(function (x) {
                                newCoords_1.push([x.lng(), x.lat()]);
                            });
                            newCoords_1.push(newCoords_1[0]);
                            var centroid = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_8__["Point"](_common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].polygonCenter(new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_8__["Polygon"]([newCoords_1])));
                            polygon.data.area.coordinates = [newCoords_1];
                            polygon.data.geometry = centroid;
                            _this.addCentroidMarker(polygon.data);
                            _this.homepass = polygon.data;
                        }
                        else
                            polygon.setOptions({ draggable: true, editable: true });
                    });
                    _common_geo_googleMapsHelper__WEBPACK_IMPORTED_MODULE_7__["GMapsHelper"].addListener(polygon, 'click', function (event) {
                        _this.homepass = polygon.data;
                    });
                };
                HomepassDetails.prototype.addCentroidMarker = function (homepass) {
                    var location = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].convertToPosition(homepass.geometry.coordinates);
                    var icon = {
                        url: "images/map-entities/homepass.png",
                    };
                    var marker = new google.maps.Marker({
                        position: location,
                        icon: icon,
                        draggable: false,
                        cursor: 'pointer',
                        map: this.map
                    });
                    marker.setTitle(homepass.name);
                    homepass["centroidMarker"] = marker;
                };
                HomepassDetails.prototype.fileChangeEvent = function (event) {
                    var _this = this;
                    var file = event.target.files[0];
                    var reader = new FileReader();
                    var fileExt = file.name.split('.').pop().toLowerCase();
                    reader.onload = function (e) {
                        try {
                            if (fileExt == "kml") {
                                var kml = reader.result;
                                var geojson = toGeoJSON.kml((new DOMParser()).parseFromString(kml, 'text/xml'));
                                _this.populateHomepasses(geojson.features);
                            }
                            else if (fileExt == "zip") {
                                shp(reader.result).then(function (geojson) {
                                    _this.populateHomepasses(geojson.features);
                                });
                            }
                            else if (fileExt == "csv") {
                                var csv = reader.result;
                                _this.populateHomepassesCsv(csv);
                            }
                        }
                        catch (e) {
                            _this.helper.showAlertMessage("Could not parse the file.", "error");
                        }
                    };
                    if (fileExt == "csv" || fileExt == "kml")
                        reader.readAsText(file);
                    else if (fileExt == "zip")
                        reader.readAsArrayBuffer(file);
                    else
                        this.helper.showAlertMessage("Invalid file format", "error");
                };
                HomepassDetails.prototype.populateHomepasses = function (features) {
                    this.homepasses.length = 0;
                    var homepasses = new Array();
                    for (var i = 0; i < features.length; i++) {
                        var properties = features[i].properties;
                        //let latLng = GeoHelper.convertToPosition([properties.Longitude, properties.Latitude]);
                        //const isValid: Error = GeoHelper.validateCoordinates(latLng);
                        //if ((isValid instanceof Error) == false) {
                        var centroid = null;
                        var polygon = null;
                        if (features[i].geometry.type.toLowerCase() == 'polygon') {
                            polygon = features[i].geometry;
                            centroid = new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_8__["Point"](_common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].polygonCenter(features[i].geometry));
                        }
                        else {
                            centroid = features[i].geometry;
                        }
                        var homepass = {
                            name: properties.Building_T,
                            code: properties.Id ? properties.Id : properties.Building_T,
                            description: "",
                            type: "",
                            geometry: centroid,
                            area: polygon,
                            connections: 1,
                        };
                        homepasses.push(homepass);
                        if (homepass.area)
                            this.addHomepassPolygon(homepass);
                        else
                            this.addHomepassMarker(homepass);
                        //}
                    }
                    this.homepasses = homepasses;
                };
                HomepassDetails.prototype.populateHomepassesCsv = function (csvData) {
                    this.homepasses.length = 0;
                    var homepasses = new Array();
                    var allRows = csvData.split(/\r?\n|\r/);
                    for (var i = 1; i < allRows.length; i++) {
                        if (allRows[i].trim() == "")
                            continue;
                        var properties = allRows[i].split(',');
                        var lat = parseFloat(properties[3]);
                        var lng = parseFloat(properties[4]);
                        var latLng = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].convertToPosition([lng, lat]);
                        var isValid = _common_geo_geoHelper__WEBPACK_IMPORTED_MODULE_6__["GeoHelper"].validateCoordinates(latLng);
                        if ((isValid instanceof Error) == false) {
                            var homepass = {
                                name: properties[1],
                                code: properties[0],
                                description: "",
                                type: "",
                                geometry: new _common_geo_geometry__WEBPACK_IMPORTED_MODULE_8__["Point"]([lng, lat]),
                                area: null,
                                connections: properties[5],
                            };
                            homepasses.push(homepass);
                            this.addHomepassMarker(homepass);
                        }
                    }
                    this.homepasses = homepasses;
                };
                HomepassDetails.prototype.removeUploadedHomepass = function (index) {
                    var homepass = this.homepasses[index];
                    if (homepass.marker)
                        homepass.marker.setMap(null);
                    if (this.homepasses[index]["centroidMarker"])
                        this.homepasses[index]["centroidMarker"].setMap(null);
                    this.homepasses.splice(index, 1);
                };
                HomepassDetails.prototype.save = function () {
                    var _this = this;
                    var errorMessages = this.validateHomepass(this.homepasses);
                    if (errorMessages.length == 0) {
                        this.homepasses.forEach(function (x) { return x.marker = null; });
                        this.homepasses.forEach(function (x) {
                            if (x["centroidMarker"])
                                x["centroidMarker"] = null;
                        });
                        this.homepassService.saveHomepasses(this.homepasses).subscribe(function (resp) {
                            if (resp.status.toLowerCase() == "error") {
                                _this.helper.showAlertMessage(resp.message, "error");
                            }
                            else {
                                _this.helper.showAlertMessage("Homepass information saved", "success");
                                _this.goBack();
                            }
                        }, function (err) {
                            _this.helper.showAlertMessage("Unable to save homepass information.", "error");
                        });
                    }
                    else {
                        var errorMessage = this.helper.getErrorMessagesText(errorMessages);
                        this.helper.showAlertMessage(errorMessage, "error");
                    }
                };
                HomepassDetails.prototype.validateHomepass = function (homepasses) {
                    var errorMessages = [];
                    this.homepasses.forEach(function (homepass) {
                        if (homepass.name == null || homepass.name.trim() == '')
                            errorMessages.push("Homepass Name cannot be empty");
                        if (homepass.code == null || homepass.code.trim() == '')
                            errorMessages.push("Homepass Code cannot be empty");
                    });
                    return errorMessages;
                };
                HomepassDetails.prototype.deleteHomepass = function () {
                    var _this = this;
                    var index = this.homepasses.findIndex(function (x) { return x.geometry.coordinates[0] == _this.homepass.geometry.coordinates[0] && x.geometry.coordinates[1] == _this.homepass.geometry.coordinates[1]; });
                    if (this.homepasses[index].marker)
                        this.homepasses[index].marker.setMap(null);
                    if (this.homepasses[index]["centroidMarker"])
                        this.homepasses[index]["centroidMarker"].setMap(null);
                    this.homepasses.splice(index, 1);
                    if (this.isNew == false) {
                        this.homepassService.deleteHomepass(this.homepass.id).subscribe(function (resp) {
                            if (resp.status.toLowerCase() == "error") {
                                _this.helper.showAlertMessage(resp.message, "error");
                            }
                            else {
                                _this.helper.showAlertMessage("Homepass successfully deleted", "success");
                                _this.goBack();
                            }
                        }, function (err) {
                            _this.helper.showAlertMessage("Unable to delete homepass information.", "error");
                        });
                    }
                    else {
                        this.homepass = null;
                    }
                };
                HomepassDetails.prototype.stringify = function (obj) {
                    return JSON.stringify(obj);
                };
                HomepassDetails.prototype.goBack = function () {
                    this.location.back();
                };
                return HomepassDetails;
            }());
            HomepassDetails.ctorParameters = function () { return [
                { type: _angular_common__WEBPACK_IMPORTED_MODULE_2__["Location"] },
                { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"] },
                { type: _app_config__WEBPACK_IMPORTED_MODULE_9__["AppConfig"] },
                { type: _services_homepass_service__WEBPACK_IMPORTED_MODULE_4__["HomepassService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_5__["Helper"] }
            ]; };
            HomepassDetails = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./homepass-details.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/homepasses/views/homepass-details.html")).default,
                    providers: [_services_homepass_service__WEBPACK_IMPORTED_MODULE_4__["HomepassService"]],
                })
            ], HomepassDetails);
            /***/ 
        }),
        /***/ "./src/app/homepasses/views/homepass-list.ts": 
        /*!***************************************************!*\
          !*** ./src/app/homepasses/views/homepass-list.ts ***!
          \***************************************************/
        /*! exports provided: HomepassList */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomepassList", function () { return HomepassList; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _services_homepass_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/homepass.service */ "./src/app/homepasses/services/homepass.service.ts");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            /* harmony import */ var _common_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../common/helper */ "./src/app/common/helper.ts");
            /* harmony import */ var _common_auth_auth_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/auth/auth.service */ "./src/app/common/auth/auth.service.ts");
            var HomepassList = /** @class */ (function () {
                function HomepassList(homepassService, helper, authService) {
                    this.homepassService = homepassService;
                    this.helper = helper;
                    this.authService = authService;
                    this.homepasses = new Array();
                    this.statusMessage = "";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.totalPages = 1;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending;
                    this.permissions = { edit: false, delete: false, add: false };
                    this.searchFields = new Array();
                    this.searchFields.push({ field: 'Name', label: 'Name', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'Description', label: 'Description', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'Type', label: 'Type', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedBy', label: 'Updated By', dataType: "text", value: "" });
                    this.searchFields.push({ field: 'UpdatedDate', label: 'Updated On', dataType: "date", value: "" });
                }
                HomepassList.prototype.ngOnInit = function () {
                    this.statusMessage = "Loading Homepasses...";
                    this.pageSize = 10;
                    this.currentPage = 1;
                    this.sortColumn = null;
                    this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].noSort;
                    this.permissions.add = this.authService.getFunctionalityAccess("RND_ADD_HOMEPASS");
                    this.permissions.edit = this.authService.getFunctionalityAccess("RND_EDIT_HOMEPASS");
                    this.permissions.delete = this.authService.getFunctionalityAccess("RND_DELETE_HOMEPASS");
                    this.getFormData();
                };
                HomepassList.prototype.getFormData = function () {
                    var _this = this;
                    $("#ajax-loading").show();
                    this.totalPages = 1;
                    var paginationRequest = {
                        page: this.currentPage,
                        pageSize: this.pageSize,
                        filter: this.searchFilter,
                        order: {
                            orderByProperty: this.sortColumn,
                            sortOrder: this.sortOrder
                        }
                    };
                    this.homepassService.getHomepasses(paginationRequest).subscribe(function (resp) {
                        _this.homepasses = null;
                        if (resp.status.toLowerCase() == "error") {
                            _this.statusMessage = resp.message;
                            _this.helper.showAlertMessage(_this.statusMessage, "error");
                        }
                        else {
                            if (resp.data != null && resp.data.length > 0) {
                                _this.homepasses = resp.data;
                                _this.totalPages = Math.ceil(resp.recordCount / _this.pageSize);
                            }
                            else {
                                _this.statusMessage = "There are no registered homepasses.";
                            }
                        }
                        $("#ajax-loading").hide();
                    }, function (err) {
                        $("#ajax-loading").hide();
                        _this.homepasses = null;
                        var msg = "Unable to fetch homepasses : " + err.message;
                        _this.helper.showAlertMessage(msg, "error");
                        _this.statusMessage = "Error fetching homepasses.";
                    });
                };
                HomepassList.prototype.search = function (searchFilter) {
                    this.searchFilter = searchFilter;
                    this.getFormData();
                };
                HomepassList.prototype.onPageSizeChange = function (pageSize) {
                    this.pageSize = pageSize;
                    this.getFormData();
                };
                HomepassList.prototype.onPageChange = function (currentPage) {
                    this.currentPage = currentPage;
                    this.getFormData();
                };
                HomepassList.prototype.onColumnClick = function (e) {
                    if (this.previousElement && e.getAttribute('data-column') != this.previousElement.getAttribute('data-column')) {
                        this.previousElement.classList.remove('table-sorter-desc');
                        this.previousElement.classList.remove('table-sorter-asc');
                    }
                    this.previousElement = e;
                    this.sortColumn = e.getAttribute('data-column');
                    if (e.classList.contains("table-sorter-asc")) {
                        e.classList.remove('table-sorter-asc');
                        e.classList.add('table-sorter-desc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending;
                    }
                    else if (e.classList.contains("table-sorter-desc")) {
                        e.classList.remove('table-sorter-desc');
                        this.sortColumn = null;
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].noSort;
                    }
                    else {
                        e.classList.add('table-sorter-asc');
                        this.sortOrder = _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].ascending;
                    }
                    this.getFormData();
                };
                HomepassList.prototype.delete = function (homepass) {
                    var _this = this;
                    new jBox("Confirm", {
                        minWidth: 500,
                        minHeight: 70,
                        title: "<b>Delete Homepass</b>",
                        overlay: false,
                        content: "Do you want to delete homepass - " + homepass.name,
                        draggable: "title",
                        confirmButton: "Yes",
                        cancelButton: "No",
                        confirm: function () {
                            _this.homepassService.deleteHomepass(homepass.id).subscribe(function (resp) {
                                if (resp.status.toLowerCase() == "error") {
                                    _this.helper.showAlertMessage(resp.message, "error");
                                }
                                else {
                                    if (resp.data != null) {
                                        _this.helper.showAlertMessage("Homepass deleted.", "success");
                                        _this.getFormData();
                                    }
                                    else {
                                        _this.helper.showAlertMessage("Error deleting homepass", "error");
                                    }
                                }
                            }, function (err) {
                                _this.helper.showAlertMessage("Error deleting homepass", "error");
                            });
                        }
                    }).open();
                };
                return HomepassList;
            }());
            HomepassList.ctorParameters = function () { return [
                { type: _services_homepass_service__WEBPACK_IMPORTED_MODULE_2__["HomepassService"] },
                { type: _common_helper__WEBPACK_IMPORTED_MODULE_4__["Helper"] },
                { type: _common_auth_auth_service__WEBPACK_IMPORTED_MODULE_5__["AuthService"] }
            ]; };
            HomepassList = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
                    template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./homepass-list.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/homepasses/views/homepass-list.html")).default,
                    providers: [_services_homepass_service__WEBPACK_IMPORTED_MODULE_2__["HomepassService"]]
                })
            ], HomepassList);
            /***/ 
        }),
        /***/ "./src/app/shared.module.ts": 
        /*!**********************************!*\
          !*** ./src/app/shared.module.ts ***!
          \**********************************/
        /*! exports provided: SharedModule */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedModule", function () { return SharedModule; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
            /* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
            /* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
            /* harmony import */ var _components_data_table_dt_pagination__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/data-table/dt-pagination */ "./src/app/components/data-table/dt-pagination.ts");
            /* harmony import */ var _components_data_table_dt_search__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/data-table/dt-search */ "./src/app/components/data-table/dt-search.ts");
            /* harmony import */ var _components_cf_group_cf_group__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/cf-group/cf-group */ "./src/app/components/cf-group/cf-group.ts");
            var SharedModule = /** @class */ (function () {
                function SharedModule() {
                }
                return SharedModule;
            }());
            SharedModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
                    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"]],
                    declarations: [
                        _components_data_table_dt_search__WEBPACK_IMPORTED_MODULE_6__["DTSearch"],
                        _components_data_table_dt_pagination__WEBPACK_IMPORTED_MODULE_5__["DTPagination"],
                        _components_cf_group_cf_group__WEBPACK_IMPORTED_MODULE_7__["CustomFieldsGroup"]
                    ],
                    exports: [
                        _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"],
                        _angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"],
                        _components_data_table_dt_search__WEBPACK_IMPORTED_MODULE_6__["DTSearch"],
                        _components_data_table_dt_pagination__WEBPACK_IMPORTED_MODULE_5__["DTPagination"],
                        _components_cf_group_cf_group__WEBPACK_IMPORTED_MODULE_7__["CustomFieldsGroup"]
                    ]
                })
            ], SharedModule);
            /***/ 
        }),
        /***/ "./src/app/users/services/user.service.ts": 
        /*!************************************************!*\
          !*** ./src/app/users/services/user.service.ts ***!
          \************************************************/
        /*! exports provided: UserService */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserService", function () { return UserService; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm2015/http.js");
            /* harmony import */ var _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/models/paginationRequest */ "./src/app/common/models/paginationRequest.ts");
            var UserService = /** @class */ (function () {
                function UserService(http) {
                    this.http = http;
                    this.getUsersApi = "Users/GetUsers/";
                    this.getUserApi = 'Users/GetUser/';
                    this.checkLoginIdExistsApi = 'Users/CheckLoginIdExists/';
                    this.saveUserApi = 'Users/SaveUser/';
                    this.deleteUserApi = 'Users/DeleteUser/';
                }
                UserService.prototype.authenticateUser = function (loginCredentials) {
                    return this.http.post('/Users/Authenticate', loginCredentials);
                };
                UserService.prototype.getUserProfile = function () {
                    return this.http.get('/Users/GetUserProfile');
                };
                UserService.prototype.getUser = function (userId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('userId', userId);
                    return this.http.get(this.getUserApi, { params: params });
                };
                UserService.prototype.getUsers = function (paginationRequest) {
                    if (paginationRequest == null)
                        paginationRequest = {
                            page: null,
                            pageSize: null,
                            filter: null,
                            order: {
                                orderByProperty: "name",
                                sortOrder: _common_models_paginationRequest__WEBPACK_IMPORTED_MODULE_3__["SortOrder"].descending
                            }
                        };
                    return this.http.post(this.getUsersApi, paginationRequest);
                };
                UserService.prototype.checkLoginIdExists = function (loginId) {
                    return tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"](this, void 0, void 0, function () {
                        var params;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                                        .set('loginId', loginId);
                                    return [4 /*yield*/, this.http.get(this.checkLoginIdExistsApi, { params: params }).toPromise()];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        });
                    });
                };
                UserService.prototype.saveUser = function (user) {
                    return this.http.post(this.saveUserApi, user);
                };
                UserService.prototype.deleteUser = function (userId) {
                    var params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpParams"]()
                        .set('userId', userId);
                    return this.http.delete(this.deleteUserApi, { params: params });
                };
                return UserService;
            }());
            UserService.ctorParameters = function () { return [
                { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] }
            ]; };
            UserService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])()
            ], UserService);
            /***/ 
        }),
        /***/ "./src/environments/environment.ts": 
        /*!*****************************************!*\
          !*** ./src/environments/environment.ts ***!
          \*****************************************/
        /*! exports provided: environment */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function () { return environment; });
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            // This file can be replaced during build by using the `fileReplacements` array.
            // `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
            // The list of file replacements can be found in `angular.json`.
            var environment = {
                production: false,
                Url: ""
            };
            /*
             * For easier debugging in development mode, you can import the following file
             * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
             *
             * This import should be commented out in production mode because it will have a negative impact
             * on performance if an error is thrown.
             */
            // import 'zone.js/dist/zone-error';  // Included with Angular CLI.
            /***/ 
        }),
        /***/ "./src/main.ts": 
        /*!*********************!*\
          !*** ./src/main.ts ***!
          \*********************/
        /*! no exports provided */
        /***/ (function (module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
            /* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
            /* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js");
            /* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
            /* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");
            if (_environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].production) {
                Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["enableProdMode"])();
            }
            Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_2__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_3__["AppModule"])
                .catch(function (err) { return console.error(err); });
            /***/ 
        }),
        /***/ 0: 
        /*!***************************!*\
          !*** multi ./src/main.ts ***!
          \***************************/
        /*! no static exports found */
        /***/ (function (module, exports, __webpack_require__) {
            module.exports = __webpack_require__(/*! F:\RND\RNDApp\Solution2\NERP.RND.Web\ClientApp\src\main.ts */ "./src/main.ts");
            /***/ 
        }),
        /***/ 1: 
        /*!********************!*\
          !*** fs (ignored) ***!
          \********************/
        /*! no static exports found */
        /***/ (function (module, exports) {
            /* (ignored) */
            /***/ 
        }),
        /***/ 2: 
        /*!************************!*\
          !*** crypto (ignored) ***!
          \************************/
        /*! no static exports found */
        /***/ (function (module, exports) {
            /* (ignored) */
            /***/ 
        }),
        /***/ 3: 
        /*!************************!*\
          !*** stream (ignored) ***!
          \************************/
        /*! no static exports found */
        /***/ (function (module, exports) {
            /* (ignored) */
            /***/ 
        })
    }, [[0, "runtime", "vendor"]]]);
//# sourceMappingURL=main-es2015.js.map
//# sourceMappingURL=main-es5.js.map
//# sourceMappingURL=main-es5.js.map